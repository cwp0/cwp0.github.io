{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/alipay.JPG","path":"img/alipay.JPG","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/wechat.JPG","path":"img/wechat.JPG","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/Valine.min.js","path":"js/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/assets/头像.JPG","path":"img/assets/头像.JPG","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/background/樱花1.jpg","path":"img/background/樱花1.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/img/background/樱花2.jpg","path":"img/background/樱花2.jpg","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"source/image/RNN-LSTM-GRU-GCN/img.png","path":"image/RNN-LSTM-GRU-GCN/img.png","modified":0,"renderable":0},{"_id":"source/image/RNN-LSTM-GRU-GCN/img_2.png","path":"image/RNN-LSTM-GRU-GCN/img_2.png","modified":0,"renderable":0},{"_id":"source/image/RNN-LSTM-GRU-GCN/img_3.png","path":"image/RNN-LSTM-GRU-GCN/img_3.png","modified":0,"renderable":0},{"_id":"source/image/RNN-LSTM-GRU-GCN/img_1.png","path":"image/RNN-LSTM-GRU-GCN/img_1.png","modified":0,"renderable":0},{"_id":"source/image/k8s部署云笔记系统/1.png","path":"image/k8s部署云笔记系统/1.png","modified":0,"renderable":0},{"_id":"source/image/k8s部署云笔记系统/2.png","path":"image/k8s部署云笔记系统/2.png","modified":0,"renderable":0},{"_id":"source/image/k8s部署云笔记系统/3.png","path":"image/k8s部署云笔记系统/3.png","modified":0,"renderable":0},{"_id":"source/image/k8s部署云笔记系统/4.png","path":"image/k8s部署云笔记系统/4.png","modified":0,"renderable":0},{"_id":"source/image/k8s部署云笔记系统/5.png","path":"image/k8s部署云笔记系统/5.png","modified":0,"renderable":0},{"_id":"source/image/k8s部署云笔记系统/6.png","path":"image/k8s部署云笔记系统/6.png","modified":0,"renderable":0},{"_id":"source/image/k8s部署云笔记系统/可莉.png","path":"image/k8s部署云笔记系统/可莉.png","modified":0,"renderable":0},{"_id":"source/image/云笔记系统扩容/6.png","path":"image/云笔记系统扩容/6.png","modified":0,"renderable":0},{"_id":"source/image/云笔记系统扩容/add-labels.png","path":"image/云笔记系统扩容/add-labels.png","modified":0,"renderable":0},{"_id":"source/image/云笔记系统扩容/backup-desktop.png","path":"image/云笔记系统扩容/backup-desktop.png","modified":0,"renderable":0},{"_id":"source/image/云笔记系统扩容/backup.png","path":"image/云笔记系统扩容/backup.png","modified":0,"renderable":0},{"_id":"source/image/云笔记系统扩容/delete-pod.png","path":"image/云笔记系统扩容/delete-pod.png","modified":0,"renderable":0},{"_id":"source/image/云笔记系统扩容/expand.png","path":"image/云笔记系统扩容/expand.png","modified":0,"renderable":0},{"_id":"source/image/云笔记系统扩容/login.png","path":"image/云笔记系统扩容/login.png","modified":0,"renderable":0},{"_id":"source/image/云笔记系统扩容/pod-after-deleted.png","path":"image/云笔记系统扩容/pod-after-deleted.png","modified":0,"renderable":0},{"_id":"source/image/云笔记系统扩容/pod-after-deploy.png","path":"image/云笔记系统扩容/pod-after-deploy.png","modified":0,"renderable":0},{"_id":"source/image/云笔记系统扩容/pod-deploy.png","path":"image/云笔记系统扩容/pod-deploy.png","modified":0,"renderable":0},{"_id":"source/image/云笔记系统扩容/pod-node.png","path":"image/云笔记系统扩容/pod-node.png","modified":0,"renderable":0},{"_id":"source/image/云笔记系统扩容/pod.png","path":"image/云笔记系统扩容/pod.png","modified":0,"renderable":0},{"_id":"source/image/云笔记系统扩容/setting.png","path":"image/云笔记系统扩容/setting.png","modified":0,"renderable":0},{"_id":"source/image/云笔记系统扩容/shutdown.png","path":"image/云笔记系统扩容/shutdown.png","modified":0,"renderable":0},{"_id":"source/image/云笔记系统扩容/vmware.png","path":"image/云笔记系统扩容/vmware.png","modified":0,"renderable":0},{"_id":"source/image/云笔记系统扩容/xftp.png","path":"image/云笔记系统扩容/xftp.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/A3C.png","path":"image/强化学习/A3C.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/A3C1.png","path":"image/强化学习/A3C1.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/AC算法.png","path":"image/强化学习/AC算法.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/DDPG1.png","path":"image/强化学习/DDPG1.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/DDPG2.png","path":"image/强化学习/DDPG2.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/DQN.png","path":"image/强化学习/DQN.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/DQN公式.png","path":"image/强化学习/DQN公式.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/DQN更新的是Q值.png","path":"image/强化学习/DQN更新的是Q值.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/DuelDQN.png","path":"image/强化学习/DuelDQN.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/DuelDQN网络架构.png","path":"image/强化学习/DuelDQN网络架构.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/G值的意义.png","path":"image/强化学习/G值的意义.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/Magic'(X).png","path":"image/强化学习/Magic'(X).png","modified":0,"renderable":0},{"_id":"source/image/强化学习/Magic(X).png","path":"image/强化学习/Magic(X).png","modified":0,"renderable":0},{"_id":"source/image/强化学习/Q'估算Q 1.png","path":"image/强化学习/Q'估算Q 1.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/Q'估计Q 2.png","path":"image/强化学习/Q'估计Q 2.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/Q=S+A表格.png","path":"image/强化学习/Q=S+A表格.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/Qlearning公式.png","path":"image/强化学习/Qlearning公式.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/Qlearning图解.png","path":"image/强化学习/Qlearning图解.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/Qtable三维可视化.png","path":"image/强化学习/Qtable三维可视化.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/Q值的定义.png","path":"image/强化学习/Q值的定义.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/Q值转V值.png","path":"image/强化学习/Q值转V值.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/Q值转V值1.png","path":"image/强化学习/Q值转V值1.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/SARSA.png","path":"image/强化学习/SARSA.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/SARSA公式.png","path":"image/强化学习/SARSA公式.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/TD(0).png","path":"image/强化学习/TD(0).png","modified":0,"renderable":0},{"_id":"source/image/强化学习/TD(0)与SARSA对比.png","path":"image/强化学习/TD(0)与SARSA对比.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/TD(0)图解.png","path":"image/强化学习/TD(0)图解.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/TD(0)更新公式.png","path":"image/强化学习/TD(0)更新公式.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/TD(N).png","path":"image/强化学习/TD(N).png","modified":0,"renderable":0},{"_id":"source/image/强化学习/TD-error.png","path":"image/强化学习/TD-error.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/TD3.png","path":"image/强化学习/TD3.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/V值的定义.png","path":"image/强化学习/V值的定义.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/V值转Q值.png","path":"image/强化学习/V值转Q值.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/V值转Q值1.png","path":"image/强化学习/V值转Q值1.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/V值转V值.png","path":"image/强化学习/V值转V值.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/fix-Q-targets.png","path":"image/强化学习/fix-Q-targets.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/两种理解方式.png","path":"image/强化学习/两种理解方式.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/为什么不估算Q.png","path":"image/强化学习/为什么不估算Q.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/二维曲线.png","path":"image/强化学习/二维曲线.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/例子1.png","path":"image/强化学习/例子1.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/公式1.png","path":"image/强化学习/公式1.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/公式2.png","path":"image/强化学习/公式2.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/回顾DQN.png","path":"image/强化学习/回顾DQN.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/坑的解释.png","path":"image/强化学习/坑的解释.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/复习MC.png","path":"image/强化学习/复习MC.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/学习路线.png","path":"image/强化学习/学习路线.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/扭曲的曲线.png","path":"image/强化学习/扭曲的曲线.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/数据加工厂.png","path":"image/强化学习/数据加工厂.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/普通DQN.png","path":"image/强化学习/普通DQN.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/更新公式.png","path":"image/强化学习/更新公式.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/正态分布.png","path":"image/强化学习/正态分布.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/理解DDPG1.png","path":"image/强化学习/理解DDPG1.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/理解DDPG2.png","path":"image/强化学习/理解DDPG2.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/用下一个动作的Q代替V.png","path":"image/强化学习/用下一个动作的Q代替V.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/由G值算V值.png","path":"image/强化学习/由G值算V值.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/用TD估计Q值.png","path":"image/强化学习/用TD估计Q值.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/直观感受PG2.png","path":"image/强化学习/直观感受PG2.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/离散动作-策略分布.png","path":"image/强化学习/离散动作-策略分布.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/策略1.png","path":"image/强化学习/策略1.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/直观感受PG3.png","path":"image/强化学习/直观感受PG3.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/直观感受PG1.png","path":"image/强化学习/直观感受PG1.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/策略2.png","path":"image/强化学习/策略2.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/策略3.png","path":"image/强化学习/策略3.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/策略4.png","path":"image/强化学习/策略4.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/策略P和策略B.png","path":"image/强化学习/策略P和策略B.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/策略P和策略B更新示意图.png","path":"image/强化学习/策略P和策略B更新示意图.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/连续型概率分布示意图.png","path":"image/强化学习/连续型概率分布示意图.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/重要性权重表格.png","path":"image/强化学习/重要性权重表格.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/马尔科夫树.png","path":"image/强化学习/马尔科夫树.png","modified":0,"renderable":0},{"_id":"source/image/强化学习/马尔科夫链.png","path":"image/强化学习/马尔科夫链.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img.png","path":"image/MARL/img.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_1.png","path":"image/MARL/img_1.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_10.png","path":"image/MARL/img_10.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_11.png","path":"image/MARL/img_11.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_12.png","path":"image/MARL/img_12.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_13.png","path":"image/MARL/img_13.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_14.png","path":"image/MARL/img_14.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_15.png","path":"image/MARL/img_15.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_16.png","path":"image/MARL/img_16.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_17.png","path":"image/MARL/img_17.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_18.png","path":"image/MARL/img_18.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_2.png","path":"image/MARL/img_2.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_20.png","path":"image/MARL/img_20.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_21.png","path":"image/MARL/img_21.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_22.png","path":"image/MARL/img_22.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_23.png","path":"image/MARL/img_23.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_24.png","path":"image/MARL/img_24.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_19.png","path":"image/MARL/img_19.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_25.png","path":"image/MARL/img_25.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_27.png","path":"image/MARL/img_27.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_28.png","path":"image/MARL/img_28.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_29.png","path":"image/MARL/img_29.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_3.png","path":"image/MARL/img_3.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_26.png","path":"image/MARL/img_26.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_30.png","path":"image/MARL/img_30.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_31.png","path":"image/MARL/img_31.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_32.png","path":"image/MARL/img_32.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_33.png","path":"image/MARL/img_33.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_35.png","path":"image/MARL/img_35.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_36.png","path":"image/MARL/img_36.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_34.png","path":"image/MARL/img_34.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_38.png","path":"image/MARL/img_38.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_37.png","path":"image/MARL/img_37.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_39.png","path":"image/MARL/img_39.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_4.png","path":"image/MARL/img_4.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_40.png","path":"image/MARL/img_40.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_41.png","path":"image/MARL/img_41.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_42.png","path":"image/MARL/img_42.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_43.png","path":"image/MARL/img_43.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_44.png","path":"image/MARL/img_44.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_45.png","path":"image/MARL/img_45.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_46.png","path":"image/MARL/img_46.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_47.png","path":"image/MARL/img_47.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_48.png","path":"image/MARL/img_48.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_49.png","path":"image/MARL/img_49.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_5.png","path":"image/MARL/img_5.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_50.png","path":"image/MARL/img_50.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_51.png","path":"image/MARL/img_51.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_52.png","path":"image/MARL/img_52.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_53.png","path":"image/MARL/img_53.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_54.png","path":"image/MARL/img_54.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_55.png","path":"image/MARL/img_55.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_56.png","path":"image/MARL/img_56.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_6.png","path":"image/MARL/img_6.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_7.png","path":"image/MARL/img_7.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_8.png","path":"image/MARL/img_8.png","modified":0,"renderable":0},{"_id":"source/image/MARL/img_9.png","path":"image/MARL/img_9.png","modified":0,"renderable":0}],"Cache":[{"_id":"source/_data/link.yml","hash":"f98992c0731559bcdc7fdc1af1f93b8dbae10649","modified":1694621161236},{"_id":"source/.DS_Store","hash":"4bea7c63a8123ff9b87f74cb1ef1c4388efd940c","modified":1695195358048},{"_id":"source/_posts/Java后端面经.md","hash":"eeb33ec15d581107bee8bdd7d0dc874e67bc92f1","modified":1717674698540},{"_id":"source/_posts/RNN-LSTM-GRU-GCN.md","hash":"6e52f9a44726dbf1a5d6dc8e9612e65007eccdc1","modified":1716813849681},{"_id":"source/_posts/MARL.md","hash":"9ef3f36d4353aa52597efb3640605b25b22ddb9c","modified":1707223879808},{"_id":"source/_posts/hello-world.md","hash":"c4dabc86aa226113f500f9c79b3daab53cc7f19e","modified":1716813908177},{"_id":"source/_posts/k8s部署云笔记系统.md","hash":"31daab24a778ebf1f415e6f4bffb2ce4156a35e0","modified":1695395735500},{"_id":"source/_posts/react技巧.md","hash":"5b404eaf82d603fe8e3975bc08976dbd56334f24","modified":1716813849685},{"_id":"source/_posts/云笔记系统扩容.md","hash":"087584c24cf1a57462f77d6463053fefb4d1ce82","modified":1707225167307},{"_id":"source/_posts/前端-移动端面经.md","hash":"26592998acf64f4bc57a28ad4929ee7983260047","modified":1716813705906},{"_id":"source/_posts/测开面经.md","hash":"89c853e0d17786cf32d4a76fd9bf48adf42d8b73","modified":1716813705911},{"_id":"source/categories/index.md","hash":"8327a464fbe3f93cac6b89401e6315c63eba895f","modified":1693482273118},{"_id":"source/link/index.md","hash":"7a17f4dc4cf4eae0b205dceccf4d76c81d226f58","modified":1693482301378},{"_id":"source/about/index.md","hash":"93894d35822db147684c8ca1511132fc38db0725","modified":1708432925823},{"_id":"source/_posts/强化学习.md","hash":"ccebfe756916da1294ca3e02e33e20e15b22a755","modified":1707225304696},{"_id":"source/movies/index.md","hash":"9fdcdf109e4daff4f0a66d140a764c5ce2a55dd7","modified":1693482586713},{"_id":"source/pictures/index.md","hash":"60581014aace73d200a0719c720bc5f5aba08708","modified":1707225802948},{"_id":"source/music/index.md","hash":"35648eb9af8d7b9fe29bb63e7b321c9cda6fefa0","modified":1693482586718},{"_id":"source/tags/index.md","hash":"e9b98a407b92523541efe47ea7d4ad42e157124e","modified":1694620980990},{"_id":"source/image/k8s部署云笔记系统/1.png","hash":"cbbc86c9fa5786c5d9f3a2572f2404cd2e28343c","modified":1695134749835},{"_id":"source/image/k8s部署云笔记系统/4.png","hash":"ad4e697fc59a97823ecea4b0b1518e1b47ac554f","modified":1695135164081},{"_id":"source/image/云笔记系统扩容/add-labels.png","hash":"bda66f4607328559c6c30ffdb8c72a609440b6d2","modified":1695193699809},{"_id":"source/image/云笔记系统扩容/backup.png","hash":"5f24217b2cedf48df437fd12b07a40714b3aef42","modified":1695193380118},{"_id":"source/image/云笔记系统扩容/delete-pod.png","hash":"555dd5ad746957138bf6322fad5a9c016b1c6c8b","modified":1695193512011},{"_id":"source/image/云笔记系统扩容/login.png","hash":"a004fc668d822d77284e1cceeee3c06e09501eec","modified":1695193348520},{"_id":"source/image/云笔记系统扩容/expand.png","hash":"b7b091f13ebee50e6be59d2d1c49cb69c459a87d","modified":1695194083229},{"_id":"source/image/RNN-LSTM-GRU-GCN/img_1.png","hash":"9c4d7fb94cf4d88efa0f1d57c50837b1e5aa113f","modified":1703162286448},{"_id":"source/image/云笔记系统扩容/pod-after-deploy.png","hash":"ddb7e4b717be6f48c7f7090c34b5d9fec746589d","modified":1695193845583},{"_id":"source/image/云笔记系统扩容/pod-after-deleted.png","hash":"39cda3ef81cc34d9080163e85134bcad21d70521","modified":1695193632554},{"_id":"source/image/云笔记系统扩容/pod.png","hash":"77a844b176d7492e31868b9ba95bb9e468997de8","modified":1695193123630},{"_id":"source/image/云笔记系统扩容/pod-node.png","hash":"47f61d747d459f2e0a4728c77e01c6f14f287436","modified":1695193233122},{"_id":"source/image/云笔记系统扩容/shutdown.png","hash":"e320600cd94d80e5b89012afdc90a4a8e2668d5d","modified":1695193961828},{"_id":"source/image/云笔记系统扩容/setting.png","hash":"4ca95d8e457eba8f21ffe74743f00d479623f20f","modified":1695194013834},{"_id":"source/image/云笔记系统扩容/vmware.png","hash":"08bd99db55ee3786a77142de854b7d046410e100","modified":1695193301246},{"_id":"source/pictures/gallery_groups/genshin.md","hash":"c4ef1a50d83f665cb7aeda388515a3cd1c02174e","modified":1707225666368},{"_id":"source/pictures/gallery_groups/lol-kda.md","hash":"71adee600848e1aa15d90b8702421760f29e6127","modified":1707225758126},{"_id":"source/pictures/gallery_groups/wabobo.md","hash":"73164a4be798f334646a928e9850e16f3c755e64","modified":1703580802200},{"_id":"source/image/强化学习/DQN.png","hash":"b6054f8acddb250924d87682e59743bfae1d4355","modified":1698130997432},{"_id":"source/image/强化学习/DDPG1.png","hash":"ec86ecd8427b549620d9421d9667205585b401f3","modified":1698651842765},{"_id":"source/image/强化学习/DQN公式.png","hash":"c5853cc32e2e37efa40de4b2a428f4dd7e7fd0ee","modified":1698131302833},{"_id":"source/image/强化学习/DQN更新的是Q值.png","hash":"1513561ff6159ff47546cdd7e625840395a7a9ee","modified":1698396480795},{"_id":"source/image/强化学习/Magic(X).png","hash":"c4b28174d7b8d1ba5cfe66c80ca2f287193cfd35","modified":1698127119630},{"_id":"source/image/强化学习/Qlearning公式.png","hash":"3210173c653c2537862c9dc63ec95346e4295e13","modified":1698075767236},{"_id":"source/image/强化学习/SARSA公式.png","hash":"40ca3c4957b16bc405d1da6ba263502c7e67e33a","modified":1698075438789},{"_id":"source/image/强化学习/TD(0)与SARSA对比.png","hash":"ff6c716f5f1a06c11eae440995a09e310ce9b4bd","modified":1698075486710},{"_id":"source/image/强化学习/SARSA.png","hash":"ea6aaf0c6b5dc7953045fb7700800ee3fdc700db","modified":1698075261938},{"_id":"source/image/强化学习/TD(0)更新公式.png","hash":"70db3a258e3932edcdaa7ee9ccf8bc5e398fff89","modified":1698073783866},{"_id":"source/image/强化学习/V值转Q值1.png","hash":"a40ef07f53519b337bf0ff6b7ae97be0267b4c90","modified":1698067290092},{"_id":"source/image/强化学习/二维曲线.png","hash":"79d6d24224cb080eebcbacf9ea3fc9150f0e1efa","modified":1698130005699},{"_id":"source/image/强化学习/为什么不估算Q.png","hash":"bdd8c9609d188eccae505e62cd91653f97f44bff","modified":1698142267178},{"_id":"source/image/强化学习/公式1.png","hash":"40830fb8aa8c518414a8990c89574e7bc776afde","modified":1698066893279},{"_id":"source/image/强化学习/公式2.png","hash":"6581547a28f03a38bb1ff7f6795b54ce4b8ceb34","modified":1698067330761},{"_id":"source/image/强化学习/复习MC.png","hash":"58bb9a31d6fe9d72e328eb968c3f3efdb89d49b2","modified":1698139201629},{"_id":"source/image/强化学习/普通DQN.png","hash":"477f4e29663b44367dbd4beb42add37a4d9a9390","modified":1698137439974},{"_id":"source/image/强化学习/正态分布.png","hash":"3b4c5269bc41c9847e25e991a4fa9cddf4cba1d5","modified":1698393944004},{"_id":"source/image/强化学习/更新公式.png","hash":"b35143195b71b232c3dab90a86407538ba47319e","modified":1698072937063},{"_id":"source/image/强化学习/用下一个动作的Q代替V.png","hash":"8223f6e6e3013863bf48ca6af031129bb47ece6c","modified":1698074546181},{"_id":"source/image/强化学习/离散动作-策略分布.png","hash":"7ea3a2855155e0ba0d4340490c30e665520ef086","modified":1698393601833},{"_id":"source/image/强化学习/策略2.png","hash":"6338e81e51fa44716e4bb5aa7153001f7002f37b","modified":1698066082805},{"_id":"source/image/强化学习/策略1.png","hash":"03e05721672d45f7d1cfcecc8dc1c49330b49080","modified":1698066048393},{"_id":"source/image/强化学习/重要性权重表格.png","hash":"c636ebf159c7d5a8abdcb5324b0fb2e9dd7cbdb6","modified":1698649484352},{"_id":"source/image/强化学习/马尔科夫链.png","hash":"d54e77948355fb074bff4974edd3d4ee30756835","modified":1698075038617},{"_id":"source/image/MARL/img_23.png","hash":"6ca8cadc7d839d30cd37a6274948a1c4d906241d","modified":1699429510588},{"_id":"source/image/MARL/img_29.png","hash":"a6830f8337fb9a859d4a2c1b07a6a349dad993b8","modified":1699431955161},{"_id":"source/image/MARL/img_26.png","hash":"ffe5deb6ad0a6bc709308d4eb7b91e989540d106","modified":1699430679176},{"_id":"source/image/MARL/img_31.png","hash":"3a056d2f64c018aad380d09337d10960278e7afe","modified":1699432536093},{"_id":"source/image/MARL/img_37.png","hash":"7fd6214a4f31c0c2174ea359fed9ffbd47135036","modified":1699435251687},{"_id":"source/image/MARL/img_36.png","hash":"6f6d264d3ccd0ec188cbaaa59d717e150361de42","modified":1699435203008},{"_id":"source/image/MARL/img_4.png","hash":"3a15c0caf011c5d537c2ee6c81ba034271135ae5","modified":1699269298460},{"_id":"source/image/MARL/img_38.png","hash":"ee0c90f890da5e81d41b0a26bd6c1ac2baf8a44f","modified":1699445855380},{"_id":"source/image/MARL/img_40.png","hash":"3f96da5e3b653c15749281c96391a6d5f7e4ef67","modified":1699445975883},{"_id":"source/image/MARL/img_39.png","hash":"63c5ae9cec80b06bad00c35c5e515fb235ea032b","modified":1699445961327},{"_id":"source/image/MARL/img_42.png","hash":"76b07804b780b73e29f99bb4c603c9adb7ab4c42","modified":1699447044627},{"_id":"source/image/MARL/img_43.png","hash":"f1abcb06f1c25a812a7c6ed23d247fe9fa0bfb3e","modified":1699447100650},{"_id":"source/image/MARL/img_44.png","hash":"e2577e0813fbf9cc4042287e4b7e3fdd8e041960","modified":1699447161097},{"_id":"source/image/MARL/img_51.png","hash":"438c730fee36179be3196cfb65ac79509f378a0c","modified":1699520914234},{"_id":"source/image/MARL/img_52.png","hash":"d1e26fa21fcf1c9d14374d298de37459511c05f8","modified":1699520939564},{"_id":"source/image/MARL/img_54.png","hash":"44936f25b9fc28b501e9dec0042473a4ea443bb7","modified":1699521055616},{"_id":"source/image/MARL/img_56.png","hash":"e9462c7dbb24de3d1387d770a1bff9ebb0d6862a","modified":1699521123464},{"_id":"source/image/RNN-LSTM-GRU-GCN/img.png","hash":"b5e3b81743830a235f98a3ed98888664ac1b8c01","modified":1703162192732},{"_id":"source/image/RNN-LSTM-GRU-GCN/img_3.png","hash":"3ccf1aae722c09b1b8ab22b5270e33b37eafcb55","modified":1703162506776},{"_id":"source/image/k8s部署云笔记系统/6.png","hash":"7608498f2f5dede16990a0643e242280e193f9c1","modified":1695135238989},{"_id":"source/image/云笔记系统扩容/6.png","hash":"7608498f2f5dede16990a0643e242280e193f9c1","modified":1695135238989},{"_id":"source/image/云笔记系统扩容/xftp.png","hash":"e3cb8d796d3576397b91f6168a106dcc215b85d6","modified":1695193439539},{"_id":"source/image/强化学习/A3C1.png","hash":"3005353326c11c8aebe3a637638f7be5f43a7825","modified":1698655179811},{"_id":"source/image/强化学习/AC算法.png","hash":"a1a024144b42ea965070692c87648dbc17640a5a","modified":1698143519699},{"_id":"source/image/强化学习/DDPG2.png","hash":"e4df30b144f63e269dde8e2bd9fd613bc2a55551","modified":1698652051389},{"_id":"source/image/强化学习/DuelDQN网络架构.png","hash":"5faebac7e88f43d768347d2a44f5ea635aef5f93","modified":1698137812624},{"_id":"source/image/强化学习/DuelDQN.png","hash":"e6a024745d81a004dbc9372754e0afcbea8500cd","modified":1698137595387},{"_id":"source/image/强化学习/Magic'(X).png","hash":"915a394ba63779fa45fb4ab337d35e9aa3656a1d","modified":1698127506423},{"_id":"source/image/强化学习/Qtable三维可视化.png","hash":"19e2457ff644019941c4e4889e271ae19851c8b7","modified":1698129622900},{"_id":"source/image/强化学习/Qlearning图解.png","hash":"99e1f7c3c09e8b8ff40013e5274197e84bbeccac","modified":1698075645794},{"_id":"source/image/强化学习/TD(0)图解.png","hash":"442c7c3185254c616b7dd581d3122c5b287d0609","modified":1698073834475},{"_id":"source/image/强化学习/TD-error.png","hash":"6cd354a8357bd9b351204db8ffbc86f14fa46388","modified":1698142535138},{"_id":"source/image/强化学习/TD3.png","hash":"f742b6d7ea08bddec59b241f4623e3a292fc8a99","modified":1698652474564},{"_id":"source/image/强化学习/V值转V值.png","hash":"04d61bd802407d82933d4fc3d48f655f82195df6","modified":1698067562607},{"_id":"source/image/强化学习/fix-Q-targets.png","hash":"28054b2d0b4c65f2e515366675d183072dc0670c","modified":1698132299748},{"_id":"source/image/强化学习/例子1.png","hash":"9f00eb53650a1323eed0c41405bc446f1edc0bc0","modified":1698065976437},{"_id":"source/image/强化学习/回顾DQN.png","hash":"3d6ef5df0f373b7e934dce35691e99cc2274e453","modified":1698651187817},{"_id":"source/image/强化学习/数据加工厂.png","hash":"0f6de0db66dba3926063c5e15801273c016eefe6","modified":1698127723223},{"_id":"source/image/强化学习/直观感受PG2.png","hash":"dc3b790d0138431bd36ca86d9cecb4c3724948d0","modified":1698139454702},{"_id":"source/image/强化学习/扭曲的曲线.png","hash":"1e785c5e507fcb8999cddd62724b194be6dbbae0","modified":1698129712910},{"_id":"source/image/强化学习/由G值算V值.png","hash":"4cd7c7aa68eba7d540f8d6ad3700f913b98b14d0","modified":1698068207405},{"_id":"source/image/强化学习/直观感受PG1.png","hash":"abe569e686536c668a3f038c9a57052c6bcbc9d4","modified":1698139289526},{"_id":"source/image/强化学习/用TD估计Q值.png","hash":"4ae7ab1a840d2f66a6796920a561642608012404","modified":1698074262645},{"_id":"source/image/强化学习/直观感受PG3.png","hash":"76a2980409108c0cb4330cee7d3bf27d0c7ea8b5","modified":1698139536195},{"_id":"source/image/强化学习/策略P和策略B.png","hash":"2ea5ef3287f9d2a216c9d2abf8ddf49bf0ab8989","modified":1698395660821},{"_id":"source/image/强化学习/策略3.png","hash":"07c8459c5961babf996f8b4c16ab17b11c7f4c43","modified":1698068386281},{"_id":"source/image/强化学习/策略P和策略B更新示意图.png","hash":"61b7166aad0636090777247c4d4cff7d05177234","modified":1698396201316},{"_id":"source/image/强化学习/策略4.png","hash":"e7bfcbf76f24fe190ab7ed50a0f2085b22496cd6","modified":1698068425514},{"_id":"source/image/强化学习/连续型概率分布示意图.png","hash":"b3772e1cf96f08a1e289bc51c9c44750ce3c07ce","modified":1698393732421},{"_id":"source/image/MARL/img_1.png","hash":"6d1ebca900fd3c98a7382ea4cc52c9f9fb4bf6d6","modified":1699263064926},{"_id":"source/image/MARL/img.png","hash":"1a15c68b483bbe455c739a3e63d00f9bf517dd8f","modified":1699447688422},{"_id":"source/image/MARL/img_10.png","hash":"19a0f333d77505aa50e3ce3a4cf8dbdef15a9a08","modified":1699275769385},{"_id":"source/image/MARL/img_11.png","hash":"99d56908d7c6e6e00ee9cdebe963f253dd55f2c3","modified":1699275805693},{"_id":"source/image/MARL/img_12.png","hash":"04e35d22666436dd7c937da31d6107769694cfe1","modified":1699276141729},{"_id":"source/image/MARL/img_14.png","hash":"a4270b1a9cc1d89e4ef81eb6288306bccd423293","modified":1699276381627},{"_id":"source/image/MARL/img_22.png","hash":"7ae93ca4e125194633a84b6623e892d306563147","modified":1699429410488},{"_id":"source/image/MARL/img_21.png","hash":"159c9d40e4c3b86ce74dad3627eea0925c05d3d8","modified":1699348867917},{"_id":"source/image/MARL/img_25.png","hash":"780801543fbad5a539da734659da4267e98f6226","modified":1699430563834},{"_id":"source/image/MARL/img_27.png","hash":"7f45efb57054b5c741adf1338e074b7cb72f4682","modified":1699431715584},{"_id":"source/image/MARL/img_3.png","hash":"3cd6383d45a693af460d791b6397edadefb54dd7","modified":1699264231549},{"_id":"source/image/MARL/img_32.png","hash":"d19088279eea2d8be2c91789bed07bb8b9157cf3","modified":1699433871624},{"_id":"source/image/MARL/img_28.png","hash":"3331cbf3b0f5e02aad69ae549a2ca2992e4bc09b","modified":1699431810901},{"_id":"source/image/MARL/img_33.png","hash":"1d5a7d97483e1b7f9b15babafa9edaecd16a1ae5","modified":1699434003076},{"_id":"source/image/MARL/img_35.png","hash":"9c3f707a1e976d26367cef5b697a1e1713e9d30a","modified":1699434762807},{"_id":"source/image/MARL/img_41.png","hash":"dc99ef84a23747bf1df39ffa75f65142833c50f2","modified":1699446131663},{"_id":"source/image/MARL/img_34.png","hash":"c40b199cbfa1e48eeb2f48703d97612b10cf8ddd","modified":1699434698850},{"_id":"source/image/MARL/img_47.png","hash":"97bd6ad4c936907889397163b6b82f058bfeb8a5","modified":1699520646167},{"_id":"source/image/MARL/img_45.png","hash":"653093958a2cd8ec02eb57999be05dae36d22c78","modified":1699510828329},{"_id":"source/image/MARL/img_46.png","hash":"075ab0887e92c81a785a7fd5cc529e02d5b827a2","modified":1699510865035},{"_id":"source/image/MARL/img_48.png","hash":"4a35a0f5f5d3db09ed2ffaed576384bd8b3a5b7f","modified":1699520709218},{"_id":"source/image/MARL/img_49.png","hash":"6f42c5de881e8e0e2f9205397492403608d305ea","modified":1699520732221},{"_id":"source/image/MARL/img_50.png","hash":"d2a92cb31f82e75f76a836677ba630056c8a76de","modified":1699520797975},{"_id":"source/image/MARL/img_53.png","hash":"e77f4991c711db44fc958f9ff5848b3d23fa2155","modified":1699520990504},{"_id":"source/image/MARL/img_55.png","hash":"2ae039d4635d2584df1aa70813fe0823ba64cd9a","modified":1699521090374},{"_id":"source/image/MARL/img_6.png","hash":"34f870290763316b68e4b0654992943d463b55ad","modified":1699272206553},{"_id":"source/image/MARL/img_7.png","hash":"069091e238963421f52d381826bea91e89ca7fda","modified":1699272259493},{"_id":"source/image/RNN-LSTM-GRU-GCN/img_2.png","hash":"0e93fa825353061329cc917c8f98cd30f4591370","modified":1703162400100},{"_id":"source/image/k8s部署云笔记系统/2.png","hash":"eae90eb1b195c84430fe54a09819862bdd352a2f","modified":1695135048964},{"_id":"source/image/k8s部署云笔记系统/5.png","hash":"1432b61eb04256e0627913d0e3323eff178626b1","modified":1695135226787},{"_id":"source/image/MARL/img_9.png","hash":"5c9bd19962a9def0dc103325550201d406ebf1f9","modified":1699275717293},{"_id":"source/image/云笔记系统扩容/backup-desktop.png","hash":"e6ec39385bcd11c4db8a3599509e3fc40f0bce83","modified":1695193567047},{"_id":"source/image/强化学习/A3C.png","hash":"137d1bfc646d4aec2c83a97b339b58bc59ff81fa","modified":1698655021495},{"_id":"source/image/强化学习/G值的意义.png","hash":"68992cb8a2194c779748e9a34ffccfb4156d25df","modified":1698067941803},{"_id":"source/image/强化学习/Q'估计Q 2.png","hash":"d4b88893a5d0c2d81e9ca846e4129c53ef989d1b","modified":1698654081600},{"_id":"source/image/强化学习/Q'估算Q 1.png","hash":"fe5352cc8507ff0748c0e3bb0d90acd8055753e8","modified":1698654037660},{"_id":"source/image/强化学习/Q=S+A表格.png","hash":"8277d01e72f923f488d82cda32befd415d203f40","modified":1698137333051},{"_id":"source/image/强化学习/Q值的定义.png","hash":"969a8e6a7d764e5f3366de0b46fd22d34f6c90a2","modified":1698066186438},{"_id":"source/image/强化学习/TD(N).png","hash":"cf4525e94a10fd8c40d5324f9a616edf0bb5e04d","modified":1698650138224},{"_id":"source/image/强化学习/Q值转V值1.png","hash":"e168cf4b797ea342ea2cf45a15030424f594c7bf","modified":1698066824962},{"_id":"source/image/强化学习/V值的定义.png","hash":"9a95cb005f86b501901dbe8ecd63f4857ce45857","modified":1698065682845},{"_id":"source/image/强化学习/两种理解方式.png","hash":"8ce85b9a7824394c5ff8eb685af6be073093b9d2","modified":1698070616781},{"_id":"source/image/强化学习/学习路线.png","hash":"34e7356e916c72ca4c778d116badc860ea1b8146","modified":1698063001345},{"_id":"source/image/强化学习/TD(0).png","hash":"46c1b1d85bc500d3317fc98af24cc00407e4c3a2","modified":1698072622958},{"_id":"source/image/强化学习/坑的解释.png","hash":"dc5251c2966f88383d3eaa7c92ac1961ab29b739","modified":1698074712932},{"_id":"source/image/MARL/img_13.png","hash":"439f1936f67cafa07c0e856eb64d49720f67637b","modified":1699276162593},{"_id":"source/image/MARL/img_15.png","hash":"e8f55f26c5bed2b0e1f9926d71fb84480180790b","modified":1699276421196},{"_id":"source/image/MARL/img_17.png","hash":"f4a452e9775d395bfa369d54c14fca91c00b7a17","modified":1699276590851},{"_id":"source/image/MARL/img_20.png","hash":"0a3e3919dc0fa73b206df79f1c3c600d92defc2a","modified":1699276662379},{"_id":"source/image/MARL/img_16.png","hash":"66909131a240f3e754bc656e4303d21815e7d100","modified":1699276517300},{"_id":"source/image/MARL/img_2.png","hash":"ab12cb07c1c4e44b70dc35a0a925544ac2a6e115","modified":1699263964324},{"_id":"source/image/MARL/img_5.png","hash":"fa4cb933ca9f685f35f49d8262b4192a1955968b","modified":1699269359830},{"_id":"source/image/k8s部署云笔记系统/3.png","hash":"85cfb5ad615d808491052523c665dd38c152b148","modified":1695135130751},{"_id":"source/image/强化学习/Q值转V值.png","hash":"2aff0b6882884466d6a727e42a9df19c6117b768","modified":1698066509888},{"_id":"source/image/强化学习/V值转Q值.png","hash":"2abc3e4c268f8a277ff1b1596d1fcd2d6f328d0a","modified":1698067186694},{"_id":"source/image/MARL/img_8.png","hash":"803f9cd2e5768da860f76667e589d5b77a201340","modified":1699274324531},{"_id":"source/image/强化学习/理解DDPG1.png","hash":"31f1afbdee99c095a0939941bc0cf2f815c3a2e1","modified":1698651459850},{"_id":"source/image/强化学习/理解DDPG2.png","hash":"d96a5ac6aa63978a4bca742c5c13319cc5acdd8f","modified":1698651557112},{"_id":"source/image/强化学习/马尔科夫树.png","hash":"60c324eaffab2259fbdcb415a356f29088b182bd","modified":1698064272462},{"_id":"source/image/MARL/img_18.png","hash":"98e324069ae326b697ea9fcdec3bfe9c8246ad19","modified":1699276636497},{"_id":"source/image/MARL/img_19.png","hash":"6f2d0f1b01b1e55d1132aba9841ce70c908871ab","modified":1699276652495},{"_id":"source/image/MARL/img_30.png","hash":"cd0054217d899963732fd6f7f7244fdf8ec27ee5","modified":1699432426918},{"_id":"themes/butterfly/README_CN.md","hash":"86569b94949392e9b981608433495f0941d20b0c","modified":1693301015683},{"_id":"themes/butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1693301015683},{"_id":"themes/butterfly/package.json","hash":"1646604798f745ef068852772eb22239985ba731","modified":1693301015694},{"_id":"themes/butterfly/README.md","hash":"b5d6e7271b88d1a63755386442663af03e36a428","modified":1693301015683},{"_id":"themes/butterfly/.DS_Store","hash":"3c9af3e41223fcbc007179853fab8522390ad97a","modified":1697703842380},{"_id":"themes/butterfly/languages/default.yml","hash":"4025c0ba440eb24705dd0293ca9ca84efb3105cc","modified":1693301015684},{"_id":"themes/butterfly/plugins.yml","hash":"d0e179ae31cdc62037062432b0ee7a9008155a73","modified":1693301015694},{"_id":"themes/butterfly/languages/en.yml","hash":"4e9cdb7a3570929bcf082de7a4eac49140dddc73","modified":1693301015684},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"ee01e068f12dc33adfae5733824ea1255deb5ca6","modified":1693301015684},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"7dd849c3ba34986c57c764d9e36150b4bfffd2e9","modified":1693301015684},{"_id":"themes/butterfly/layout/category.pug","hash":"710708cfdb436bc875602abf096c919ccdf544db","modified":1693301015684},{"_id":"themes/butterfly/layout/archive.pug","hash":"a0c034c2d319320a54046805e80b58dc48b7e233","modified":1693301015684},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1693301015694},{"_id":"themes/butterfly/_config.yml","hash":"459517785a7161e07c333bfe2900243b6287f905","modified":1693301015683},{"_id":"themes/butterfly/layout/page.pug","hash":"baf469784aef227e4cc840550888554588e87a13","modified":1693301015694},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1693301015694},{"_id":"themes/butterfly/layout/post.pug","hash":"fc9f45252d78fcd15e4a82bfd144401cba5b169a","modified":1693301015694},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1693301015694},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1693301015683},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1693301015694},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1693301015683},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"5351e0bc09e6b5b3f6d30f333a2520626a28ca3a","modified":1693301015694},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1693301015683},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1693301015695},{"_id":"themes/butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1693301015694},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"932df912976261929f809b7dbd4eb473e7787345","modified":1693301015695},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"8d25f47434deae870bbffd07efe528a40363ab4d","modified":1693301015695},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1693301015695},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"9819f0996234fbd80d6c50a9e526c56ebf22588d","modified":1693301015695},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"9ea86bd7a3c3fca3324f70b1cd4d9e42f9efb08d","modified":1693301015695},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"4238e06ff448ff2ee717cd4c874f37f04d35da06","modified":1693301015695},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"4677be4175da6800c0b3b8c1614e593f73df8831","modified":1693301015695},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"91d954f6e9fe6e571eb8ec9f8996294b2dc3688e","modified":1693301015696},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1693301015695},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"ce5d5a3d07b0d76ac5e96e5f9e5783f4b601b6be","modified":1693301015695},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"950b3dbac0b21717458a8d1769cbfc454d0eff54","modified":1693301015696},{"_id":"themes/butterfly/source/.DS_Store","hash":"2ff68457468623d62e1bfed5ae9879e1611800b6","modified":1697703837344},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"ab62919fa567b95fbe14889517abda649991b1ee","modified":1693301015696},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"531808a290b8bdd66bac2faab211ada8e9646a37","modified":1693301015696},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1693301015696},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1693301015696},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"396c3ab1bcf1c7693ad7e506eadd13016c6769b6","modified":1693301015696},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"d51812b43924f1bbf413c67499510dd125022005","modified":1693301015696},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"ea679dfe12d0e2290113b4a9d00663ce7a5ee5ad","modified":1693301015696},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7dfe7189ffeaebb6db13842237f8e124649bea3d","modified":1693301015683},{"_id":"themes/butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1693301015701},{"_id":"themes/butterfly/source/css/var.styl","hash":"30abbb8eed880d51f61f336064d93abd709e0115","modified":1693301015701},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"300eb779588bf35a1b687d9f829d866074b707e3","modified":1693301015696},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1693301015696},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"fc468a93a64c7a3e408fbac921c9f5a5a8f32027","modified":1693301015682},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1693301015701},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1693301015701},{"_id":"themes/butterfly/source/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":1693301015702},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1693301015702},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1693301015702},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"aca0ec7ef69b21d1f242c62fed389468a0f0e1a2","modified":1693301015684},{"_id":"themes/butterfly/source/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1693301015703},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"dd9fde431add984330e3178e06a8d74705e7340e","modified":1693301015684},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"7fa9ae4b70b87fc97e992dde5944681f92b59bea","modified":1693301015686},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"4c85de4dea4dca4e5088097a79bd6d7009cbf8ef","modified":1693301015687},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1693301015684},{"_id":"themes/butterfly/source/img/wechat.JPG","hash":"6f338f11da8b9f568bde4a9255b4eefe29343c22","modified":1693472433708},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"d15124c488273ea0801a042888feadc9261d0b2f","modified":1693301015687},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"e0de61a059b5e6c7b8ebc7149b4650bdcd69af5e","modified":1693301015697},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"57a19eb0c418d92a88b143f56ccb8cd60e6d7ad0","modified":1693301015697},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"bcd384c8b2aa0390c9eb69ac1abbfd1240ce1da4","modified":1693301015697},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"b8e05ea08ef5548c37d8022e76403c77d62d5d1a","modified":1695209464605},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"51868d861c94a9f1ad7c0dbd66d2f475c5d4ea62","modified":1693301015697},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"50dbb9e6d98c71ffe16741b8c1b0c1b9771efd2b","modified":1693301015699},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"c9e98027f2dd730ce389c2047f62ebb748955fcf","modified":1693301015699},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9f0e9e039f304439007460fa0a7c8ac18e0ffd37","modified":1693301015687},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"f01ee74948cedb44e53cd3bb1ef36b7d2778ede7","modified":1693301015699},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"4e320e16d49bc18085045937681f7331a1e243ca","modified":1693301015699},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"98d755b686ee833e9da10afaa40c4ec2bd66c19a","modified":1693301015699},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"580feb7e8b0822a1be48ac380f8c5c53b1523321","modified":1693301015700},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"45f0c32bdea117540f6b14ebac6450d7142bd710","modified":1693301015700},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"81ad85acf0e0fe7f9ee23c16a700e7154574d5dd","modified":1693301015700},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"b3ea08d9460122751144a3ca835e009a460d6ad3","modified":1693301015699},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1693301015700},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"ce489ca2e249e2a3cf71584e20d84bdb022e3475","modified":1693301015700},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1693301015700},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"bf9568444dd54e39dc59b461323dcd38942f27d9","modified":1693301015700},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"85ae91c83691ea4511f4277da1194a185251cc78","modified":1693301015700},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"f071156d439556e7463ed4bc61ceee87170d5d08","modified":1693301015701},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"e4f948b0d4eb5483b2b360e56cbfe3359751b438","modified":1693301015699},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"57adf29a3e36e4ea84384e36c034eb294dffb208","modified":1693301015698},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"c481d1f689a4e6d7ee492a03751bda47a30225ce","modified":1693301015699},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"66c59e193d794cdb02cca7bd1dc4aea5a19d7e84","modified":1693301015700},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"f9a5d3f1fc5ed0ed2ee4c1eaa58ed650d11ddebd","modified":1693301015698},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"c61dccca690d486c3d9c29cf028d87b777385141","modified":1693301015698},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"83a7a70eb0532ea9c4267939fe484af915fca01e","modified":1693301015698},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1693301015698},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"fc9424d9c5def2201ec1d04dc79d0beedc1d2175","modified":1693301015698},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"fb9f78bfbb79579f1d752cb73fb6d25c8418e0fd","modified":1693301015698},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"8cd2aaa32cd68cd1908c9001444a811c3d0f9267","modified":1693301015698},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"d53de408cb27a2e704aba7f7402b7caebe0410d8","modified":1693301015698},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c5cfed620708807a48076b5ee59b0ba84e29aa80","modified":1693301015698},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"bbc884d6b2158a833b77a1bbc07248e17874b22e","modified":1693301015699},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"5556c9bf4f53a90cb9b4945cd76a8849bd67f3f3","modified":1693301015699},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1693301015701},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"649a054e73278b6724bd4dd9b94724791ec5c928","modified":1693301015700},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"631ca35a38bc4ac052e9caf47508ff1f99842fc7","modified":1693301015699},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"20a3134e1302b62bfc881f4ec43f398267111f22","modified":1693301015700},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"a86e4e9198b225b4b73a7a45f04b86cbbed0d231","modified":1693301015700},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"8aa8d799aedbfd811195b84a451bc4b6e2647c12","modified":1693301015684},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"67e1c3b48e4ca7ee0b2c76d3ca7476b9883cf105","modified":1693301015685},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"75e7a524af64fbaaaf7b05a1b1922bf6940d7afe","modified":1693301015685},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"7df90c8e432e33716517ab918b0a125bc284041b","modified":1693301015685},{"_id":"themes/butterfly/source/img/background/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1697817149228},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1693301015685},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1693301015685},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1693301015702},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1693301015702},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1693301015685},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"a03b3ddc06e7aa9fd07eea0d5f97c8d5addd2315","modified":1693301015685},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1693301015686},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"1ed873db25eec869beebb6873f04e19f0b0f4134","modified":1693301015686},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1693301015685},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"f9ce83978b217a71a2eb8761dc14b09866faa3f4","modified":1693301015687},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"12c65c174d26a41821df9bad26cdf1087ec5b0ca","modified":1693301015687},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"90554c2ca5ba946f4c02e1bc5fe2859cef1b1594","modified":1693301015686},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"9621991359e22b14049346f1cf87bdedc94edf5a","modified":1693301015687},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"c7cfade2b160380432c47eef4cd62273b6508c58","modified":1693301015688},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"ebecba46a5f4efe1c98a386df06c56e26fbd07b9","modified":1693301015687},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"0f024e36b8116118233e10118714bde304e01e12","modified":1693301015692},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"864869c43fe5b5bb6f4ac6b13dd4bfb16ea47550","modified":1693301015687},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"6528e86656906117a1af6b90e0349c2c4651d5e1","modified":1693301015690},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"8044b9c18b34b019ffe26b7383e7e80356b5e4b5","modified":1693301015693},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"31346a210f4f9912c5b29f51d8f659913492f388","modified":1693301015685},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"ffb9ea15a2b54423cd4cd441e2d061b8233e9b58","modified":1693301015692},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"cde142861edfc7aab435b8a0ebb84d9ba450fb5b","modified":1693301015692},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"f61659aa457d1a2d1baa3a13157996cfac4d6609","modified":1693301015686},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"9e8c5788602b29a527ef35fe8a20076a5fa969bd","modified":1693301015686},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"944d6e9dd50df3395f3a2c7ad9db667d50dea4ed","modified":1693301015685},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"9698f22751778dde063cbfbd01c59ca4462ccd85","modified":1693301015686},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"5de9a82032cdad1db3b868b797460921cd775fc2","modified":1693301015686},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"131f344d68b4c241d6e03849b243ee792fcd3cea","modified":1693301015686},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1693301015693},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"03c6afabbf1ac729c7fb21c7ec06da0190b0fdc7","modified":1693301015693},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1693301015693},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1693301015693},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"6ab4e301c92586505d6cddce1b3ad23b7c79010d","modified":1693301015686},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1693301015693},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"7834bf7c711e739fd33cfcd0b53d151013b3d449","modified":1693301015693},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1693301015693},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1693301015693},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"35ce167c5a275211bfc1fa3d49adfde5b404d98f","modified":1693301015694},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1693301015693},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1693301015693},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"010e3d548ababca2280c4fc4168d9a4a1ee4f536","modified":1693301015694},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"cf1fae641c927621a4df1be5ca4a853b9b526e23","modified":1693301015697},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"18804c58239d95798fa86d0597f32d7f7dd30051","modified":1693301015697},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1693301015697},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"5dc2e0bcae9a54bfb9bdcc82d02ae5a3cf1ca97d","modified":1693301015697},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1693301015697},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"ed6906b7c6aa7046bbad95dfdda9211997be7099","modified":1693301015687},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"f58f1648d2d71311bafca4833f20b605bb5f18c8","modified":1693301015688},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"5f86add36eeffbed61d11f08972a13697b4d9437","modified":1693301015688},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1693301015688},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"0344477a2cf38698318ead2681c63ac12f01586e","modified":1693301015688},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1693301015688},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1693301015688},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"56c028ba0ea8fac19f0125114d765dfc56ce2b48","modified":1693301015688},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"39427e107230a10790972349c9dd4c4f31d55eb7","modified":1693301015688},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"d02f3cc9e6183e7d05c7e90e9ae1dee5ce21f297","modified":1693301015688},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"ddce8352b371a1fb426bdb6c33f587eb37a69647","modified":1693301015689},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2fb098a7aa45010a8cd212dc0bd5308c6e7c63e3","modified":1693301015689},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1693301015689},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"618e1b7f9204049b07beb9e1363c844a78a9ace3","modified":1693301015689},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":1693301015689},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"dd61eca6e9a45f63e09bdefba89fe285a81ba096","modified":1693301015689},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"5d5d8a0a3a7690d6d01e3feb91c2a36a5cd651b1","modified":1693301015689},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"6e17b2cea503eabeb328835038812cfa95f15871","modified":1693301015689},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"9ef303da16d180619da18b146ddb9bc35f66bdbf","modified":1693301015689},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"5127bc550a2edb1ab9f45416e1964c76e8201544","modified":1693301015689},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"2fc5627eb63118c83df9422b47c801822e28df98","modified":1693301015690},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"0704efed9079c867ab5f7bee7381a6c869154c73","modified":1693301015689},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"35ae7980f658a349c5956c5699efd435b604b836","modified":1693301015690},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1693301015690},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1693301015690},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"598790433e3c9be28b0063bff08d257acd0abf75","modified":1693301015690},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"4d78f6266d0870c06c10eaf47c951bd4d9a7732e","modified":1693301015690},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"0a1b8fe95623b095eb7ede3f30ca327684d1e613","modified":1693301015690},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1693301015692},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"1c3e101445c5571ba998ce293d3984319df1b3b0","modified":1693301015692},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"a99a41334387ee9a46c6f8e8212331a29a10d159","modified":1693301015692},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"5ebd5e8d39c9f77f5b2d983f6cd6802ccaf98746","modified":1693301015692},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"00960bf483318e76ee4e1d90456f0e934959a8c5","modified":1695269671591},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1693301015692},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"2a8d02ed9303092e8816f6489a443e7388102470","modified":1693301015690},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1693301015692},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1693301015692},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"c7dd2b2ae9b23aa0a60fffd7df9e9f76ef52033e","modified":1693301015693},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1693301015691},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"dfcbd9881be569ea420eff1a6b00e4f4dbe2138e","modified":1693301015691},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"fc072ac839401174b5d3cf9acd3b694246c23a55","modified":1693301015691},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"d0ce1891b042dcc2c93cacc866e38721b94aa4c4","modified":1693301015691},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"8c0d9a45bd2d83cc6d0e7bbfe172a09ff33c0178","modified":1693301015691},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"4fe8faf77b8420fc031ae1b54f78b2ece9fcc07e","modified":1693301015691},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"0330e3063ccf0ce40e4828b8d4fbef62362e8195","modified":1693301015691},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1693301015691},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"aa6061183a32472cd1882fce445a5049108a984b","modified":1693301015691},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"44991d67abb81784c5cdb4337b2b9798fc4361e1","modified":1693301015691},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"b7b2aa5be4112065d5066c0f066f5f58721153bf","modified":1693301015692},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"ae1ccd78926cc19399d396b237d5161d7cde44a8","modified":1693301015692},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"3057a2f6f051355e35d3b205121af8735100eacf","modified":1693301015693},{"_id":"themes/butterfly/source/img/alipay.JPG","hash":"242f28ac6b31ce2fae669f9b357f88b19a1a755a","modified":1693472403927},{"_id":"source/image/云笔记系统扩容/pod-deploy.png","hash":"5d7087ce3dfa3e1c38cee56e75eef71845787de5","modified":1695193780237},{"_id":"themes/butterfly/source/js/Valine.min.js","hash":"c19fcca376470c5049873475548131c31e8a950b","modified":1695225699254},{"_id":"themes/butterfly/source/img/background/樱花2.jpg","hash":"858a926496f17529430ef9c1b56aa3a25abb97af","modified":1695213776091},{"_id":"source/image/MARL/img_24.png","hash":"db26640a9ac6de9c1e6f5a4c436f10a8598ecead","modified":1699430434980},{"_id":"themes/butterfly/source/img/assets/头像.JPG","hash":"2982b004f5f53918d2a6083056455bf3a479d60d","modified":1667716281000},{"_id":"themes/butterfly/source/img/background/樱花1.jpg","hash":"ffa38044c2b06e88c45468340c916e862b599b51","modified":1695213803321},{"_id":"source/image/k8s部署云笔记系统/可莉.png","hash":"19e482e216be26cf376cce9c2f26f95507cc8963","modified":1690225383971},{"_id":"public/search.xml","hash":"b023de77f99347342e903a1d01b4f338939f09a8","modified":1717577126198},{"_id":"public/categories/index.html","hash":"6cff0cecf55ad307f3253b99c8f2d643f5da82ca","modified":1717577126198},{"_id":"public/link/index.html","hash":"fee83b1f9543c2f252231959569282d83bd7b7d2","modified":1717577126198},{"_id":"public/about/index.html","hash":"1b4bb2640961ebacb6c3b770385197f1926a51c6","modified":1717577126198},{"_id":"public/movies/index.html","hash":"95c1b2dd851f07caf07d1369370edf1ed26ca757","modified":1717577126198},{"_id":"public/music/index.html","hash":"28749315024a9a787450d945aaab620f2d462c13","modified":1717577126198},{"_id":"public/pictures/gallery_groups/wabobo.html","hash":"510f5bc90f43064c6c3baa47ac438f2387483573","modified":1717577126198},{"_id":"public/pictures/index.html","hash":"8bbd9fc0ad7b0b18b4ff2e95d376b81ccbc8cfb9","modified":1717577126198},{"_id":"public/pictures/gallery_groups/lol-kda.html","hash":"efa30983315d1264ae69649f76f50336daab172a","modified":1717577126198},{"_id":"public/pictures/gallery_groups/genshin.html","hash":"73bca2732f811c3621a14dd0ecc134898b1b77f8","modified":1717577126198},{"_id":"public/tags/index.html","hash":"ea5aaace201fdcbb0a2ce2fc387b8153d6d397e0","modified":1717577126198},{"_id":"public/posts/17768.html","hash":"de7b0c603c952ac99227ae5ef2ebea5e31ae39ee","modified":1717577126198},{"_id":"public/posts/17767.html","hash":"1a1d26a87dd87e89a1dcd3bf75461b8530367176","modified":1717577126198},{"_id":"public/posts/17766.html","hash":"49dbf081c732455219b76013906b2c189b339907","modified":1717577126198},{"_id":"public/posts/17765.html","hash":"1156b1edee89bb0e56eda949025b8fae2dea216a","modified":1717577126198},{"_id":"public/posts/17763.html","hash":"a726c671f9fc01e7f1b57056b336b59d01550be8","modified":1717577126198},{"_id":"public/posts/17762.html","hash":"e86afaab978dea0c51d2c8632ef6b3cd8f2ee2e0","modified":1717577126198},{"_id":"public/posts/36313.html","hash":"8749afc759c80b5a6d1724d2e884f958ded377c2","modified":1717577126198},{"_id":"public/posts/56292.html","hash":"d829a3b543885b3674afd60ccc97397f2d69311e","modified":1717577126198},{"_id":"public/posts/16330.html","hash":"359fe89454afdc092a41fc96fdfb46cbf364be0a","modified":1717577126198},{"_id":"public/posts/16107.html","hash":"e701dd95938150f639cd31601f331f7e78e15d68","modified":1717577126198},{"_id":"public/archives/index.html","hash":"1870d8e83058bfdfe74fb4fa007d49fe8e74a6c3","modified":1717577126198},{"_id":"public/archives/2018/index.html","hash":"4cef0645b321cd0da1bb5e81a019f16b36b07603","modified":1717577126198},{"_id":"public/archives/2018/01/index.html","hash":"d20bd8c5088307b9e6e27093dbf1cf9247ae39aa","modified":1717577126198},{"_id":"public/archives/2023/index.html","hash":"699012da0ea494e4aa6656c611e8eeb4b241ca00","modified":1717577126198},{"_id":"public/archives/2023/09/index.html","hash":"41d9af95f43a5f1c894aaf4988dda9244c04ce0f","modified":1717577126198},{"_id":"public/archives/2023/10/index.html","hash":"0fca6f1e6b75c875e81aaf403b101d13b5ef6dfc","modified":1717577126198},{"_id":"public/archives/2023/12/index.html","hash":"b178fc78fcea71c2f466ca89f395868eed216e94","modified":1717577126198},{"_id":"public/archives/2024/index.html","hash":"99f1943d54dc25bfceb7cbafc5dfb7cc668e245d","modified":1717577126198},{"_id":"public/archives/2024/05/index.html","hash":"4f3decd0bbd48d4e7e40213729f2cc78ee7f5181","modified":1717577126198},{"_id":"public/categories/算法/index.html","hash":"ae6ddb52b2c99bb741651e14c753432c8e0960dc","modified":1717577126198},{"_id":"public/categories/hexo/index.html","hash":"40e92c90f979578ac6982b3882bb78d631f98fea","modified":1717577126198},{"_id":"public/categories/面经/index.html","hash":"ec8c562bb7cb49636719f7b2d198b157bfe2edfe","modified":1717577126198},{"_id":"public/categories/Kubernetes/index.html","hash":"aa45cfb5f9ed6db2e89079e23a3c4db836716a0c","modified":1717577126198},{"_id":"public/categories/react/index.html","hash":"3eb15cf25d3c6b997eb65e4d54478a98256f234d","modified":1717577126198},{"_id":"public/categories/强化学习/index.html","hash":"f48150f8d52028361c7a1bd056b49b1fa7fdec80","modified":1717577126198},{"_id":"public/categories/强化学习/多智能体强化学习/index.html","hash":"ec982b6d0a5284384df3fdd3cf697daaef23b764","modified":1717577126198},{"_id":"public/tags/算法/index.html","hash":"58294a487929a79d77ea8a8c432ff2215af78876","modified":1717577126198},{"_id":"public/tags/hexo/index.html","hash":"481d881117795bf0d7bf2eb28a0d5e925f74748e","modified":1717577126198},{"_id":"public/tags/教程/index.html","hash":"2dee87026e583327697c496dd8ccb1431040dc0b","modified":1717577126198},{"_id":"public/tags/Java/index.html","hash":"680590cba29b9755c37d559539c8d507a036153c","modified":1717577126198},{"_id":"public/tags/面经/index.html","hash":"9d44822f2ccb79ede38a14795655ed5176b9bd6b","modified":1717577126198},{"_id":"public/tags/前端/index.html","hash":"4724603f217aa41b4c39c4c27cbb513cd296f90e","modified":1717577126198},{"_id":"public/tags/移动端/index.html","hash":"7ae701c7984553aa2f066a9da770b68d02562370","modified":1717577126198},{"_id":"public/tags/react/index.html","hash":"aea81072bfbf628d508b5ed7046ad5c35473ce0e","modified":1717577126198},{"_id":"public/tags/react-native/index.html","hash":"4d4bef42152b97bc82c930f9cbe6799d44622edc","modified":1717577126198},{"_id":"public/tags/k8s/index.html","hash":"f6b2850c921b5619f6f158dce548fe8943ba980d","modified":1717577126198},{"_id":"public/tags/Kubernetes/index.html","hash":"5e1ee6956717e49aae414b8e68d7c2152d85f28f","modified":1717577126198},{"_id":"public/tags/强化学习/index.html","hash":"19b45b7b1745e189fa7c3a4bb6ac6b978191c59e","modified":1717577126198},{"_id":"public/tags/多智能体强化学习/index.html","hash":"faf318eff412fc78b072246a4e2095a1de50a82d","modified":1717577126198},{"_id":"public/tags/测试开发/index.html","hash":"6c8301b1c7fb8d4ae5585fa2a7f71477b33c4709","modified":1717577126198},{"_id":"public/index.html","hash":"c2ef495dd8a92a5e398309cb99ba00db0f3c4059","modified":1717577126198},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1717577126198},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1717577126198},{"_id":"public/img/wechat.JPG","hash":"6f338f11da8b9f568bde4a9255b4eefe29343c22","modified":1717577126198},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1717577126198},{"_id":"public/image/RNN-LSTM-GRU-GCN/img_1.png","hash":"9c4d7fb94cf4d88efa0f1d57c50837b1e5aa113f","modified":1717577126198},{"_id":"public/image/k8s部署云笔记系统/4.png","hash":"ad4e697fc59a97823ecea4b0b1518e1b47ac554f","modified":1717577126198},{"_id":"public/image/k8s部署云笔记系统/1.png","hash":"cbbc86c9fa5786c5d9f3a2572f2404cd2e28343c","modified":1717577126198},{"_id":"public/image/云笔记系统扩容/add-labels.png","hash":"bda66f4607328559c6c30ffdb8c72a609440b6d2","modified":1717577126198},{"_id":"public/image/云笔记系统扩容/backup.png","hash":"5f24217b2cedf48df437fd12b07a40714b3aef42","modified":1717577126198},{"_id":"public/image/云笔记系统扩容/login.png","hash":"a004fc668d822d77284e1cceeee3c06e09501eec","modified":1717577126198},{"_id":"public/image/云笔记系统扩容/pod-after-deleted.png","hash":"39cda3ef81cc34d9080163e85134bcad21d70521","modified":1717577126198},{"_id":"public/image/云笔记系统扩容/pod-after-deploy.png","hash":"ddb7e4b717be6f48c7f7090c34b5d9fec746589d","modified":1717577126198},{"_id":"public/image/云笔记系统扩容/expand.png","hash":"b7b091f13ebee50e6be59d2d1c49cb69c459a87d","modified":1717577126198},{"_id":"public/image/云笔记系统扩容/pod.png","hash":"77a844b176d7492e31868b9ba95bb9e468997de8","modified":1717577126198},{"_id":"public/image/云笔记系统扩容/pod-node.png","hash":"47f61d747d459f2e0a4728c77e01c6f14f287436","modified":1717577126198},{"_id":"public/image/云笔记系统扩容/setting.png","hash":"4ca95d8e457eba8f21ffe74743f00d479623f20f","modified":1717577126198},{"_id":"public/image/云笔记系统扩容/delete-pod.png","hash":"555dd5ad746957138bf6322fad5a9c016b1c6c8b","modified":1717577126198},{"_id":"public/image/云笔记系统扩容/vmware.png","hash":"08bd99db55ee3786a77142de854b7d046410e100","modified":1717577126198},{"_id":"public/image/云笔记系统扩容/shutdown.png","hash":"e320600cd94d80e5b89012afdc90a4a8e2668d5d","modified":1717577126198},{"_id":"public/image/强化学习/DQN.png","hash":"b6054f8acddb250924d87682e59743bfae1d4355","modified":1717577126198},{"_id":"public/image/强化学习/DDPG1.png","hash":"ec86ecd8427b549620d9421d9667205585b401f3","modified":1717577126198},{"_id":"public/image/强化学习/DQN更新的是Q值.png","hash":"1513561ff6159ff47546cdd7e625840395a7a9ee","modified":1717577126198},{"_id":"public/image/强化学习/DQN公式.png","hash":"c5853cc32e2e37efa40de4b2a428f4dd7e7fd0ee","modified":1717577126198},{"_id":"public/image/强化学习/Magic(X).png","hash":"c4b28174d7b8d1ba5cfe66c80ca2f287193cfd35","modified":1717577126198},{"_id":"public/image/强化学习/TD(0)与SARSA对比.png","hash":"ff6c716f5f1a06c11eae440995a09e310ce9b4bd","modified":1717577126198},{"_id":"public/image/强化学习/SARSA.png","hash":"ea6aaf0c6b5dc7953045fb7700800ee3fdc700db","modified":1717577126198},{"_id":"public/image/强化学习/SARSA公式.png","hash":"40ca3c4957b16bc405d1da6ba263502c7e67e33a","modified":1717577126198},{"_id":"public/image/强化学习/Qlearning公式.png","hash":"3210173c653c2537862c9dc63ec95346e4295e13","modified":1717577126198},{"_id":"public/image/强化学习/TD(0)更新公式.png","hash":"70db3a258e3932edcdaa7ee9ccf8bc5e398fff89","modified":1717577126198},{"_id":"public/image/强化学习/V值转Q值1.png","hash":"a40ef07f53519b337bf0ff6b7ae97be0267b4c90","modified":1717577126198},{"_id":"public/image/强化学习/二维曲线.png","hash":"79d6d24224cb080eebcbacf9ea3fc9150f0e1efa","modified":1717577126198},{"_id":"public/image/强化学习/为什么不估算Q.png","hash":"bdd8c9609d188eccae505e62cd91653f97f44bff","modified":1717577126198},{"_id":"public/image/强化学习/公式1.png","hash":"40830fb8aa8c518414a8990c89574e7bc776afde","modified":1717577126198},{"_id":"public/image/强化学习/公式2.png","hash":"6581547a28f03a38bb1ff7f6795b54ce4b8ceb34","modified":1717577126198},{"_id":"public/image/强化学习/复习MC.png","hash":"58bb9a31d6fe9d72e328eb968c3f3efdb89d49b2","modified":1717577126198},{"_id":"public/image/强化学习/普通DQN.png","hash":"477f4e29663b44367dbd4beb42add37a4d9a9390","modified":1717577126198},{"_id":"public/image/强化学习/正态分布.png","hash":"3b4c5269bc41c9847e25e991a4fa9cddf4cba1d5","modified":1717577126198},{"_id":"public/image/强化学习/更新公式.png","hash":"b35143195b71b232c3dab90a86407538ba47319e","modified":1717577126198},{"_id":"public/image/强化学习/用下一个动作的Q代替V.png","hash":"8223f6e6e3013863bf48ca6af031129bb47ece6c","modified":1717577126198},{"_id":"public/image/强化学习/离散动作-策略分布.png","hash":"7ea3a2855155e0ba0d4340490c30e665520ef086","modified":1717577126198},{"_id":"public/image/强化学习/策略1.png","hash":"03e05721672d45f7d1cfcecc8dc1c49330b49080","modified":1717577126198},{"_id":"public/image/强化学习/策略2.png","hash":"6338e81e51fa44716e4bb5aa7153001f7002f37b","modified":1717577126198},{"_id":"public/image/强化学习/重要性权重表格.png","hash":"c636ebf159c7d5a8abdcb5324b0fb2e9dd7cbdb6","modified":1717577126198},{"_id":"public/image/强化学习/马尔科夫链.png","hash":"d54e77948355fb074bff4974edd3d4ee30756835","modified":1717577126198},{"_id":"public/image/MARL/img_23.png","hash":"6ca8cadc7d839d30cd37a6274948a1c4d906241d","modified":1717577126198},{"_id":"public/image/MARL/img_31.png","hash":"3a056d2f64c018aad380d09337d10960278e7afe","modified":1717577126198},{"_id":"public/image/MARL/img_26.png","hash":"ffe5deb6ad0a6bc709308d4eb7b91e989540d106","modified":1717577126198},{"_id":"public/image/MARL/img_29.png","hash":"a6830f8337fb9a859d4a2c1b07a6a349dad993b8","modified":1717577126198},{"_id":"public/image/MARL/img_36.png","hash":"6f6d264d3ccd0ec188cbaaa59d717e150361de42","modified":1717577126198},{"_id":"public/image/MARL/img_38.png","hash":"ee0c90f890da5e81d41b0a26bd6c1ac2baf8a44f","modified":1717577126198},{"_id":"public/image/MARL/img_37.png","hash":"7fd6214a4f31c0c2174ea359fed9ffbd47135036","modified":1717577126198},{"_id":"public/image/MARL/img_39.png","hash":"63c5ae9cec80b06bad00c35c5e515fb235ea032b","modified":1717577126198},{"_id":"public/image/MARL/img_4.png","hash":"3a15c0caf011c5d537c2ee6c81ba034271135ae5","modified":1717577126198},{"_id":"public/image/MARL/img_44.png","hash":"e2577e0813fbf9cc4042287e4b7e3fdd8e041960","modified":1717577126198},{"_id":"public/image/MARL/img_40.png","hash":"3f96da5e3b653c15749281c96391a6d5f7e4ef67","modified":1717577126198},{"_id":"public/image/MARL/img_43.png","hash":"f1abcb06f1c25a812a7c6ed23d247fe9fa0bfb3e","modified":1717577126198},{"_id":"public/image/MARL/img_42.png","hash":"76b07804b780b73e29f99bb4c603c9adb7ab4c42","modified":1717577126198},{"_id":"public/image/MARL/img_54.png","hash":"44936f25b9fc28b501e9dec0042473a4ea443bb7","modified":1717577126198},{"_id":"public/image/MARL/img_51.png","hash":"438c730fee36179be3196cfb65ac79509f378a0c","modified":1717577126198},{"_id":"public/image/MARL/img_52.png","hash":"d1e26fa21fcf1c9d14374d298de37459511c05f8","modified":1717577126198},{"_id":"public/image/MARL/img_56.png","hash":"e9462c7dbb24de3d1387d770a1bff9ebb0d6862a","modified":1717577126198},{"_id":"public/img/alipay.JPG","hash":"242f28ac6b31ce2fae669f9b357f88b19a1a755a","modified":1717577126198},{"_id":"public/image/RNN-LSTM-GRU-GCN/img_3.png","hash":"3ccf1aae722c09b1b8ab22b5270e33b37eafcb55","modified":1717577126198},{"_id":"public/image/RNN-LSTM-GRU-GCN/img.png","hash":"b5e3b81743830a235f98a3ed98888664ac1b8c01","modified":1717577126198},{"_id":"public/image/k8s部署云笔记系统/6.png","hash":"7608498f2f5dede16990a0643e242280e193f9c1","modified":1717577126198},{"_id":"public/image/云笔记系统扩容/6.png","hash":"7608498f2f5dede16990a0643e242280e193f9c1","modified":1717577126198},{"_id":"public/image/云笔记系统扩容/xftp.png","hash":"e3cb8d796d3576397b91f6168a106dcc215b85d6","modified":1717577126198},{"_id":"public/image/强化学习/A3C1.png","hash":"3005353326c11c8aebe3a637638f7be5f43a7825","modified":1717577126198},{"_id":"public/image/强化学习/DDPG2.png","hash":"e4df30b144f63e269dde8e2bd9fd613bc2a55551","modified":1717577126198},{"_id":"public/image/强化学习/AC算法.png","hash":"a1a024144b42ea965070692c87648dbc17640a5a","modified":1717577126198},{"_id":"public/image/强化学习/Magic'(X).png","hash":"915a394ba63779fa45fb4ab337d35e9aa3656a1d","modified":1717577126198},{"_id":"public/image/强化学习/DuelDQN.png","hash":"e6a024745d81a004dbc9372754e0afcbea8500cd","modified":1717577126198},{"_id":"public/image/强化学习/DuelDQN网络架构.png","hash":"5faebac7e88f43d768347d2a44f5ea635aef5f93","modified":1717577126198},{"_id":"public/image/强化学习/Qlearning图解.png","hash":"99e1f7c3c09e8b8ff40013e5274197e84bbeccac","modified":1717577126198},{"_id":"public/image/强化学习/Qtable三维可视化.png","hash":"19e2457ff644019941c4e4889e271ae19851c8b7","modified":1717577126198},{"_id":"public/image/强化学习/TD(0)图解.png","hash":"442c7c3185254c616b7dd581d3122c5b287d0609","modified":1717577126198},{"_id":"public/image/强化学习/TD-error.png","hash":"6cd354a8357bd9b351204db8ffbc86f14fa46388","modified":1717577126198},{"_id":"public/image/强化学习/V值转V值.png","hash":"04d61bd802407d82933d4fc3d48f655f82195df6","modified":1717577126198},{"_id":"public/image/强化学习/TD3.png","hash":"f742b6d7ea08bddec59b241f4623e3a292fc8a99","modified":1717577126198},{"_id":"public/image/强化学习/fix-Q-targets.png","hash":"28054b2d0b4c65f2e515366675d183072dc0670c","modified":1717577126198},{"_id":"public/image/强化学习/例子1.png","hash":"9f00eb53650a1323eed0c41405bc446f1edc0bc0","modified":1717577126198},{"_id":"public/image/强化学习/数据加工厂.png","hash":"0f6de0db66dba3926063c5e15801273c016eefe6","modified":1717577126198},{"_id":"public/image/强化学习/回顾DQN.png","hash":"3d6ef5df0f373b7e934dce35691e99cc2274e453","modified":1717577126198},{"_id":"public/image/强化学习/扭曲的曲线.png","hash":"1e785c5e507fcb8999cddd62724b194be6dbbae0","modified":1717577126198},{"_id":"public/image/强化学习/直观感受PG2.png","hash":"dc3b790d0138431bd36ca86d9cecb4c3724948d0","modified":1717577126198},{"_id":"public/image/强化学习/由G值算V值.png","hash":"4cd7c7aa68eba7d540f8d6ad3700f913b98b14d0","modified":1717577126198},{"_id":"public/image/强化学习/用TD估计Q值.png","hash":"4ae7ab1a840d2f66a6796920a561642608012404","modified":1717577126198},{"_id":"public/image/强化学习/直观感受PG3.png","hash":"76a2980409108c0cb4330cee7d3bf27d0c7ea8b5","modified":1717577126198},{"_id":"public/image/强化学习/直观感受PG1.png","hash":"abe569e686536c668a3f038c9a57052c6bcbc9d4","modified":1717577126198},{"_id":"public/image/强化学习/策略3.png","hash":"07c8459c5961babf996f8b4c16ab17b11c7f4c43","modified":1717577126198},{"_id":"public/image/强化学习/策略P和策略B.png","hash":"2ea5ef3287f9d2a216c9d2abf8ddf49bf0ab8989","modified":1717577126198},{"_id":"public/image/强化学习/策略P和策略B更新示意图.png","hash":"61b7166aad0636090777247c4d4cff7d05177234","modified":1717577126198},{"_id":"public/image/强化学习/连续型概率分布示意图.png","hash":"b3772e1cf96f08a1e289bc51c9c44750ce3c07ce","modified":1717577126198},{"_id":"public/image/强化学习/策略4.png","hash":"e7bfcbf76f24fe190ab7ed50a0f2085b22496cd6","modified":1717577126198},{"_id":"public/image/MARL/img_1.png","hash":"6d1ebca900fd3c98a7382ea4cc52c9f9fb4bf6d6","modified":1717577126198},{"_id":"public/image/MARL/img.png","hash":"1a15c68b483bbe455c739a3e63d00f9bf517dd8f","modified":1717577126198},{"_id":"public/image/MARL/img_12.png","hash":"04e35d22666436dd7c937da31d6107769694cfe1","modified":1717577126198},{"_id":"public/image/MARL/img_10.png","hash":"19a0f333d77505aa50e3ce3a4cf8dbdef15a9a08","modified":1717577126198},{"_id":"public/image/MARL/img_11.png","hash":"99d56908d7c6e6e00ee9cdebe963f253dd55f2c3","modified":1717577126198},{"_id":"public/image/MARL/img_14.png","hash":"a4270b1a9cc1d89e4ef81eb6288306bccd423293","modified":1717577126198},{"_id":"public/image/MARL/img_21.png","hash":"159c9d40e4c3b86ce74dad3627eea0925c05d3d8","modified":1717577126198},{"_id":"public/image/MARL/img_22.png","hash":"7ae93ca4e125194633a84b6623e892d306563147","modified":1717577126198},{"_id":"public/image/MARL/img_25.png","hash":"780801543fbad5a539da734659da4267e98f6226","modified":1717577126198},{"_id":"public/image/MARL/img_27.png","hash":"7f45efb57054b5c741adf1338e074b7cb72f4682","modified":1717577126198},{"_id":"public/image/MARL/img_3.png","hash":"3cd6383d45a693af460d791b6397edadefb54dd7","modified":1717577126198},{"_id":"public/image/MARL/img_28.png","hash":"3331cbf3b0f5e02aad69ae549a2ca2992e4bc09b","modified":1717577126198},{"_id":"public/image/MARL/img_32.png","hash":"d19088279eea2d8be2c91789bed07bb8b9157cf3","modified":1717577126198},{"_id":"public/image/MARL/img_34.png","hash":"c40b199cbfa1e48eeb2f48703d97612b10cf8ddd","modified":1717577126198},{"_id":"public/image/MARL/img_35.png","hash":"9c3f707a1e976d26367cef5b697a1e1713e9d30a","modified":1717577126198},{"_id":"public/image/MARL/img_33.png","hash":"1d5a7d97483e1b7f9b15babafa9edaecd16a1ae5","modified":1717577126198},{"_id":"public/image/MARL/img_41.png","hash":"dc99ef84a23747bf1df39ffa75f65142833c50f2","modified":1717577126198},{"_id":"public/image/MARL/img_45.png","hash":"653093958a2cd8ec02eb57999be05dae36d22c78","modified":1717577126198},{"_id":"public/image/MARL/img_46.png","hash":"075ab0887e92c81a785a7fd5cc529e02d5b827a2","modified":1717577126198},{"_id":"public/image/MARL/img_47.png","hash":"97bd6ad4c936907889397163b6b82f058bfeb8a5","modified":1717577126198},{"_id":"public/image/MARL/img_48.png","hash":"4a35a0f5f5d3db09ed2ffaed576384bd8b3a5b7f","modified":1717577126198},{"_id":"public/image/MARL/img_49.png","hash":"6f42c5de881e8e0e2f9205397492403608d305ea","modified":1717577126198},{"_id":"public/image/MARL/img_50.png","hash":"d2a92cb31f82e75f76a836677ba630056c8a76de","modified":1717577126198},{"_id":"public/image/MARL/img_55.png","hash":"2ae039d4635d2584df1aa70813fe0823ba64cd9a","modified":1717577126198},{"_id":"public/image/MARL/img_53.png","hash":"e77f4991c711db44fc958f9ff5848b3d23fa2155","modified":1717577126198},{"_id":"public/image/MARL/img_6.png","hash":"34f870290763316b68e4b0654992943d463b55ad","modified":1717577126198},{"_id":"public/image/MARL/img_9.png","hash":"5c9bd19962a9def0dc103325550201d406ebf1f9","modified":1717577126198},{"_id":"public/image/MARL/img_7.png","hash":"069091e238963421f52d381826bea91e89ca7fda","modified":1717577126198},{"_id":"public/css/index.css","hash":"7ec09b47c52077cb7a30b4c07512373d5223cdb9","modified":1717577126198},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1717577126198},{"_id":"public/js/Valine.min.js","hash":"c19fcca376470c5049873475548131c31e8a950b","modified":1717577126198},{"_id":"public/js/tw_cn.js","hash":"42b106354d72a0ea1fe62587b313a5b7de3cc393","modified":1717577126198},{"_id":"public/js/main.js","hash":"0227b5bd233a3c66582e0ee820cdb353ce52ece1","modified":1717577126198},{"_id":"public/js/search/local-search.js","hash":"8509cbd954ee9e099dcfbbfdafba70893a56e9ae","modified":1717577126198},{"_id":"public/js/search/algolia.js","hash":"fd86281d4f0f99ce173e49c1a0df3507fe268d37","modified":1717577126198},{"_id":"public/js/utils.js","hash":"aaaedc207440095da1ffabcad870fc2641befb0e","modified":1717577126198},{"_id":"public/image/RNN-LSTM-GRU-GCN/img_2.png","hash":"0e93fa825353061329cc917c8f98cd30f4591370","modified":1717577126198},{"_id":"public/image/k8s部署云笔记系统/5.png","hash":"1432b61eb04256e0627913d0e3323eff178626b1","modified":1717577126198},{"_id":"public/image/k8s部署云笔记系统/2.png","hash":"eae90eb1b195c84430fe54a09819862bdd352a2f","modified":1717577126198},{"_id":"public/image/云笔记系统扩容/backup-desktop.png","hash":"e6ec39385bcd11c4db8a3599509e3fc40f0bce83","modified":1717577126198},{"_id":"public/image/强化学习/A3C.png","hash":"137d1bfc646d4aec2c83a97b339b58bc59ff81fa","modified":1717577126198},{"_id":"public/image/强化学习/G值的意义.png","hash":"68992cb8a2194c779748e9a34ffccfb4156d25df","modified":1717577126198},{"_id":"public/image/强化学习/Q=S+A表格.png","hash":"8277d01e72f923f488d82cda32befd415d203f40","modified":1717577126198},{"_id":"public/image/强化学习/Q'估算Q 1.png","hash":"fe5352cc8507ff0748c0e3bb0d90acd8055753e8","modified":1717577126198},{"_id":"public/image/强化学习/Q值的定义.png","hash":"969a8e6a7d764e5f3366de0b46fd22d34f6c90a2","modified":1717577126198},{"_id":"public/image/强化学习/Q'估计Q 2.png","hash":"d4b88893a5d0c2d81e9ca846e4129c53ef989d1b","modified":1717577126198},{"_id":"public/image/强化学习/TD(0).png","hash":"46c1b1d85bc500d3317fc98af24cc00407e4c3a2","modified":1717577126198},{"_id":"public/image/强化学习/Q值转V值1.png","hash":"e168cf4b797ea342ea2cf45a15030424f594c7bf","modified":1717577126198},{"_id":"public/image/强化学习/TD(N).png","hash":"cf4525e94a10fd8c40d5324f9a616edf0bb5e04d","modified":1717577126198},{"_id":"public/image/强化学习/V值的定义.png","hash":"9a95cb005f86b501901dbe8ecd63f4857ce45857","modified":1717577126198},{"_id":"public/image/强化学习/两种理解方式.png","hash":"8ce85b9a7824394c5ff8eb685af6be073093b9d2","modified":1717577126198},{"_id":"public/image/强化学习/学习路线.png","hash":"34e7356e916c72ca4c778d116badc860ea1b8146","modified":1717577126198},{"_id":"public/image/强化学习/坑的解释.png","hash":"dc5251c2966f88383d3eaa7c92ac1961ab29b739","modified":1717577126198},{"_id":"public/image/MARL/img_13.png","hash":"439f1936f67cafa07c0e856eb64d49720f67637b","modified":1717577126198},{"_id":"public/image/MARL/img_15.png","hash":"e8f55f26c5bed2b0e1f9926d71fb84480180790b","modified":1717577126198},{"_id":"public/image/MARL/img_2.png","hash":"ab12cb07c1c4e44b70dc35a0a925544ac2a6e115","modified":1717577126198},{"_id":"public/image/MARL/img_16.png","hash":"66909131a240f3e754bc656e4303d21815e7d100","modified":1717577126198},{"_id":"public/image/MARL/img_20.png","hash":"0a3e3919dc0fa73b206df79f1c3c600d92defc2a","modified":1717577126198},{"_id":"public/image/MARL/img_17.png","hash":"f4a452e9775d395bfa369d54c14fca91c00b7a17","modified":1717577126198},{"_id":"public/image/MARL/img_5.png","hash":"fa4cb933ca9f685f35f49d8262b4192a1955968b","modified":1717577126198},{"_id":"public/image/MARL/img_8.png","hash":"803f9cd2e5768da860f76667e589d5b77a201340","modified":1717577126198},{"_id":"public/img/background/樱花2.jpg","hash":"858a926496f17529430ef9c1b56aa3a25abb97af","modified":1717577126198},{"_id":"public/image/k8s部署云笔记系统/3.png","hash":"85cfb5ad615d808491052523c665dd38c152b148","modified":1717577126198},{"_id":"public/image/强化学习/Q值转V值.png","hash":"2aff0b6882884466d6a727e42a9df19c6117b768","modified":1717577126198},{"_id":"public/image/强化学习/V值转Q值.png","hash":"2abc3e4c268f8a277ff1b1596d1fcd2d6f328d0a","modified":1717577126198},{"_id":"public/image/强化学习/理解DDPG2.png","hash":"d96a5ac6aa63978a4bca742c5c13319cc5acdd8f","modified":1717577126198},{"_id":"public/image/强化学习/理解DDPG1.png","hash":"31f1afbdee99c095a0939941bc0cf2f815c3a2e1","modified":1717577126198},{"_id":"public/image/强化学习/马尔科夫树.png","hash":"60c324eaffab2259fbdcb415a356f29088b182bd","modified":1717577126198},{"_id":"public/image/MARL/img_18.png","hash":"98e324069ae326b697ea9fcdec3bfe9c8246ad19","modified":1717577126198},{"_id":"public/image/MARL/img_19.png","hash":"6f2d0f1b01b1e55d1132aba9841ce70c908871ab","modified":1717577126198},{"_id":"public/img/assets/头像.JPG","hash":"2982b004f5f53918d2a6083056455bf3a479d60d","modified":1717577126198},{"_id":"public/image/MARL/img_30.png","hash":"cd0054217d899963732fd6f7f7244fdf8ec27ee5","modified":1717577126198},{"_id":"public/img/background/樱花1.jpg","hash":"ffa38044c2b06e88c45468340c916e862b599b51","modified":1717577126198},{"_id":"public/image/云笔记系统扩容/pod-deploy.png","hash":"5d7087ce3dfa3e1c38cee56e75eef71845787de5","modified":1717577126198},{"_id":"public/image/MARL/img_24.png","hash":"db26640a9ac6de9c1e6f5a4c436f10a8598ecead","modified":1717577126198},{"_id":"public/image/k8s部署云笔记系统/可莉.png","hash":"19e482e216be26cf376cce9c2f26f95507cc8963","modified":1717577126198}],"Category":[{"name":"算法","_id":"clx1l2pds0004nfgnheb865a8"},{"name":"hexo","_id":"clx1l2pdu0009nfgnhcz28afw"},{"name":"面经","_id":"clx1l2pdv000onfgn3bvvewr4"},{"name":"react","_id":"clx1l2pdx000xnfgna6s9gb9u"},{"name":"Kubernetes","_id":"clx1l2pdx0014nfgnhwhy18xj"},{"name":"强化学习","_id":"clx1l2pdx001anfgn0mlef89o"},{"name":"多智能体强化学习","parent":"clx1l2pdx001anfgn0mlef89o","_id":"clx1l2pdy001jnfgn6hht5ue0"}],"Data":[{"_id":"link","data":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}],"Page":[{"title":"categories","date":"2018-01-04T16:00:00.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-01-05 00:00:00\ntype: \"categories\"\n---\n","updated":"2023-08-31T11:44:33.118Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clx1l2pdp0000nfgnhms11umo","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://s2.loli.net/2024/02/06/t5V92W3qvbceOTh.png","cover_type":"img","excerpt":"","more":""},{"title":"link","date":"2023-08-31T11:44:43.000Z","type":"link","_content":"","source":"link/index.md","raw":"---\ntitle: link\ndate: 2023-08-31 19:44:43\ntype: \"link\"\n---\n","updated":"2023-08-31T11:45:01.378Z","path":"link/index.html","comments":1,"layout":"page","_id":"clx1l2pds0002nfgn9r4u0zwh","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://s2.loli.net/2024/02/06/t5V92W3qvbceOTh.png","cover_type":"img","excerpt":"","more":""},{"title":"about","type":"about","description":"相册","top_img":null,"abbrlink":0,"date":"2023-08-31T11:46:34.000Z","updated":"2023-10-20T14:35:00.000Z","keywords":null,"comments":1,"cover":"https://s2.loli.net/2024/02/06/t5V92W3qvbceOTh.png","toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"\n> 闲来无事，搭建一个静态博客网站玩一玩。。。\n","source":"about/index.md","raw":"---\ntitle: about\ntype: \"about\"\ndescription: 相册\ntop_img:\nabbrlink: 00000\ndate: 2023-08-31 19:46:34\nupdated: 2023-10-20 22:35:00\nkeywords:\ncomments:\ncover:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n---\n\n> 闲来无事，搭建一个静态博客网站玩一玩。。。\n","path":"about/index.html","layout":"page","_id":"clx1l2pdt0006nfgn4h3gbw62","content":"<blockquote>\n<p>闲来无事，搭建一个静态博客网站玩一玩。。。</p>\n</blockquote>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<blockquote>\n<p>闲来无事，搭建一个静态博客网站玩一玩。。。</p>\n</blockquote>\n"},{"title":"movies","date":"2023-08-31T11:48:52.000Z","type":"movies","_content":"","source":"movies/index.md","raw":"---\ntitle: movies\ndate: 2023-08-31 19:48:52\ntype: \"movies\"\n---\n","updated":"2023-08-31T11:49:46.713Z","path":"movies/index.html","comments":1,"layout":"page","_id":"clx1l2pdt0007nfgngoa24ten","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://s2.loli.net/2024/02/06/t5V92W3qvbceOTh.png","cover_type":"img","excerpt":"","more":""},{"title":"music","date":"2023-08-31T11:48:40.000Z","type":"music","_content":"","source":"music/index.md","raw":"---\ntitle: music\ndate: 2023-08-31 19:48:40\ntype: \"music\"\n---\n","updated":"2023-08-31T11:49:46.718Z","path":"music/index.html","comments":1,"layout":"page","_id":"clx1l2pdu0008nfgndzfo2rbj","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://s2.loli.net/2024/02/06/t5V92W3qvbceOTh.png","cover_type":"img","excerpt":"","more":""},{"_content":"\n[//]: # (# 袜啵啵)\n\n[//]: # ()\n[//]: # (**袜啵啵**是我最喜欢的一家摄影工作室，他们的作品总是能让我感受到一种温暖。最喜欢稚予和小甜豆！！！)\n\n[//]: # ()\n[//]: # (有关的资源我有很多，物恋、誉铭、等，私信我即可，有偿。)\n\n[//]: # ({% gallery %})\n\n[//]: # ()\n[//]: # (![IMG_5152.JPG]&#40;https://s2.loli.net/2023/10/21/5AvpTcn41ukPLDU.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5031.jpg]&#40;https://s2.loli.net/2023/10/21/ijo13Vm5dX7lLxc.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5134.JPG]&#40;https://s2.loli.net/2023/10/21/a1hAdBcIJFxNKli.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5151.JPG]&#40;https://s2.loli.net/2023/10/21/lrz6to5fZLdAwFb.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5133.JPG]&#40;https://s2.loli.net/2023/10/21/RaQmzlqMrt9bPBG.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5132.JPG]&#40;https://s2.loli.net/2023/10/21/AO1RdLJmhlB7WwG.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5145.JPG]&#40;https://s2.loli.net/2023/10/21/OUWsxHFhyTVdufn.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5126.JPG]&#40;https://s2.loli.net/2023/10/21/J5oYVMza1vjlRbI.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5144.JPG]&#40;https://s2.loli.net/2023/10/21/tHjXpwbrl8a1L2M.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5124.JPG]&#40;https://s2.loli.net/2023/10/21/H9mpjRMdNBYFQSx.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5153.JPG]&#40;https://s2.loli.net/2023/10/21/4NEYUnQDgMGp6vk.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5219.JPG]&#40;https://s2.loli.net/2023/10/21/pFEuDlQ7Ay8Vrmi.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5218.JPG]&#40;https://s2.loli.net/2023/10/21/mIFGhpzaw24dx7v.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5208.JPG]&#40;https://s2.loli.net/2023/10/21/t5HwUrThulbikBE.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5209.JPG]&#40;https://s2.loli.net/2023/10/21/6rqwmKp3NgW7Dci.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5216.JPG]&#40;https://s2.loli.net/2023/10/21/a7NA6gDBSxXwKpF.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5217.JPG]&#40;https://s2.loli.net/2023/10/21/UAkpsy6Se9r18mq.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5229.JPG]&#40;https://s2.loli.net/2023/10/21/K68EUXYpDsvJZzQ.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5214.JPG]&#40;https://s2.loli.net/2023/10/21/hoVwMp7gCNXzkWP.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5212.JPG]&#40;https://s2.loli.net/2023/10/21/4o5JBygzavUqpDb.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5263.JPG]&#40;https://s2.loli.net/2023/10/21/cO3wArBgIkGfVM6.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5265.JPG]&#40;https://s2.loli.net/2023/10/21/exNUZDHMRAPJ8rI.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5249.JPG]&#40;https://s2.loli.net/2023/10/21/rtm1NWH6yKC4uYZ.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5272.JPG]&#40;https://s2.loli.net/2023/10/21/2ERusCdIavwy37L.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5241.JPG]&#40;https://s2.loli.net/2023/10/21/EAi9KQwsSfWRDHU.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5243.JPG]&#40;https://s2.loli.net/2023/10/21/nB7iNUWRwQCgvL4.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5246.JPG]&#40;https://s2.loli.net/2023/10/21/k4MzjmhYeGNiUrB.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5245.JPG]&#40;https://s2.loli.net/2023/10/21/1f4KOGzBJ8Sudsn.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5244.JPG]&#40;https://s2.loli.net/2023/10/21/ZJVAi74zM1YK9yC.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5242.JPG]&#40;https://s2.loli.net/2023/10/21/a6WtA3s5lBkVFD4.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5274.JPG]&#40;https://s2.loli.net/2023/10/21/wsTtBXN6b9Eeif7.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5281.JPG]&#40;https://s2.loli.net/2023/10/21/x8V2sCGL7eg4YPQ.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5273.JPG]&#40;https://s2.loli.net/2023/10/21/Ee6JFdcbNLBsApU.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5286.JPG]&#40;https://s2.loli.net/2023/10/21/sEyijHa32UF7Dgw.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5276.JPG]&#40;https://s2.loli.net/2023/10/21/qmKbR2VSjZErBLX.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5310.JPG]&#40;https://s2.loli.net/2023/10/21/Xn4kBZoM1HDG6W9.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5302.JPG]&#40;https://s2.loli.net/2023/10/21/9eAq4JFMpLSthcu.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5284.JPG]&#40;https://s2.loli.net/2023/10/21/QdfkFYRKrpAU6S5.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5290.JPG]&#40;https://s2.loli.net/2023/10/21/ZLgJnp5NQIYdsVq.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5303.JPG]&#40;https://s2.loli.net/2023/10/21/phSsqmxfl67wUyr.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5311.JPG]&#40;https://s2.loli.net/2023/10/21/RkrT9Mzt5Qw8LD3.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5394.JPG]&#40;https://s2.loli.net/2023/10/21/l3StIUqagrdRQDo.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5312.JPG]&#40;https://s2.loli.net/2023/10/21/RzbXYaVAdhncpG1.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5350.JPG]&#40;https://s2.loli.net/2023/10/21/FhHV4Bx1JIAicq2.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5378.JPG]&#40;https://s2.loli.net/2023/10/21/9Bf6dhmgkrTpEcN.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5406.JPG]&#40;https://s2.loli.net/2023/10/21/FnWcLjEedV3fRIh.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5351.JPG]&#40;https://s2.loli.net/2023/10/21/H3O8eioK2zL4s1w.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5354.JPG]&#40;https://s2.loli.net/2023/10/21/pF1MrHdXqBDRblz.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5404.JPG]&#40;https://s2.loli.net/2023/10/21/RtXYhUGq9n7SAya.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5391.JPG]&#40;https://s2.loli.net/2023/10/21/YD2tcOCRXI5Ti8w.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5421.JPG]&#40;https://s2.loli.net/2023/10/21/kSZEjvAP7iDhFzo.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5435.JPG]&#40;https://s2.loli.net/2023/10/21/BwH7Viabkyr1QPJ.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5426.JPG]&#40;https://s2.loli.net/2023/10/21/jcydXw7QmB6faOA.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5436.JPG]&#40;https://s2.loli.net/2023/10/21/oqDMTH8hPnEOIQK.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5469.JPG]&#40;https://s2.loli.net/2023/10/21/D4klmrJ37yFgvCZ.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5470.JPG]&#40;https://s2.loli.net/2023/10/21/qlJkzIupgt1AmW8.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5424.JPG]&#40;https://s2.loli.net/2023/10/21/ozHLuUc9mPb5Vej.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5430.JPG]&#40;https://s2.loli.net/2023/10/21/OJjqGiA7PMDdtCW.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5482.JPG]&#40;https://s2.loli.net/2023/10/21/gZJLNm8o3a5F9tl.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5756.jpeg]&#40;https://s2.loli.net/2023/10/21/7ABylJru36f4nZz.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5783.JPG]&#40;https://s2.loli.net/2023/10/21/tYDnscUrSZ8V5xB.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5782.JPG]&#40;https://s2.loli.net/2023/10/21/LDRGosFYtAakxQi.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5792.JPG]&#40;https://s2.loli.net/2023/10/21/h9TMpZ3sGxfUvFO.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5794.JPG]&#40;https://s2.loli.net/2023/10/21/qxfHtEjXvlSDy8B.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5757.jpeg]&#40;https://s2.loli.net/2023/10/21/yrwEog9dLOAh1bG.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5799.JPG]&#40;https://s2.loli.net/2023/10/21/bnAhag9HpPwWXqC.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5800.JPG]&#40;https://s2.loli.net/2023/10/21/xcmua9iPd1WVsnq.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_6046.jpg]&#40;https://s2.loli.net/2023/10/21/UVNFMdwjtmb38sC.jpg&#41;)\n\n[//]: # ()\n[//]: # ({% endgallery %})\n","source":"pictures/gallery_groups/wabobo.md","raw":"\n[//]: # (# 袜啵啵)\n\n[//]: # ()\n[//]: # (**袜啵啵**是我最喜欢的一家摄影工作室，他们的作品总是能让我感受到一种温暖。最喜欢稚予和小甜豆！！！)\n\n[//]: # ()\n[//]: # (有关的资源我有很多，物恋、誉铭、等，私信我即可，有偿。)\n\n[//]: # ({% gallery %})\n\n[//]: # ()\n[//]: # (![IMG_5152.JPG]&#40;https://s2.loli.net/2023/10/21/5AvpTcn41ukPLDU.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5031.jpg]&#40;https://s2.loli.net/2023/10/21/ijo13Vm5dX7lLxc.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5134.JPG]&#40;https://s2.loli.net/2023/10/21/a1hAdBcIJFxNKli.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5151.JPG]&#40;https://s2.loli.net/2023/10/21/lrz6to5fZLdAwFb.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5133.JPG]&#40;https://s2.loli.net/2023/10/21/RaQmzlqMrt9bPBG.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5132.JPG]&#40;https://s2.loli.net/2023/10/21/AO1RdLJmhlB7WwG.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5145.JPG]&#40;https://s2.loli.net/2023/10/21/OUWsxHFhyTVdufn.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5126.JPG]&#40;https://s2.loli.net/2023/10/21/J5oYVMza1vjlRbI.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5144.JPG]&#40;https://s2.loli.net/2023/10/21/tHjXpwbrl8a1L2M.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5124.JPG]&#40;https://s2.loli.net/2023/10/21/H9mpjRMdNBYFQSx.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5153.JPG]&#40;https://s2.loli.net/2023/10/21/4NEYUnQDgMGp6vk.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5219.JPG]&#40;https://s2.loli.net/2023/10/21/pFEuDlQ7Ay8Vrmi.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5218.JPG]&#40;https://s2.loli.net/2023/10/21/mIFGhpzaw24dx7v.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5208.JPG]&#40;https://s2.loli.net/2023/10/21/t5HwUrThulbikBE.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5209.JPG]&#40;https://s2.loli.net/2023/10/21/6rqwmKp3NgW7Dci.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5216.JPG]&#40;https://s2.loli.net/2023/10/21/a7NA6gDBSxXwKpF.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5217.JPG]&#40;https://s2.loli.net/2023/10/21/UAkpsy6Se9r18mq.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5229.JPG]&#40;https://s2.loli.net/2023/10/21/K68EUXYpDsvJZzQ.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5214.JPG]&#40;https://s2.loli.net/2023/10/21/hoVwMp7gCNXzkWP.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5212.JPG]&#40;https://s2.loli.net/2023/10/21/4o5JBygzavUqpDb.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5263.JPG]&#40;https://s2.loli.net/2023/10/21/cO3wArBgIkGfVM6.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5265.JPG]&#40;https://s2.loli.net/2023/10/21/exNUZDHMRAPJ8rI.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5249.JPG]&#40;https://s2.loli.net/2023/10/21/rtm1NWH6yKC4uYZ.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5272.JPG]&#40;https://s2.loli.net/2023/10/21/2ERusCdIavwy37L.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5241.JPG]&#40;https://s2.loli.net/2023/10/21/EAi9KQwsSfWRDHU.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5243.JPG]&#40;https://s2.loli.net/2023/10/21/nB7iNUWRwQCgvL4.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5246.JPG]&#40;https://s2.loli.net/2023/10/21/k4MzjmhYeGNiUrB.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5245.JPG]&#40;https://s2.loli.net/2023/10/21/1f4KOGzBJ8Sudsn.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5244.JPG]&#40;https://s2.loli.net/2023/10/21/ZJVAi74zM1YK9yC.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5242.JPG]&#40;https://s2.loli.net/2023/10/21/a6WtA3s5lBkVFD4.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5274.JPG]&#40;https://s2.loli.net/2023/10/21/wsTtBXN6b9Eeif7.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5281.JPG]&#40;https://s2.loli.net/2023/10/21/x8V2sCGL7eg4YPQ.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5273.JPG]&#40;https://s2.loli.net/2023/10/21/Ee6JFdcbNLBsApU.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5286.JPG]&#40;https://s2.loli.net/2023/10/21/sEyijHa32UF7Dgw.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5276.JPG]&#40;https://s2.loli.net/2023/10/21/qmKbR2VSjZErBLX.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5310.JPG]&#40;https://s2.loli.net/2023/10/21/Xn4kBZoM1HDG6W9.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5302.JPG]&#40;https://s2.loli.net/2023/10/21/9eAq4JFMpLSthcu.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5284.JPG]&#40;https://s2.loli.net/2023/10/21/QdfkFYRKrpAU6S5.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5290.JPG]&#40;https://s2.loli.net/2023/10/21/ZLgJnp5NQIYdsVq.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5303.JPG]&#40;https://s2.loli.net/2023/10/21/phSsqmxfl67wUyr.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5311.JPG]&#40;https://s2.loli.net/2023/10/21/RkrT9Mzt5Qw8LD3.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5394.JPG]&#40;https://s2.loli.net/2023/10/21/l3StIUqagrdRQDo.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5312.JPG]&#40;https://s2.loli.net/2023/10/21/RzbXYaVAdhncpG1.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5350.JPG]&#40;https://s2.loli.net/2023/10/21/FhHV4Bx1JIAicq2.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5378.JPG]&#40;https://s2.loli.net/2023/10/21/9Bf6dhmgkrTpEcN.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5406.JPG]&#40;https://s2.loli.net/2023/10/21/FnWcLjEedV3fRIh.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5351.JPG]&#40;https://s2.loli.net/2023/10/21/H3O8eioK2zL4s1w.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5354.JPG]&#40;https://s2.loli.net/2023/10/21/pF1MrHdXqBDRblz.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5404.JPG]&#40;https://s2.loli.net/2023/10/21/RtXYhUGq9n7SAya.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5391.JPG]&#40;https://s2.loli.net/2023/10/21/YD2tcOCRXI5Ti8w.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5421.JPG]&#40;https://s2.loli.net/2023/10/21/kSZEjvAP7iDhFzo.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5435.JPG]&#40;https://s2.loli.net/2023/10/21/BwH7Viabkyr1QPJ.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5426.JPG]&#40;https://s2.loli.net/2023/10/21/jcydXw7QmB6faOA.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5436.JPG]&#40;https://s2.loli.net/2023/10/21/oqDMTH8hPnEOIQK.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5469.JPG]&#40;https://s2.loli.net/2023/10/21/D4klmrJ37yFgvCZ.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5470.JPG]&#40;https://s2.loli.net/2023/10/21/qlJkzIupgt1AmW8.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5424.JPG]&#40;https://s2.loli.net/2023/10/21/ozHLuUc9mPb5Vej.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5430.JPG]&#40;https://s2.loli.net/2023/10/21/OJjqGiA7PMDdtCW.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5482.JPG]&#40;https://s2.loli.net/2023/10/21/gZJLNm8o3a5F9tl.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5756.jpeg]&#40;https://s2.loli.net/2023/10/21/7ABylJru36f4nZz.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5783.JPG]&#40;https://s2.loli.net/2023/10/21/tYDnscUrSZ8V5xB.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5782.JPG]&#40;https://s2.loli.net/2023/10/21/LDRGosFYtAakxQi.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5792.JPG]&#40;https://s2.loli.net/2023/10/21/h9TMpZ3sGxfUvFO.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5794.JPG]&#40;https://s2.loli.net/2023/10/21/qxfHtEjXvlSDy8B.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5757.jpeg]&#40;https://s2.loli.net/2023/10/21/yrwEog9dLOAh1bG.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5799.JPG]&#40;https://s2.loli.net/2023/10/21/bnAhag9HpPwWXqC.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_5800.JPG]&#40;https://s2.loli.net/2023/10/21/xcmua9iPd1WVsnq.jpg&#41;)\n\n[//]: # ()\n[//]: # (![IMG_6046.jpg]&#40;https://s2.loli.net/2023/10/21/UVNFMdwjtmb38sC.jpg&#41;)\n\n[//]: # ()\n[//]: # ({% endgallery %})\n","date":"2023-12-26T08:53:22.200Z","updated":"2023-12-26T08:53:22.200Z","path":"pictures/gallery_groups/wabobo.html","title":"","comments":1,"layout":"page","_id":"clx1l2pdu000cnfgn6o1r8cj0","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://s2.loli.net/2024/02/06/t5V92W3qvbceOTh.png","cover_type":"img","excerpt":"","more":""},{"_content":"{% gallery %}\n![pic_79.jpg](https://s2.loli.net/2024/02/06/oYPHsTbXzZt4j28.jpg)\n![pic_37.jpg](https://s2.loli.net/2024/02/06/ikbs3McEfywNp7t.jpg)\n![pic_82.jpg](https://s2.loli.net/2024/02/06/AwmqHPc7yo5VBWL.jpg)\n![pic_78.jpg](https://s2.loli.net/2024/02/06/yi2laTzqJVS6dgo.jpg)\n\n{% endgallery %}\n","source":"pictures/gallery_groups/lol-kda.md","raw":"{% gallery %}\n![pic_79.jpg](https://s2.loli.net/2024/02/06/oYPHsTbXzZt4j28.jpg)\n![pic_37.jpg](https://s2.loli.net/2024/02/06/ikbs3McEfywNp7t.jpg)\n![pic_82.jpg](https://s2.loli.net/2024/02/06/AwmqHPc7yo5VBWL.jpg)\n![pic_78.jpg](https://s2.loli.net/2024/02/06/yi2laTzqJVS6dgo.jpg)\n\n{% endgallery %}\n","date":"2024-02-06T13:22:38.126Z","updated":"2024-02-06T13:22:38.126Z","path":"pictures/gallery_groups/lol-kda.html","title":"","comments":1,"layout":"page","_id":"clx1l2pdu000dnfgn0h65dinc","content":"<div class=\"gallery\">\n    <div class=\"fj-gallery  data\" data-rowHeight=\"220\" data-limit=\"10\">\n    <span class=\"gallery-data\">[{\"url\":\"https://s2.loli.net/2024/02/06/oYPHsTbXzZt4j28.jpg\",\"alt\":\"pic_79.jpg\"},{\"url\":\"https://s2.loli.net/2024/02/06/ikbs3McEfywNp7t.jpg\",\"alt\":\"pic_37.jpg\"},{\"url\":\"https://s2.loli.net/2024/02/06/AwmqHPc7yo5VBWL.jpg\",\"alt\":\"pic_82.jpg\"},{\"url\":\"https://s2.loli.net/2024/02/06/yi2laTzqJVS6dgo.jpg\",\"alt\":\"pic_78.jpg\"}]</span>\n    </div>\n    <button class=\"gallery-load-more\"><span>Load More</span><i class=\"fa-solid fa-arrow-down\"></i></button>\n    </div>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://s2.loli.net/2024/02/06/t5V92W3qvbceOTh.png","cover_type":"img","excerpt":"","more":"<div class=\"gallery\">\n    <div class=\"fj-gallery  data\" data-rowHeight=\"220\" data-limit=\"10\">\n    <span class=\"gallery-data\">[{\"url\":\"https://s2.loli.net/2024/02/06/oYPHsTbXzZt4j28.jpg\",\"alt\":\"pic_79.jpg\"},{\"url\":\"https://s2.loli.net/2024/02/06/ikbs3McEfywNp7t.jpg\",\"alt\":\"pic_37.jpg\"},{\"url\":\"https://s2.loli.net/2024/02/06/AwmqHPc7yo5VBWL.jpg\",\"alt\":\"pic_82.jpg\"},{\"url\":\"https://s2.loli.net/2024/02/06/yi2laTzqJVS6dgo.jpg\",\"alt\":\"pic_78.jpg\"}]</span>\n    </div>\n    <button class=\"gallery-load-more\"><span>Load More</span><i class=\"fa-solid fa-arrow-down\"></i></button>\n    </div>\n"},{"title":"pictures","description":"相册","top_img":null,"abbrlink":0,"date":"2023-09-19T15:55:05.000Z","updated":"2023-10-20T14:35:00.000Z","keywords":null,"comments":1,"cover":"https://s2.loli.net/2024/02/06/t5V92W3qvbceOTh.png","toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"\n\n\n\n<div class=\"gallery-group-main\">\n{% galleryGroup '原神' '一些原神图片' '/pictures/gallery_groups/genshin' https://s2.loli.net/2024/02/06/l8qGkHUaoVMRWSg.jpg %}\n{% galleryGroup '英雄联盟KDA' '一些LOL的KDA壁纸' '/pictures/gallery_groups/lol-kda' https://s2.loli.net/2024/02/06/oYPHsTbXzZt4j28.jpg %}\n\n[//]: # ({% galleryGroup '袜啵啵' '挺喜欢的一家写真摄影集' '/pictures/gallery_groups/wabobo' https://s2.loli.net/2023/10/21/OUWsxHFhyTVdufn.jpg %})\n</div>\n","source":"pictures/index.md","raw":"---\ntitle: pictures\ndescription: 相册\ntop_img:\nabbrlink: 00000\ndate: 2023-09-19 23:55:05\nupdated: 2023-10-20 22:35:00\nkeywords:\ncomments:\ncover:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n---\n\n\n\n\n<div class=\"gallery-group-main\">\n{% galleryGroup '原神' '一些原神图片' '/pictures/gallery_groups/genshin' https://s2.loli.net/2024/02/06/l8qGkHUaoVMRWSg.jpg %}\n{% galleryGroup '英雄联盟KDA' '一些LOL的KDA壁纸' '/pictures/gallery_groups/lol-kda' https://s2.loli.net/2024/02/06/oYPHsTbXzZt4j28.jpg %}\n\n[//]: # ({% galleryGroup '袜啵啵' '挺喜欢的一家写真摄影集' '/pictures/gallery_groups/wabobo' https://s2.loli.net/2023/10/21/OUWsxHFhyTVdufn.jpg %})\n</div>\n","path":"pictures/index.html","layout":"page","_id":"clx1l2pdu000gnfgndrbt471e","content":"<div class=\"gallery-group-main\">\n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://s2.loli.net/2024/02/06/l8qGkHUaoVMRWSg.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">原神</div>\n  <p>一些原神图片</p>\n  <a href='/pictures/gallery_groups/genshin'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://s2.loli.net/2024/02/06/oYPHsTbXzZt4j28.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">英雄联盟KDA</div>\n  <p>一些LOL的KDA壁纸</p>\n  <a href='/pictures/gallery_groups/lol-kda'></a>\n  </figcaption>\n  </figure>\n  \n\n</div>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<div class=\"gallery-group-main\">\n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://s2.loli.net/2024/02/06/l8qGkHUaoVMRWSg.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">原神</div>\n  <p>一些原神图片</p>\n  <a href='/pictures/gallery_groups/genshin'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img no-lightbox\" src='https://s2.loli.net/2024/02/06/oYPHsTbXzZt4j28.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">英雄联盟KDA</div>\n  <p>一些LOL的KDA壁纸</p>\n  <a href='/pictures/gallery_groups/lol-kda'></a>\n  </figcaption>\n  </figure>\n  \n\n</div>\n"},{"title":"tags","date":"2018-01-04T16:00:00.000Z","type":"tags","orderby":"random","order":1,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2018-01-05 00:00:00\ntype: \"tags\"\norderby: random\norder: 1\n---\n","updated":"2023-09-13T16:03:00.990Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clx1l2pdu000hnfgn9mwlfimg","content":"","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://s2.loli.net/2024/02/06/t5V92W3qvbceOTh.png","cover_type":"img","excerpt":"","more":""},{"_content":"{% gallery %}\n![pic_11.jpg](https://s2.loli.net/2024/02/06/l8qGkHUaoVMRWSg.jpg)\n![pic_66.jpg](https://s2.loli.net/2024/02/06/hsxTQuk9FCKUWbl.png)\n![pic_59.jpg](https://s2.loli.net/2024/02/06/6z8TXSAVsheiGjM.jpg)\n{% endgallery %}\n","source":"pictures/gallery_groups/genshin.md","raw":"{% gallery %}\n![pic_11.jpg](https://s2.loli.net/2024/02/06/l8qGkHUaoVMRWSg.jpg)\n![pic_66.jpg](https://s2.loli.net/2024/02/06/hsxTQuk9FCKUWbl.png)\n![pic_59.jpg](https://s2.loli.net/2024/02/06/6z8TXSAVsheiGjM.jpg)\n{% endgallery %}\n","date":"2024-02-06T13:21:06.368Z","updated":"2024-02-06T13:21:06.368Z","path":"pictures/gallery_groups/genshin.html","title":"","comments":1,"layout":"page","_id":"clx1l2pdv000mnfgn84i4dwdk","content":"<div class=\"gallery\">\n    <div class=\"fj-gallery  data\" data-rowHeight=\"220\" data-limit=\"10\">\n    <span class=\"gallery-data\">[{\"url\":\"https://s2.loli.net/2024/02/06/l8qGkHUaoVMRWSg.jpg\",\"alt\":\"pic_11.jpg\"},{\"url\":\"https://s2.loli.net/2024/02/06/hsxTQuk9FCKUWbl.png\",\"alt\":\"pic_66.jpg\"},{\"url\":\"https://s2.loli.net/2024/02/06/6z8TXSAVsheiGjM.jpg\",\"alt\":\"pic_59.jpg\"}]</span>\n    </div>\n    <button class=\"gallery-load-more\"><span>Load More</span><i class=\"fa-solid fa-arrow-down\"></i></button>\n    </div>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover":"https://s2.loli.net/2024/02/06/t5V92W3qvbceOTh.png","cover_type":"img","excerpt":"","more":"<div class=\"gallery\">\n    <div class=\"fj-gallery  data\" data-rowHeight=\"220\" data-limit=\"10\">\n    <span class=\"gallery-data\">[{\"url\":\"https://s2.loli.net/2024/02/06/l8qGkHUaoVMRWSg.jpg\",\"alt\":\"pic_11.jpg\"},{\"url\":\"https://s2.loli.net/2024/02/06/hsxTQuk9FCKUWbl.png\",\"alt\":\"pic_66.jpg\"},{\"url\":\"https://s2.loli.net/2024/02/06/6z8TXSAVsheiGjM.jpg\",\"alt\":\"pic_59.jpg\"}]</span>\n    </div>\n    <button class=\"gallery-load-more\"><span>Load More</span><i class=\"fa-solid fa-arrow-down\"></i></button>\n    </div>\n"}],"Post":[{"title":"RNN/LSTM/GRU/GCN","keywords":["算法"],"description":"多智能体强化学习的算法和思路总结","abbrlink":17765,"date":"2023-12-21T11:51:33.000Z","updated":"2023-12-21T11:51:33.000Z","top_img":"https://s2.loli.net/2024/02/06/U5SXRYACVolptGM.png","comments":1,"cover":"https://s2.loli.net/2024/02/06/3uoiqZOIw6CPygm.png","toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"\n> 最近对强化学习算法和预测结合有些想法，阅读了下面两篇文章对之有了大致认识。\n\n> 参考：https://zhuanlan.zhihu.com/p/587276701\n> 参考：https://zhuanlan.zhihu.com/p/605750441\n\n## 循环神经网络RNN\n传统的神经网络只能单独的取处理一个个的输入，前一个输入和后一个输入是完全没有关系的。但是，某些任务需要能够更好的处理序列的信息，即前面的输入和后面的输入是有关系的。\n\n由此诞生了RNN。\n\n循环神经网络（Recurrent Neural Network, RNN）是一类以序列（sequence）数据为输入，在序列的演进方向进行递归（recursion）且所有节点（循环单元）按链式连接的递归神经网络。\n\n![img_1.png](..%2Fimage%2FRNN-LSTM-GRU-GCN%2Fimg_1.png)\n\n```\nx 输入层 向量\nU 输入层到隐藏层的 权重矩阵\ns 隐藏层 向量\nV 隐藏层到输出层的 权重矩阵\no 输出层 向量\nW 上一次隐藏层的值作为这一次输入的权重 权重矩阵\n```\n循环神经网络的隐藏层的值s不仅取决于当前这次的输入x，还取决于上一次隐藏层的值s。\n\n![img_2.png](..%2Fimage%2FRNN-LSTM-GRU-GCN%2Fimg_2.png)\n\n\n具体的抽象图：\n![img.png](..%2Fimage%2FRNN-LSTM-GRU-GCN%2Fimg.png)\n\n## 长短期记忆网络LSTM\n\n长短期记忆（Long short-term memory, LSTM）是一种特殊的RNN，主要是为了解决长序列训练过程中的梯度消失和梯度爆炸问题。简单来说，就是相比普通的RNN，LSTM能够在更长的序列中有更好的表现。\n\n![img_3.png](..%2Fimage%2FRNN-LSTM-GRU-GCN%2Fimg_3.png)\n(左：RNN，右：LSTM)\n\n\n\n","source":"_posts/RNN-LSTM-GRU-GCN.md","raw":"---\ntitle: RNN/LSTM/GRU/GCN\ntags:\n  - 算法\ncategories:\n  - 算法\nkeywords:\n  - 算法\ndescription: 多智能体强化学习的算法和思路总结\nabbrlink: 17765\ndate: 2023-12-21 19:51:33\nupdated: 2023-12-21 19:51:33\ntop_img: https://s2.loli.net/2024/02/06/U5SXRYACVolptGM.png\ncomments:\ncover: https://s2.loli.net/2024/02/06/3uoiqZOIw6CPygm.png\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n---\n\n> 最近对强化学习算法和预测结合有些想法，阅读了下面两篇文章对之有了大致认识。\n\n> 参考：https://zhuanlan.zhihu.com/p/587276701\n> 参考：https://zhuanlan.zhihu.com/p/605750441\n\n## 循环神经网络RNN\n传统的神经网络只能单独的取处理一个个的输入，前一个输入和后一个输入是完全没有关系的。但是，某些任务需要能够更好的处理序列的信息，即前面的输入和后面的输入是有关系的。\n\n由此诞生了RNN。\n\n循环神经网络（Recurrent Neural Network, RNN）是一类以序列（sequence）数据为输入，在序列的演进方向进行递归（recursion）且所有节点（循环单元）按链式连接的递归神经网络。\n\n![img_1.png](..%2Fimage%2FRNN-LSTM-GRU-GCN%2Fimg_1.png)\n\n```\nx 输入层 向量\nU 输入层到隐藏层的 权重矩阵\ns 隐藏层 向量\nV 隐藏层到输出层的 权重矩阵\no 输出层 向量\nW 上一次隐藏层的值作为这一次输入的权重 权重矩阵\n```\n循环神经网络的隐藏层的值s不仅取决于当前这次的输入x，还取决于上一次隐藏层的值s。\n\n![img_2.png](..%2Fimage%2FRNN-LSTM-GRU-GCN%2Fimg_2.png)\n\n\n具体的抽象图：\n![img.png](..%2Fimage%2FRNN-LSTM-GRU-GCN%2Fimg.png)\n\n## 长短期记忆网络LSTM\n\n长短期记忆（Long short-term memory, LSTM）是一种特殊的RNN，主要是为了解决长序列训练过程中的梯度消失和梯度爆炸问题。简单来说，就是相比普通的RNN，LSTM能够在更长的序列中有更好的表现。\n\n![img_3.png](..%2Fimage%2FRNN-LSTM-GRU-GCN%2Fimg_3.png)\n(左：RNN，右：LSTM)\n\n\n\n","slug":"RNN-LSTM-GRU-GCN","published":1,"layout":"post","photos":[],"link":"","_id":"clx1l2pdq0001nfgnaobr95o7","content":"<blockquote>\n<p>最近对强化学习算法和预测结合有些想法，阅读了下面两篇文章对之有了大致认识。</p>\n</blockquote>\n<blockquote>\n<p>参考：<a href=\"https://zhuanlan.zhihu.com/p/587276701\">https://zhuanlan.zhihu.com/p/587276701</a><br>参考：<a href=\"https://zhuanlan.zhihu.com/p/605750441\">https://zhuanlan.zhihu.com/p/605750441</a></p>\n</blockquote>\n<h2 id=\"循环神经网络RNN\"><a href=\"#循环神经网络RNN\" class=\"headerlink\" title=\"循环神经网络RNN\"></a>循环神经网络RNN</h2><p>传统的神经网络只能单独的取处理一个个的输入，前一个输入和后一个输入是完全没有关系的。但是，某些任务需要能够更好的处理序列的信息，即前面的输入和后面的输入是有关系的。</p>\n<p>由此诞生了RNN。</p>\n<p>循环神经网络（Recurrent Neural Network, RNN）是一类以序列（sequence）数据为输入，在序列的演进方向进行递归（recursion）且所有节点（循环单元）按链式连接的递归神经网络。</p>\n<p><img src=\"/../image/RNN-LSTM-GRU-GCN/img_1.png\" alt=\"img_1.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x 输入层 向量</span><br><span class=\"line\">U 输入层到隐藏层的 权重矩阵</span><br><span class=\"line\">s 隐藏层 向量</span><br><span class=\"line\">V 隐藏层到输出层的 权重矩阵</span><br><span class=\"line\">o 输出层 向量</span><br><span class=\"line\">W 上一次隐藏层的值作为这一次输入的权重 权重矩阵</span><br></pre></td></tr></table></figure>\n<p>循环神经网络的隐藏层的值s不仅取决于当前这次的输入x，还取决于上一次隐藏层的值s。</p>\n<p><img src=\"/../image/RNN-LSTM-GRU-GCN/img_2.png\" alt=\"img_2.png\"></p>\n<p>具体的抽象图：<br><img src=\"/../image/RNN-LSTM-GRU-GCN/img.png\" alt=\"img.png\"></p>\n<h2 id=\"长短期记忆网络LSTM\"><a href=\"#长短期记忆网络LSTM\" class=\"headerlink\" title=\"长短期记忆网络LSTM\"></a>长短期记忆网络LSTM</h2><p>长短期记忆（Long short-term memory, LSTM）是一种特殊的RNN，主要是为了解决长序列训练过程中的梯度消失和梯度爆炸问题。简单来说，就是相比普通的RNN，LSTM能够在更长的序列中有更好的表现。</p>\n<p><img src=\"/../image/RNN-LSTM-GRU-GCN/img_3.png\" alt=\"img_3.png\"><br>(左：RNN，右：LSTM)</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<blockquote>\n<p>最近对强化学习算法和预测结合有些想法，阅读了下面两篇文章对之有了大致认识。</p>\n</blockquote>\n<blockquote>\n<p>参考：<a href=\"https://zhuanlan.zhihu.com/p/587276701\">https://zhuanlan.zhihu.com/p/587276701</a><br>参考：<a href=\"https://zhuanlan.zhihu.com/p/605750441\">https://zhuanlan.zhihu.com/p/605750441</a></p>\n</blockquote>\n<h2 id=\"循环神经网络RNN\"><a href=\"#循环神经网络RNN\" class=\"headerlink\" title=\"循环神经网络RNN\"></a>循环神经网络RNN</h2><p>传统的神经网络只能单独的取处理一个个的输入，前一个输入和后一个输入是完全没有关系的。但是，某些任务需要能够更好的处理序列的信息，即前面的输入和后面的输入是有关系的。</p>\n<p>由此诞生了RNN。</p>\n<p>循环神经网络（Recurrent Neural Network, RNN）是一类以序列（sequence）数据为输入，在序列的演进方向进行递归（recursion）且所有节点（循环单元）按链式连接的递归神经网络。</p>\n<p><img src=\"/../image/RNN-LSTM-GRU-GCN/img_1.png\" alt=\"img_1.png\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x 输入层 向量</span><br><span class=\"line\">U 输入层到隐藏层的 权重矩阵</span><br><span class=\"line\">s 隐藏层 向量</span><br><span class=\"line\">V 隐藏层到输出层的 权重矩阵</span><br><span class=\"line\">o 输出层 向量</span><br><span class=\"line\">W 上一次隐藏层的值作为这一次输入的权重 权重矩阵</span><br></pre></td></tr></table></figure>\n<p>循环神经网络的隐藏层的值s不仅取决于当前这次的输入x，还取决于上一次隐藏层的值s。</p>\n<p><img src=\"/../image/RNN-LSTM-GRU-GCN/img_2.png\" alt=\"img_2.png\"></p>\n<p>具体的抽象图：<br><img src=\"/../image/RNN-LSTM-GRU-GCN/img.png\" alt=\"img.png\"></p>\n<h2 id=\"长短期记忆网络LSTM\"><a href=\"#长短期记忆网络LSTM\" class=\"headerlink\" title=\"长短期记忆网络LSTM\"></a>长短期记忆网络LSTM</h2><p>长短期记忆（Long short-term memory, LSTM）是一种特殊的RNN，主要是为了解决长序列训练过程中的梯度消失和梯度爆炸问题。简单来说，就是相比普通的RNN，LSTM能够在更长的序列中有更好的表现。</p>\n<p><img src=\"/../image/RNN-LSTM-GRU-GCN/img_3.png\" alt=\"img_3.png\"><br>(左：RNN，右：LSTM)</p>\n"},{"title":"Hello World","abbrlink":16107,"date":"2018-01-04T16:00:00.000Z","updated":"2023-09-13T16:10:00.000Z","keywords":null,"description":null,"top_img":null,"comments":1,"cover":"https://s2.loli.net/2024/02/06/t5V92W3qvbceOTh.png","toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ntags:\n  - hexo\n  - 教程\ncategories:\n  - hexo\nabbrlink: 16107\ndate: 2018-01-05 00:00:00\nupdated: 2023-09-14 00:10:00\nkeywords:\ndescription:\ntop_img:\ncomments:\ncover:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n","slug":"hello-world","published":1,"layout":"post","photos":[],"link":"","_id":"clx1l2pds0003nfgnebztemnd","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n"},{"title":"Java后端面经","keywords":["面经"],"description":"Java后端面经","abbrlink":17766,"date":"2024-05-27T11:58:53.000Z","updated":"2024-05-27T12:58:53.000Z","top_img":"https://s2.loli.net/2024/05/27/Rq3jowUDsv9nT71.png","comments":1,"cover":"https://s2.loli.net/2024/05/27/QygHftOujrEodTW.png","toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"\n> 准备在这篇文章中，先详细分析简历中可能会被问到的问题，然后总结一下 Java基础、网络、操作系统、数据库等内容的精简答案，最后再回顾一下每次面试的面经。\n\n## 简历相关\n\n### 自我介绍\n\n面试官您好，我叫陈温鹏，就读于南京理工大学软件工程专业，学位是学硕，这次应聘的是 **Java后端开发岗位**。\n\n我呢，研一的时候积极参加开源社区建设，先参加了Casbin社区一个线上实习，担任社区维护者，日常工作会解决社区 issue，跟踪解决用户需求，修bug以及完善相关文档；然后在研一暑假三个月时间中了一个中科院和 casbin 社区联合举办的一个开源项目，主要的工作是完善社区整个大前端系统，包括 web，移动端功能完善，以及为社区开发了一款支持通用2FA的移动端app。除此之外，我还参与过国家电网经济研究院的一个项目。 这几段项目实习经历锻炼了我文档阅读、编写的能力，并在代码规范、开发流程等技能上获得提升。\n\n然后我呢，我评价觉得自己是一个学习能力很强的人，可以比较快速的学习并适应新的环境和技术栈。 最后感谢 xx 给我这次面试机会，我也十分希望能进入 xx ，与公司共同成长进步！\n\n### 专业技能\n\n\n\n\n### Casbin明日之星实习\n\n1. 在实习期间负责处理社区中导师分配的issue。由于Casbin的核心访问控制功能已经比较完善，且有很多仓库及sdk，所以issue的提交并不单单围绕主仓库，我的职责更多的是放在完善sdk上面。具体就是使用Casdoor的RESTful API接口，然后使用其他语言如JS、Java、Python来调用接口实现登录登出、对相关用户信息、资源等进行增删改查，这就是其他语言的sdk。当然，随着主仓库的相关接口或者功能更新，sdk也要做出相应的调整。\n\n2. 有时候我也负责Casdoor中的issue或者bug修复，Casdoor 是基于 Casbin 的单点登录（SSO）和权限管理系统，用于管理用户身份验证和访问权限。它提供了用户注册、登录、角色管理、权限控制等功能，可以与 Casbin 搭配使用，实现全面的身份验证和权限管理解决方案。这个系统使用react作为前端，beego作为后端，实现相关功能。\n\n3. 另外就是负责编写演示文档了，社区中某些开发文档不够完善，需要自己测试使用某些功能后，写出教程文档。\n\n### 中科院开源之夏项目\n\n**简介**\nCasdoor单点登录系统⼤前端项⽬包括ios、flutter、uinapp、⼩程序等sdk的开发、功能的增强， 对微信等第三⽅登录的移动端⽅式的⽀持。开发⼤前端应⽤的主要⽬的是为了提⾼⽤户体验和增加应⽤的可访问 性，可以让⽤户在不同的设备和应⽤中都能够⽅便地使⽤应⽤，提⾼⽤户的满意度和使⽤率。同时，⼤前端应⽤也可以为开发者提供更多的开发选项和⼯具，提⾼开发效率和应⽤的可维护性。\n\n**项目诉求**\n1. 对微信第三方登录的移动端支持\n    - 在casdoor移动网页端，点击微信第三方登录按钮，弹出的却是扫二维码登录，这在移动端显然是不合理的，需要的是点击微信第三方登录后，跳转到微信app进行认证授权登录，用户确认后返回移动网页端。\n\n2. 对flutter、react-native、unity等sdk的开发及功能的增强\n    - 对flutter-sdk的增强如第一点\n\n3. 临时加上的开发casdoor-app诉求，对标Google Authenticator\n\n**技术细节**\n1. 在flutter-sdk中通过截取session中的url和callbackURLscheme判断其中是否有\"weixin\"字段，如果有，则进行微信第三方原生授权登录；\n\n    - 使用WKWebView替换原本的ASWebAuthenticationSession，对ios认证部分进行重写，以支持对每个跳转的链接进行监听；\n    - 使用rb脚本文件自动化配置微信SDK导入后xcode中xcodeproj文件的相关配置；\n\n    - 接入xcframework的微信SDK，使用obj-c重写原本的swift代码，以使用微信SDK；\n\n接下来根据微信SDK开发文档进行配置即可。由于配置微信SDK需要苹果开发者账号以配置universal Link，需付费几百美元，所以最终代码并未实际测试。\n\n2. 分为两部分\n    1. casdoor-unity-example\n        - 在github上开源的一个小游戏ValleyOfCubes_Unity3D (方块之谷)的基础上，演示如何使用casdoor RESTful API进行web SSO(Single Sign On) 登录；\n        - 以C#为开发语言，调用casdoor-dotnet-sdk进行web SSO 登录；\n        - 在casdoor服务端配置好应用的ClientCode和ClientSecret后，在Unity3D中向服务端发送认证请求(CilentCode等)，解析返回的token，就可以得到用户信息，也可以使用session保存token等信息。\n        - 认证过程中还使用到了unity-webview这个由格力公司一个团队开发的小组件，因为它是开源免费的。\n    2. casdoor-react-native-sdk、example\n        - 以react-native作为框架，使用casdoor RESTful API进行web SSO 登录；\n        - react-native与JS不同的点在于在JS中，使用sessionStorage保存临时的session，主要是针对web端的，是同步的；react-native中与之类似的一个组件叫AsyncStorage，虽然功能大致相同，但却是异步的，导致不能共用一个sdk，所以就着手写了一个react-native sdk。\n        - sdk采用PKCE(Proof Key for Code Exchange, 代码交换的证明密钥)这种更安全的方式获取token。PKCE是⼀种⽤于增强OAuth 2.0授权码流程安全性的协议扩展。这种协议使得在客户端不需要 clientSecret 就能获取到 token ，它依赖的是 code_challenge 和 code_verifier 。\n3. casdoor-app 采用react-native框架，在授权登录功能上使用了react-native-sdk。\n    - casdoor-app使用开源的totp-generator作为TOTP(Time-based One Time Passwords)码生成器，默认使用SHA-256(Secure Hash Algorithm-256)哈希算法，也可以支持SHA384、SHA512等其他多种哈希算法。\n    - casdoor-app支持输入密钥和扫码生成OTP，目前已完成核心功能开发。\n\n> SHA（Secure Hash Algorithm，安全哈希算法）是一系列的哈希算法，它们用于将数据转换成固定长度的唯一标识符，通常用于数据完整性验证、数字签名、密码学安全等领域。SHA 算法属于密码学中的哈希函数，而不是加密算法。\n\n**总结**\n参加开源活动对我的锻炼是非常大的，我觉得虽然每个小例子和sdk涉及相关知识都没那么难，但是他难就难在你从没接触过，要在短时间内学习，并将之应用。在短时间内学习掌握一种领域的知识，我觉得这才是我参与开源项目收获最大的经验。\n\n### Casbin Casdoor 介绍\n> Casbin是一个强大的访问控制库，用于实现权限管理和访问控制的功能。它使用基于策略（Policy-Based）的访问控制模型，支持各种访问控制模型（如 ACL、RBAC、ABAC 等），并提供了丰富的功能和灵活的配置选项，使开发者可以轻松地实现精细化的权限管理。 \n> Casbin 的主要特点包括：\n> 1. **多种访问控制模型支持**：包括基于角色的访问控制（RBAC）、基于属性的访问控制（ABAC）、访问控制列表（ACL）等，满足不同场景的权限管理需求。\n> 2. **灵活的策略管理**：通过策略文件进行权限管理，支持多种格式（如 CSV、JSON、数据库等），方便管理和配置访问策略。\n> 3. **细粒度的权限控制**：支持精细到 API 级别的权限控制，可以根据需求对用户和资源进行精确控制。\n> 4. **跨语言支持**：Casbin 提供了多种语言的实现，如 Go、Java、Node.js、Python 等，方便开发者在不同的技术栈中使用 Casbin 进行权限管理。\n\n> Casdoor 是基于 Casbin 的单点登录（SSO）和权限管理系统，用于管理用户身份验证和访问权限。它提供了用户注册、登录、角色管理、权限控制等功能，可以与 Casbin 搭配使用，实现全面的身份验证和权限管理解决方案。\n> 1. **单点登录（SSO）**：支持统一身份验证，用户只需登录一次即可访问多个应用系统。\n> 2. **用户管理**：提供用户注册、登录、密码找回等功能，支持用户角色和权限的管理。\n> 3. **权限控制**：与 Casbin 集成，实现灵活的权限控制和策略管理，可以根据用户角色和权限设置不同的访问策略。\n> 4. **开源社区**：Casdoor 是开源项目，提供了完整的文档和示例代码，同时也有活跃的社区支持，方便开发者使用和定制。\n\n### RESTful API\n> RESTful API（Representational State Transfer API）是一种基于REST架构风格的Web服务接口。REST是一种架构风格，用于设计网络应用，使其更轻量、性能更高且更易于扩展。RESTful API利用HTTP协议作为通信标准，并遵循REST架构原则。\n> REST架构原则：\n> - 无状态性：每个请求从客户端到服务器必须包含足够的信息以使服务器理解请求。服务器不存储客户端的上下文，所有状态信息由客户端维护。\n> - 统一接口： 资源：通过URL定位资源（通常是名词，如 /users 表示用户资源）。 操作：使用标准HTTP方法对资源进行操作： GET：获取资源 POST：创建资源 PUT：更新资源 DELETE：删除资源\n> - 可缓存性：服务器的响应可以被标记为可缓存或不可缓存，以提高性能。\n> - 分层系统：客户端不需要直接与服务器交互，可能会通过中间服务器（如代理、负载均衡器等）来提升系统的可扩展性和安全性。\n> - 按需代码：在某些情况下，服务器可以返回可执行代码（如JavaScript），使客户端能够执行。\n>\n> 特点：\n> - 资源导向：一切皆资源，每个资源使用唯一的URL表示。 \n> - 标准化操作：利用HTTP动词来描述对资源的操作。 \n> - 状态表示：服务器在每次请求中发送所需的状态信息，以便客户端理解和使用。 \n> - 客户端-服务器架构：客户端和服务器职责分离，提升了系统的可维护性和可扩展性。 \n> - 无状态交互：每个请求独立，不依赖于之前的请求。\n> \n> 优点 \n> - 简单易懂：遵循标准的HTTP协议和方法，便于理解和使用。 \n> - 性能高：无状态和可缓存性提高了性能。 \n> - 可扩展性：分层系统和明确的资源导向使得系统易于扩展。 \n> - 灵活性：支持多种数据格式（如JSON、XML），适应不同客户端需求。\n> \n> 缺点 \n> - 无状态：每个请求都需要携带所有信息，可能会导致开销增加。\n> - 缺乏标准化：虽然REST原则明确，但实际实现可能会有差异，导致互操作性问题。 \n> - 适用于简单操作：对于复杂事务处理，REST可能不如其他协议（如GraphQL）高效。\n> \n> RESTful API因其简单、灵活和高效，已经成为现代Web服务开发的主流选择。\n\n### 国家电网项目\n\n**简介**\n\n自己导师接的项目，江苏省国家电网智能诊断数据分析平台\n\n**项目诉求**\n\n- 对相应指标进行增删改查\n- 可以导入、导出一些excel表格\n- 对数据进行智能诊断分析\n\n**技术细节**\n\nreact、Antd、Flask、mongodb\n\n\n### 江南布衣实习\n在公司实习期间，我担任网络工程师实习生，主要负责以下工作：\n\n1. **新入职员工设备管理**：负责<u>新入职员工的电脑设备接入公司内网，包括网络配置、安装必要软件以及配备相应办公区域的打印机驱动程序。</u>通过有效的网络设备管理，确保新员工能够快速融入公司工作环境，并顺利开始工作。\n\n2. **离职员工设备回收和资料销毁**：<u>负责处理离职员工设备的回收工作，包括安全地清除设备上的敏感数据并销毁资料，保障公司数据安全和隐私保护。</u>\n\n3. **订货会期间设备组装和网络连接**：<u>在公司订货会期间，负责组装现场所需的大量电脑及相关打印设备，并确保它们在网络上正常连接，打印设备能够顺利工作。</u>通过良好的设备管理和网络连接调试，保证了订货会的顺利进行和信息传输的稳定性。\n\n4. **员工设备报修响应与问题解决**：<u>及时响应员工设备报修请求，并通过重装系统、更换硬件设备等手段迅速解决问题</u>，确保员工工作不受影响，提高公司办公效率和网络设备的稳定性。\n\n通过这些工作，我积累了丰富的网络设备管理、故障排除和应急响应的经验，对计算机硬件、网络有了更深入的理解和实践。\n\n> **公司内网**：指的是一个局域网（LAN），用于连接公司内部各种设备和资源，如电脑、打印机、服务器等，使它们可以相互通信和共享资源。公司内网通常由路由器、交换机等设备组成，通过内部网络连接。\n> 要使一台电脑接入公司内网，经过以下步骤：\n> \n> 1. **网络配置**：打开电脑的网络设置，配置IP地址、子网掩码、网关和DNS服务器等网络参数。这些参数通常由网络管理员提供或在公司内部网络设备中配置。\n> 2. **身份验证**：根据公司的网络策略，需要先在管理员处创建账号密码，然后在需要接入的电脑上输入用户名和密码进行身份验证，以获得对公司内部资源的访问权限。\n> 3. **访问内部资源**：一旦电脑成功接入公司内网，就可以通过内部网络访问共享文件夹、打印机、应用程序和其他资源。\n\n## Java\n\n### Java和C++的区别\nJava 和 C++ 都是面向对象的语言，都支持封装、继承和多态，但还是有很多不同的地方：\n- Java 不提供指针来直接访问内存，程序内存更加安全，C++ 支持指针；\n- Java 的类是单继承的，C++ 支持多继承； Java 的接口可以多继承；\n- Java 有自动内存管理垃圾回收机制(GC)，而C++ 没有垃圾回收机制，程序员需要手动释放无用内存；\n- C++ 支持方法重载和操作符重载，Java 只支持方法重载（操作符重载增加了复杂性，与Java最初的设计思想不符）。\n\n> C 是面向过程的语言，C++ 既支持面向对象也支持面向过程，算是半面向对象语言，Java 是面向对象的语言。\n\n### 移位运算符\n`<<`: 左移运算符，向左移若干位，高位丢弃，低位补零。`x << 1`,相当于 x 乘以 2(不溢出的情况下)。\n`>>`: 带符号右移，向右移若干位，高位补符号位，低位丢弃。正数高位补 0,负数高位补 1。`x >> 1`,相当于 x 除以 2。\n`>>>`: 无符号右移，忽略符号位，空位都以 0 补齐。\n\n使用 `<<`、 `>>` 和`>>>`转换成的指令码运行起来会更高效些。由于 `double`，`float` 在二进制中的表现比较特殊，因此不能来进行移位操作。移位操作符实际上支持的类型只有 `int` 和 `long`，编译器在对 `short`、`byte`、`char` 类型进行移位前，都会将其转换为`int`类型再操作。\n\n如果移位的位数超过数值所占有的位数会怎样？\n当 `int` 类型左移/右移位数大于等于 32 位操作时，会先 **求余（%）** 后再进行左移/右移操作。也就是说左移/右移 32 位相当于不进行移位操作（32%32=0），左移/右移 42 位相当于左移/右移 10 位（42%32=10）。当 `long` 类型进行左移/右移操作时，由于 `long` 对应的二进制是 64 位，因此求余操作的基数也变成了 64。也就是说：`x<<42`等同于`x<<10`，`x>>42`等同于`x>>10`，`x>>>42`等同于`x>>>10`。\n\n### 基本数据类型/包装类型 及区别\n**8种基本数据类型**\n- 6 种数字类型： \n  - 4 种整数型：`byte`、`short`、`int`、`long`\n  - 2 种浮点型：`float`、`double`\n- 1 种字符类型：`char`\n- 1 种布尔型：`boolean`\n\n> 注意：Java 里使用 `long` 类型的数据一定要在数值后面加上 `L` ，否则将作为整型解析。 \n> `char a = 'h'`，`char`: 单引号，`String a = \"hello\"`，`String`: 双引号。\n\n**8种包装类型** \n`Byte`、`Short`、`Integer`、`Long`、`Float`、`Double`、`Character`、`Boolean` 。\n\n**区别**\n- 用途：基本类型用来定义常量和局部变量，包装类型可用于泛型，而基本类型不可以。\n- 存储方式：基本数据类型的局部变量存放在 Java 虚拟机栈中的局部变量表中，基本数据类型的成员变量（未被 `static` 修饰 ）存放在 Java 虚拟机的堆中。包装类型属于对象类型，几乎所有对象实例都存在于堆中。\n- 占用空间：相比于包装类型（对象类型）， 基本数据类型占用的空间往往非常小。\n- 默认值：成员变量包装类型不赋值就是 `null` ，而基本类型有默认值且不是 `null`。\n- 比较方式：对于基本数据类型来说，`==` 比较的是值。对于包装数据类型来说，`==` 比较的是对象的内存地址。所有整型包装类对象之间值的比较，全部使用 `equals()` 方法。\n\n### 包装类的缓存机制\nJava 基本数据类型的包装类型的大部分都用到了缓存机制来提升性能。`Byte`,`Short`,`Integer`,`Long` 这 4 种包装类默认创建了数值 [-128，127] 的相应类型的缓存数据，`Character` 创建了数值在 [0,127] 范围的缓存数据，`Boolean` 直接返回 `True` or `False`。\n\n### 什么是自动拆装箱\n```java\nInteger i = 10;  //装箱\nint n = i;   //拆箱\n```\n\n- 装箱：将基本类型用它们对应的引用类型包装起来；\n- 拆箱：将包装类型转换为基本数据类型；\n\n从字节码来看，装箱调用包装类的 `valueOf()` 方法，拆箱调用 `xxxValue()` 方法。\n\n### 如何解决浮点数运算的精度丢失问题\n\n无限循环的小数存储在计算机时，只能被截断，所以就会导致小数精度发生损失的情况。`BigDecimal` 可以实现对浮点数的运算，不会造成精度丢失。大部分需要浮点数精确运算结果的业务场景（比如涉及到钱的场景）都是通过 `BigDecimal` 来做的。\n\n### 局部变量/成员变量/静态变量\n\n- 语法形式：成员变量可以被 `public`,`private`,`static` 等修饰符所修饰，而局部变量不能被访问控制修饰符及 `static` 所修饰；但是，成员变量和局部变量都能被 final 所修饰。\n- 存储方式：如果成员变量是使用 `static` 修饰的，那么这个成员变量是属于类的，如果没有使用 `static` 修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存。\n- 生存时间：成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动生成，随着方法的调用结束而消亡。\n- 默认值：成员变量如果没有被赋初始值，则会自动以类型的默认值而赋值（一种情况例外:被 `final` 修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。\n\n静态变量是被 `static` 关键字修饰的变量。它可以被类的所有实例共享，无论一个类创建了多少个对象，它们都共享同一份静态变量。也就是说，即使创建多个对象，静态变量只会被分配一次内存，这样可以节省内存。\n\n### 重载和重写\n- 重载就是同名的方法能够根据输入数据的不同，做出不同的处理。重载发生在同一个类中（或者父类和子类之间），方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。\n- 重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。\n  - 方法名、参数列表必须相同，子类方法返回值类型应比父类方法返回值类型更小或相等，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。\n  - 如果父类方法访问修饰符为 private/final/static 则子类就不能重写该方法，但是被 static 修饰的方法能够被再次声明。\n  - 构造方法无法被重写\n\n### 面向对象和面向过程区别\n两者的主要区别在于解决问题的方式不同：\n- 面向过程把解决问题的过程拆成一个个方法，通过一个个方法的执行解决问题。\n- 面向对象会先抽象出对象，然后用对象执行方法的方式解决问题。\n\n另外，面向对象开发的程序一般更易维护、易复用、易扩展。\n\n### 接口和抽象类\n共同点: 都不能被实例化\nhttps://learn.skyofit.com/archives/351\n**区别**\n- 子类使用`extends`关键字来继承抽象类，只能继承 1 个抽象类；子类使用关键字`implements`来实现接口，可以实现多个接口。\n- 抽象类可以有构造方法，接口不能有构造方法。\n- 抽象类允许有普通方法，接口中的方法默认是`public abstract`类型(JDK8后允许使用`default`、`static`定义非抽象方法)。\n- 抽象类允许有成员变量，接口中只允许有常量(默认是`public static final`类型)。\n- 抽象类中的抽象方法可以有访问修饰符(可以是`public`、`protected`、`private`)，接口中的抽象方法默认是`public`类型。\n- 抽象类可以有 `main` 方法，接口中不能有 `main` 方法。\n\n### 深拷贝/浅拷贝/引用拷贝\n- 深拷贝: 完全复制整个对象，包括这个对象所包含的内部对象。\n- 浅拷贝: 浅拷贝会在堆上创建一个新的对象（区别于引用拷贝的一点），不过，如果原对象内部的属性是引用类型的话，浅拷贝会直接复制内部对象的引用地址，也就是说拷贝对象和原对象共用同一个内部对象。\n- 引用拷贝: 引用拷贝是两个不同的引用指向同一个对象。这不就是拷贝了一份引用吗哈哈哈？\n\n### Object 类\nObject 类是一个特殊的类，是所有类的父类。主要提供了以下 11 个方法：\n```java\n//native 方法，用于返回当前运行时对象的 Class 对象，使用了 final 关键字修饰，故不允许子类重写。\npublic final native Class<?> getClass()\n\n//native 方法，用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的HashMap。\npublic native int hashCode()\n\n//用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写以用于比较字符串的值是否相等。\npublic boolean equals(Object obj)\n\n//native 方法，用于创建并返回当前对象的一份拷贝。\nprotected native Object clone() throws CloneNotSupportedException\n\n//返回类的名字实例的哈希码的 16 进制的字符串。建议 Object 所有的子类都重写这个方法。\npublic String toString()\n\n//native 方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。\npublic final native void notify()\n\n//native 方法，并且不能重写。跟 notify 一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。\npublic final native void notifyAll()\n\n//native方法，并且不能重写。暂停线程的执行。注意：sleep 方法没有释放锁，而 wait 方法释放了锁 ，timeout 是等待时间。\npublic final native void wait(long timeout) throws InterruptedException\n\n//多了 nanos 参数，这个参数表示额外时间（以纳秒为单位，范围是 0-999999）。 所以超时的时间还需要加上 nanos 纳秒。。\npublic final void wait(long timeout, int nanos) throws InterruptedException\n\n//跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念\npublic final void wait() throws InterruptedException\n\n// 实例被垃圾回收器回收的时候触发的操作\nprotected void finalize() throws Throwable { }\n```\n\n### 形参&实参\n- 形参（形式参数，Parameters）：用于定义函数/方法，接收实参，不需要有确定的值。\n- 实参（实际参数，Arguments）：用于传递给函数/方法的参数，必须有确定的值。\n\n### 值传递&引用传递\n- 值传递：方法接收的是实参值的拷贝，会创建副本。\n- 引用传递：方法接收的直接是实参所引用的对象在堆中的地址，不会创建副本，对形参的修改将影响到实参。\n\nJava 中只有值传递，C++ 中有值传递和引用传递。\n\n### ==和equals()区别\n- `==` 可以用来比较基本数据类型和引用数据类型\n  - 基本数据类型：比较的是值是否相等\n  - 引用数据类型：比较的是引用地址是否相等\n  - Java只有值传递，不管是基本数据类型还是引用数据类型，比较的都是值，只是引用类型变量存的值是对象的地址。\n- `equals()` 不能用于判断基本数据类型的变量，只能用来判断两个对象是否相等。\n  - 如果没有重写`equals()`方法， 子类调用`Object` 类中的`equals()`方法，等价于通过“==”比较这两个对象，即比较的是两个对象的引用地址。\n  - 一般重写`equals()`方法来比较两个对象中的属性是否相等；若属性相等，则返回 `true`(即认为这两个对象相等)。\n\n### hashCode()和equal()\n`hashCode()` 的作用是获取哈希码（`int` 整数），也称为散列码。哈希码的作用是确定该对象在哈希表中的索引位置。`hashCode()` 定义在 `Object` 类中，意味着 Java 中的任何类都有 `hashCode()`。注意：`Object` 的 `hashCode()` 方法是本地方法，也就是用 C 语言或 C++ 实现的。\n\n`hashCode()` 和 `equals()`都是用于比较两个对象是否相等。JDK 同时提供这两个方法，`hashCode()`方法可以大大减少`equals()`方法的调用次数，从而提高程序的性能。\n- 如果两个对象的`hashCode` 值相等，那这两个对象不一定相等（**哈希碰撞**）。\n- 如果两个对象的`hashCode` 值相等并且`equals()`方法也返回 `true`，认为这两个对象相等。\n- 如果两个对象的`hashCode` 值不相等，可以直接认为这两个对象不相等。\n\n**为什么重写 `equals()` 时必须重写 `hashCode()` 方法？**\n因为两个相等对象的 `hashCode` 值必须相等。也就是说如果 `equals` 方法判断两个对象是相等的，那这两个对象的 `hashCode` 值也要相等。如果重写 `equals()` 时没有重写 `hashCode()` 方法的话就可能会导致 `equals` 方法判断是相等的两个对象，`hashCode` 值却不相等。\n\n### String/StringBuffer/StringBuilder\n- `String` : 字符串常量，不可变，线程安全，适用于少量的字符串操作的情况。\n- `StringBuffer` : 字符串变量（线程安全），适用于多线程下大量字符串操作的情况。\n- `StringBuilder` : 字符串变量（非线程安全），适用于单线程下大量字符串操作的情况。\n\n- 每次对 `String` 类型进行改变的时候，都会生成一个新的 `String` 对象，然后将指针指向新的 `String` 对象。\n- `StringBuffer` 改变时会对本身进行操作，而不是生成新的对象并改变对象引用。\n- `StringBuilder` 相比使用 `StringBuffer` 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。\n\n** `String` 为什么不可变？**\n- `String`类内保存字符串的`char`数组被 `final` 修饰且为私有的，并且 `String` 类没有提供/暴露修改这个字符串的方法。\n- `String` 类被 `final` 修饰导致其不能被继承，进而避免了子类破坏 `String` 不可变。\n\n### 字符串拼接使用+还是StringBuilder？\nJava中“+”和“+=” 实际上是通过 `StringBuilder` 调用 `append()` 方法实现的，拼接完成之后调用 `toString()` 得到一个 String 对象。在循环内使用“+”进行字符串的拼接的话，存在比较明显的缺陷：编译器不会创建单个 `StringBuilder` 以复用，会导致创建过多的 `StringBuilder` 对象。\n\n### String.equals()/Object.equals()\n`String` 中的 `equals` 方法是被重写过的，比较的是 `String` 字符串的值是否相等。 `Object` 的 `equals` 方法是比较的对象的内存地址。\n\n### 字符串常量池\n**字符串常量池** 是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。\n\n### 异常\n异常的共同祖先是 `Throwable` 类，其有两个重要的子类：\n`Error`: 程序无法处理的错误，不建议通过 `catch` 捕获。一般由 JVM 抛出，线程终止执行。\n`Exception`: 程序本身可以处理的异常，可以通过 `catch` 来进行捕获。\n\n### Checked/Unchecked Exception\n- `Checked Exception`即受检查异常 ，在编译过程中，若受检查异常没有被 `catch` 或者 `throws` 关键字处理的话，就没办法通过编译。\n  - 除了 `RuntimeException` 及其子类以外，其他的 `Exception` 类及其子类都属于受检查异常 。常见的受检查异常有：`ClassNotFoundException`、`FileNotFoundException`、`SQLException` 等。\n- `Unchecked Exception` 即不受检查异常 ，在编译过程中 ，即使不处理也可以正常通过编译。\n  - `RuntimeException` 及其子类属于不受检查异常。常见的不受检查异常有：`NullPointerException`、`ArrayIndexOutOfBoundsException`、`IllegalArgumentException` 等。\n\n### try-catch-finally\n`try`：用于捕获异常。其后可接零个或多个 `catch` 块，如果没有 `catch` 块，则必须跟一个 `finally` 块。\n`catch`：用于处理 `try` 捕获到的异常。\n`finally`：无论是否捕获或处理异常，`finally` 块里的语句都会被执行。当在 `try` 块或 `catch` 块中遇到 `return` 语句时，`finally` 语句块将在方法返回之前被执行。\n\n> 注意：不要在 `finally` 语句块中使用 `return` ! 当 `try` 语句和 `finally` 语句中都有 `return` 语句时，`try` 语句块中的 `return` 语句会被忽略。\n\n### 泛型\n- 使用泛型参数，可以增强代码的可读性以及稳定性。\n- 泛型一般有三种使用方式:泛型类、泛型接口、泛型方法。\n\n### 反射\n反射是框架的灵魂，主要是因为它赋予了在运行时分析类以及执行类中方法的能力。通过反射可以获取任意一个类的所有属性和方法，还可以调用这些方法和属性。\n\n- 优点：可以让代码更加灵活、为各种框架提供开箱即用的功能提供了便利。\n- 缺点：在运行时有了分析操作类的能力，这同样也增加了安全问题。比如可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译时）。另外，反射的性能也要稍差点，不过，对于框架来说实际是影响不大的。\n\n### 注解\n注解使用了反射，可以看作是一种特殊的注释，主要用于修饰类、方法或者变量，提供某些信息供程序在编译或者运行时使用。\n\n注解只有被解析之后才会生效，常见的解析方法有两种：\n- 编译期直接扫描：编译器在编译代码的时候扫描对应的注解并处理，如某个方法使用 `@Override` 注解，编译器在编译的时候就会检测当前的方法是否重写了父类对应的方法。\n- 运行期通过反射处理：像框架中自带的注解(比如 `Spring` 框架的 `@Value`、`@Component`)都是通过反射来进行处理的。\n\n### 序列化/反序列化\n如果需要持久化 Java 对象比如将 Java 对象保存在文件中，或者在网络传输 Java 对象，这些场景都需要用到序列化。\n- 序列化：将数据结构或对象转换成二进制字节流的过程\n- 反序列化：将在序列化过程中所生成的二进制字节流转换成数据结构或者对象的过程\n\n序列化和反序列化常见应用场景：\n- 对象在进行网络传输（比如远程方法调用 RPC 的时候）之前需要先被序列化，接收到序列化的对象之后需要再进行反序列化；\n- 将对象存储到文件之前需要进行序列化，将对象从文件中读取出来需要进行反序列化；\n- 将对象存储到数据库（如 Redis）之前需要用到序列化，将对象从缓存数据库中读取出来需要反序列化；\n- 将对象存储到内存之前需要进行序列化，从内存中读取出来之后需要进行反序列化。\n\n### 语法糖\n语法糖（Syntactic sugar） 代指的是编程语言为了方便程序员开发程序而设计的一种特殊语法，这种语法对编程语言的功能并没有影响。实现相同的功能，基于语法糖写出来的代码往往更简单简洁且更易阅读。\n\nJava 中最常用的语法糖主要有**switch语句**、**自动拆装箱**、**for-each循环**、**try-with-resources** 语法、**lambda 表达式**等。\n\n### List/Set/Queue/Map区别\n- List: 存储的元素是有序的、可重复的。\n- Set: 存储的元素不可重复的。\n- Queue: 按特定的排队规则来确定先后顺序，存储的元素是有序的、可重复的。\n- Map: 使用键值对（key-value）存储，key 是无序的、不可重复的，value 是无序的、可重复的，每个键最多映射到一个值。\n\n### 如何选用集合?\n主要根据集合的特点来选择合适的集合。如：\n- 需要根据键值获取到元素值时就选用 `Map` 接口下的集合，需要排序时选择 `TreeMap` ,不需要排序时就选择 `HashMap` ,需要保证线程安全就选用 `ConcurrentHashMap` 。\n- 只需要存放元素值时，就选择实现 `Collection` 接口的集合，需要保证元素唯一时选择实现 `Set` 接口的集合比如 `TreeSet` 或 `HashSet` ，不需要就选择实现 `List` 接口的比如 `ArrayList` 或 `LinkedList` ，然后再根据实现这些接口的集合的特点来选用。\n\n### 为什么要使用集合？\n在实际开发中，存储的数据类型多种多样且数量不确定。相较于数组，Java 集合提供了更灵活、更有效的方法来存储多个数据对象，其优势在于集合的大小可变、支持泛型、具有内建算法等。总的来说，Java 集合提高了数据的存储和处理灵活性，可以更好地适应现代软件开发中多样化的数据需求，并支持高质量的代码编写。\n\n### ArrayList和Array区别\n`ArrayList` 内部基于动态数组实现，比 `Array`（静态数组） 更加灵活：\n- `ArrayList`可动态扩容/缩容，`Array` 创建后不能改变长度。\n- `ArrayList` 可使用泛型确保类型安全，`Array` 则不可以。\n- `ArrayList` 中只能存对象，存基本类型数据时要用对应包装类(如`Integer`)。`Array` 可直接存储基本类型数据，也可存储对象。\n- `ArrayList` 提供增删改查等 API 操作方法，如 `add()`、`remove()`等。`Array` 只是一个固定长度数组，只能按照下标访问元素，无动态添加、删除元素能力。\n- `ArrayList`创建时不需指定大小，而`Array`创建时必须指定大小。\n\n### ArrayList和LinkedList区别\n- `ArrayList` 底层基于`Object`数组实现的，`LinkedList` 是基于双向链表实现的(JDK1.6之前是循环链表，1.7改为双向链表)。\n  - `ArrayList`插入和删除元素的时间复杂度受元素位置的影响。`add()`方法默认在尾部添加元素为O(1)，在指定位置插入元素或者删除元素时间复杂度为O(n)，因为需要移动元素。\n  - `LinkedList`插入和删除元素的时间复杂度为O(1)，因为只需要改变指针指向。如果要在指定位置插入或者删除元素，时间复杂度为O(n)，需要先移动到指定位置再插入和删除。\n- 二者都是线程不安全的。\n- `ArrayList` 随机访问效率高(实现了`RandomAccess()`接口)，`LinkedList` 插入删除效率高。\n- 占用空间：`ArrayList` 主要体现在在列表的结尾会留一定的容量空间，`LinkedList` 每个元素占用空间比前者大(要存放直接后继和直接前驱以及数据)。\n\n> 项目中一般不会使用 `LinkedList`。\n\n### ArrayList和LinkedList插入/删除效率\n`ArrayList`\n- 头部插入/删除：O(n), 需要移动元素。\n- 指定位置插入/删除：O(n), 需要移动元素。\n- 尾部插入/删除：O(1), 直接在尾部添加或删除元素。尾部插入时，当容量已到极限并需扩容时，需执行一次 O(n) 的操作将原数组复制到新的更大的数组中，然后再执行 O(1) 的操作添加元素。\n`LinkedList`\n- 头部插入/删除：O(1), 只需改变指针指向。\n- 尾部插入/删除：O(1), 只需改变指针指向。\n- 指定位置插入/删除：O(n), 需要先移动到指定位置再插入和删除。\n\n### 比较HashSet/LinkedHashSet/TreeSet\n- 都是 `Set` 接口的实现类，都保证元素唯一，且都不是线程安全的。\n- 主要区别在于底层数据结构不同。\n  - `HashSet` 底层是哈希表(`HashMap`)。\n  - `LinkedHashSet` 底层是链表和哈希表，元素的插入和取出顺序满足 FIFO。\n  - `TreeSet` 底层数据结构是红黑树，元素是有序的，排序的方式有自然排序和定制排序。\n- 底层数据结构不同导致三者应用场景不同。`HashSet` 用于不需要保证元素插入和取出顺序的场景，`LinkedHashSet` 用于保证元素的插入和取出顺序满足 FIFO 的场景，`TreeSet` 用于支持对元素自定义排序规则的场景。\n\n### Queue/Deque区别\n- `Queue` 是单端队列，只能从一端插入元素，另一端删除元素，实现上遵循 先进先出(FIFO)规则。\n- `Deque` 是双端队列，在队列的两端均可以插入或删除元素，其还提供有 `push()`等方法，可用于模拟栈。\n\n### ArrayDeque/LinkedList区别\n- `ArrayDeque` 基于**可变长数组**和**双指针**来实现，而 `LinkedList` 通过链表来实现。\n- `ArrayDeque` 不能存储 `NULL` 数据，`LinkedList` 能。\n- `ArrayDeque` 插入时可能存在扩容过程, 不过均摊后的插入操作依然为 O(1)。虽然 `LinkedList` 不需要扩容，但每次插入数据时都要申请新的堆空间，均摊性能相比更慢。\n\n从性能的角度上，选用 `ArrayDeque` 来实现队列要比 `LinkedList` 更好。此外，`ArrayDeque` 也可以用于实现栈。\n\n### PriorityQueue\nPriorityQueue 中元素出队顺序是与优先级相关的，即总是优先级最高的元素先出队。\n- 利用了二叉堆的数据结构来实现的，底层使用可变长的数组来存储数据\n- 通过堆元素的上浮和下沉，实现了在 O(logn) 的时间复杂度内插入元素和删除堆顶元素。\n- 是非线程安全的，且不支持存储 `NULL` 和 `non-comparable` 的对象。\n- 默认是小顶堆，但可以接收一个 `Comparator` 作为构造参数，从而来自定义元素优先级的先后。\n\n> `PriorityQueue` 在面试中可能更多的会出现在手撕算法的时候，典型例题包括堆排序、求第 K 大的数、带权图的遍历等，所以需要会熟练使用才行。\n\n### BlockingQueue及其实现类\n`BlockingQueue`(阻塞队列)是一个接口，其支持当队列没有元素时一直阻塞，直到有元素；还支持如果队列已满，一直等到队列可以放入新元素时再放入。常用于**生产者-消费者模型**中，生产者线程向队列中添加数据，消费者线程从队列中取出数据进行处理。\n\n**实现类**\n- `ArrayBlockingQueue`：使用数组实现的有界阻塞队列。在创建时需要指定容量大小，并支持公平和非公平两种方式的锁访问机制。\n- `LinkedBlockingQueue`：使用单向链表实现的可选有界阻塞队列。在创建时可以指定容量大小，如果不指定则默认为Integer.MAX_VALUE。和ArrayBlockingQueue不同的是， 它仅支持非公平的锁访问机制。\n- `PriorityBlockingQueue`：支持优先级排序的无界阻塞队列。元素必须实现`Comparable`接口且不能插入 `null` 元素。\n- `SynchronousQueue`：同步队列，是一种不存储元素的阻塞队列。每个插入操作都必须等待对应的删除操作，反之删除操作也必须等待插入操作。通常用于线程之间的直接传递数据。\n- `DelayQueue`：延迟队列，其中的元素只有到了其指定的延迟时间，才能够从队列中出队。\n\n### ArrayBlockingQueue/LinkedBlockingQueue区别\n二者是Java并发中常用的两种阻塞队列实现，都是线程安全的。区别：\n- 底层实现：`ArrayBlockingQueue` 基于数组实现，而 `LinkedBlockingQueue` 基于链表实现。\n- 是否有界：`ArrayBlockingQueue` 是有界队列，必须在创建时指定容量大小。`LinkedBlockingQueue` 创建时可以不指定容量大小，默认是Integer.MAX_VALUE，也就是无界的。但也可以指定队列大小，从而成为有界的。\n- 锁是否分离：`ArrayBlockingQueue`中的锁是没有分离的，即生产和消费用的是同一个锁；`LinkedBlockingQueue`中的锁是分离的，即生产用的是`putLock`，消费是`takeLock`，这样可以防止生产者和消费者线程之间的锁争夺。\n- 内存占用：`ArrayBlockingQueue` 需要提前分配数组内存，而 `LinkedBlockingQueue` 则是动态分配链表节点内存。因此，`ArrayBlockingQueue` 在创建时就会占用一定的内存空间，且往往申请的内存比实际所用的内存更大，而`LinkedBlockingQueue` 则是根据元素的增加而逐渐占用内存空间。\n\n\n\n\n\n\n\n\n### 堆和栈的区别\nhttps://blog.csdn.net/qq_44944221/article/details/126692973\n- 栈：是运行时单位，代表逻辑，内含基本数据类型和堆中的对象引用，所在区域连续，没有碎片；\n- 堆：是存储单元，代表着数据，可以被多个栈共享，所在区域不连续，有碎片；\n\n区别:\n- 功能不同：栈内存用来存储局部变量和方法调用，而堆内存用存储Java中的对象；无论是成员变量、局部变量、还是类变量他们指向的对象都存储在堆内存中；\n- 共享性不同：栈是线程私有，而堆是线程共享；\n- 异常错误不同：当内存不足时；栈抛出的是`StackOverFlowError`异常，而堆抛出的是`OutOfMemoryError`；\n- 空间大小不同：堆空间大小远远大于栈的内存空间。\n\n### 进程/线程/协程\nhttps://blog.csdn.net/m0_60505735/article/details/131047046\nhttps://blog.csdn.net/weixin_49199646/article/details/109210547\n进程： 进程是程序的一次执行过程，是系统资源分配和独立运行的最小单位；\n线程： 线程是进程的一个执行单元，是任务调度和系统执行的最小单位；\n协程： 协程是一种用户态的轻量级线程，协程的调度完全由用户控制。\n**进程与线程的区别**\n- 根本区别： 进程是操作系统资源分配和独立运行的最小单位；线程是任务调度和系统执行的最小单位。\n- 地址空间区别： 每个进程都有独立的地址空间，一个进程崩溃不影响其它进程；一个进程中的多个线程共享该 进程的地址空间，一个线程的非法操作会使整个进程崩溃。\n- 上下文切换开销区别： 每个进程有独立的代码和数据空间，进程之间上下文切换开销较大；线程组共享代码和数据空间，线程之间切换的开销较小。\n\n**进程与线程的联系**\n一个进程由共享空间（包括堆、代码区、数据区、进程空间和打开的文件描述符）和一个或多个线程组成，各个线程之间共享进程的内存空间。而一个标准的线程由线程ID、程序计数器PC、寄存器和栈组成。\n\n*进程与线程的选择**\n- 线程的创建或销毁的代价比进程小，需要频繁创建和销毁时应优先选用线程；\n- 线程上下文切换的速度比进程快，需要大量计算时优先选用线程；\n- 线程在CPU上的使用效率更高，需要多核分布时优先选用线程，需要多机分布时优先选用进程\n- 线程的安全性、稳定性没有进程好，需要更稳定安全时优先使用进程。\n\n综上，线程创建和销毁的代价低、上下文切换速度快、对系统资源占用小、对CPU的使用效率高，因此一般情况下优先选择线程进行高并发编程；但线程组的所有线程共用一个进程的内存空间，安全稳定性相对较差，若其中一个线程发生崩溃，可能会使整个进程，因此对安全稳定性要求较高时，需要优先选择进程进行高并发编程。\n\n### 强引用/软引用/弱引用/虚引用\nhttps://blog.csdn.net/u013718071/article/details/134789666\nJava中的引用类型主要分为强引用、软引用、弱引用和虚引用，它们之间的区别主要体现在垃圾回收的行为上。\n- 强引用（Strong Reference）：这是使用最普遍和默认的引用类型。如果一个对象具有强引用，那么垃圾回收器就永远不会回收它。当内存空间不足，Java虚拟机宁愿抛出 `OutOfMemoryError` 错误，也不会回收这种对象。\n- 软引用（Soft Reference）：软引用是用来描述一些还有用但并非必需的对象。只有当JVM认为内存不足时，才会去剔除这些基于软引用的对象。在Java中，可以用 `SoftReference` 类来实现软引用。\n- 弱引用（Weak Reference）：弱引用则是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾回收发生为止。当垃圾回收器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在Java中，可以用 `WeakReference` 类来实现弱引用。\n- 虚引用（Phantom Reference）：虚引用主要用来跟踪对象被垃圾回收的活动。虚引用与其他几种引用的一个区别在于：虚引用必须和引用队列（ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，将这个虚引用加入到与之关联的引用队列中。\n\n以上四种引用类型，强度依次递减：强引用最强，虚引用最弱。强引用对对象的生命周期没有影响，而软引用、弱引用和虚引用可以让对象在系统内存不足时被垃圾回收器回收。软引用和弱引用可以通过Java提供的相应类来创建，而虚引用需要借助 `PhantomReference` 类来实现。这些不同类型的引用给提供了更灵活的内存控制机制，用于满足不同的需求。\n\n### 垃圾回收机制\n\n\n\n## 网络\n\n\n\n## 操作系统\n\n\n## MySQL\n\n\n\n\n## Redis\n\n\n\n## spring boot/cloud ???\n\n\n## Linux\n\n\n\n## 其他\n\n\n\n## 面经\n\n\n\n","source":"_posts/Java后端面经.md","raw":"---\ntitle: Java后端面经\ntags:\n  - Java\n  - 面经\ncategories:\n  - 面经\nkeywords:\n  - 面经\ndescription: Java后端面经\nabbrlink: 17766\ndate: 2024-05-27 19:58:53\nupdated: 2024-05-27 20:58:53\ntop_img: https://s2.loli.net/2024/05/27/Rq3jowUDsv9nT71.png\ncomments:\ncover: https://s2.loli.net/2024/05/27/QygHftOujrEodTW.png\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n---\n\n> 准备在这篇文章中，先详细分析简历中可能会被问到的问题，然后总结一下 Java基础、网络、操作系统、数据库等内容的精简答案，最后再回顾一下每次面试的面经。\n\n## 简历相关\n\n### 自我介绍\n\n面试官您好，我叫陈温鹏，就读于南京理工大学软件工程专业，学位是学硕，这次应聘的是 **Java后端开发岗位**。\n\n我呢，研一的时候积极参加开源社区建设，先参加了Casbin社区一个线上实习，担任社区维护者，日常工作会解决社区 issue，跟踪解决用户需求，修bug以及完善相关文档；然后在研一暑假三个月时间中了一个中科院和 casbin 社区联合举办的一个开源项目，主要的工作是完善社区整个大前端系统，包括 web，移动端功能完善，以及为社区开发了一款支持通用2FA的移动端app。除此之外，我还参与过国家电网经济研究院的一个项目。 这几段项目实习经历锻炼了我文档阅读、编写的能力，并在代码规范、开发流程等技能上获得提升。\n\n然后我呢，我评价觉得自己是一个学习能力很强的人，可以比较快速的学习并适应新的环境和技术栈。 最后感谢 xx 给我这次面试机会，我也十分希望能进入 xx ，与公司共同成长进步！\n\n### 专业技能\n\n\n\n\n### Casbin明日之星实习\n\n1. 在实习期间负责处理社区中导师分配的issue。由于Casbin的核心访问控制功能已经比较完善，且有很多仓库及sdk，所以issue的提交并不单单围绕主仓库，我的职责更多的是放在完善sdk上面。具体就是使用Casdoor的RESTful API接口，然后使用其他语言如JS、Java、Python来调用接口实现登录登出、对相关用户信息、资源等进行增删改查，这就是其他语言的sdk。当然，随着主仓库的相关接口或者功能更新，sdk也要做出相应的调整。\n\n2. 有时候我也负责Casdoor中的issue或者bug修复，Casdoor 是基于 Casbin 的单点登录（SSO）和权限管理系统，用于管理用户身份验证和访问权限。它提供了用户注册、登录、角色管理、权限控制等功能，可以与 Casbin 搭配使用，实现全面的身份验证和权限管理解决方案。这个系统使用react作为前端，beego作为后端，实现相关功能。\n\n3. 另外就是负责编写演示文档了，社区中某些开发文档不够完善，需要自己测试使用某些功能后，写出教程文档。\n\n### 中科院开源之夏项目\n\n**简介**\nCasdoor单点登录系统⼤前端项⽬包括ios、flutter、uinapp、⼩程序等sdk的开发、功能的增强， 对微信等第三⽅登录的移动端⽅式的⽀持。开发⼤前端应⽤的主要⽬的是为了提⾼⽤户体验和增加应⽤的可访问 性，可以让⽤户在不同的设备和应⽤中都能够⽅便地使⽤应⽤，提⾼⽤户的满意度和使⽤率。同时，⼤前端应⽤也可以为开发者提供更多的开发选项和⼯具，提⾼开发效率和应⽤的可维护性。\n\n**项目诉求**\n1. 对微信第三方登录的移动端支持\n    - 在casdoor移动网页端，点击微信第三方登录按钮，弹出的却是扫二维码登录，这在移动端显然是不合理的，需要的是点击微信第三方登录后，跳转到微信app进行认证授权登录，用户确认后返回移动网页端。\n\n2. 对flutter、react-native、unity等sdk的开发及功能的增强\n    - 对flutter-sdk的增强如第一点\n\n3. 临时加上的开发casdoor-app诉求，对标Google Authenticator\n\n**技术细节**\n1. 在flutter-sdk中通过截取session中的url和callbackURLscheme判断其中是否有\"weixin\"字段，如果有，则进行微信第三方原生授权登录；\n\n    - 使用WKWebView替换原本的ASWebAuthenticationSession，对ios认证部分进行重写，以支持对每个跳转的链接进行监听；\n    - 使用rb脚本文件自动化配置微信SDK导入后xcode中xcodeproj文件的相关配置；\n\n    - 接入xcframework的微信SDK，使用obj-c重写原本的swift代码，以使用微信SDK；\n\n接下来根据微信SDK开发文档进行配置即可。由于配置微信SDK需要苹果开发者账号以配置universal Link，需付费几百美元，所以最终代码并未实际测试。\n\n2. 分为两部分\n    1. casdoor-unity-example\n        - 在github上开源的一个小游戏ValleyOfCubes_Unity3D (方块之谷)的基础上，演示如何使用casdoor RESTful API进行web SSO(Single Sign On) 登录；\n        - 以C#为开发语言，调用casdoor-dotnet-sdk进行web SSO 登录；\n        - 在casdoor服务端配置好应用的ClientCode和ClientSecret后，在Unity3D中向服务端发送认证请求(CilentCode等)，解析返回的token，就可以得到用户信息，也可以使用session保存token等信息。\n        - 认证过程中还使用到了unity-webview这个由格力公司一个团队开发的小组件，因为它是开源免费的。\n    2. casdoor-react-native-sdk、example\n        - 以react-native作为框架，使用casdoor RESTful API进行web SSO 登录；\n        - react-native与JS不同的点在于在JS中，使用sessionStorage保存临时的session，主要是针对web端的，是同步的；react-native中与之类似的一个组件叫AsyncStorage，虽然功能大致相同，但却是异步的，导致不能共用一个sdk，所以就着手写了一个react-native sdk。\n        - sdk采用PKCE(Proof Key for Code Exchange, 代码交换的证明密钥)这种更安全的方式获取token。PKCE是⼀种⽤于增强OAuth 2.0授权码流程安全性的协议扩展。这种协议使得在客户端不需要 clientSecret 就能获取到 token ，它依赖的是 code_challenge 和 code_verifier 。\n3. casdoor-app 采用react-native框架，在授权登录功能上使用了react-native-sdk。\n    - casdoor-app使用开源的totp-generator作为TOTP(Time-based One Time Passwords)码生成器，默认使用SHA-256(Secure Hash Algorithm-256)哈希算法，也可以支持SHA384、SHA512等其他多种哈希算法。\n    - casdoor-app支持输入密钥和扫码生成OTP，目前已完成核心功能开发。\n\n> SHA（Secure Hash Algorithm，安全哈希算法）是一系列的哈希算法，它们用于将数据转换成固定长度的唯一标识符，通常用于数据完整性验证、数字签名、密码学安全等领域。SHA 算法属于密码学中的哈希函数，而不是加密算法。\n\n**总结**\n参加开源活动对我的锻炼是非常大的，我觉得虽然每个小例子和sdk涉及相关知识都没那么难，但是他难就难在你从没接触过，要在短时间内学习，并将之应用。在短时间内学习掌握一种领域的知识，我觉得这才是我参与开源项目收获最大的经验。\n\n### Casbin Casdoor 介绍\n> Casbin是一个强大的访问控制库，用于实现权限管理和访问控制的功能。它使用基于策略（Policy-Based）的访问控制模型，支持各种访问控制模型（如 ACL、RBAC、ABAC 等），并提供了丰富的功能和灵活的配置选项，使开发者可以轻松地实现精细化的权限管理。 \n> Casbin 的主要特点包括：\n> 1. **多种访问控制模型支持**：包括基于角色的访问控制（RBAC）、基于属性的访问控制（ABAC）、访问控制列表（ACL）等，满足不同场景的权限管理需求。\n> 2. **灵活的策略管理**：通过策略文件进行权限管理，支持多种格式（如 CSV、JSON、数据库等），方便管理和配置访问策略。\n> 3. **细粒度的权限控制**：支持精细到 API 级别的权限控制，可以根据需求对用户和资源进行精确控制。\n> 4. **跨语言支持**：Casbin 提供了多种语言的实现，如 Go、Java、Node.js、Python 等，方便开发者在不同的技术栈中使用 Casbin 进行权限管理。\n\n> Casdoor 是基于 Casbin 的单点登录（SSO）和权限管理系统，用于管理用户身份验证和访问权限。它提供了用户注册、登录、角色管理、权限控制等功能，可以与 Casbin 搭配使用，实现全面的身份验证和权限管理解决方案。\n> 1. **单点登录（SSO）**：支持统一身份验证，用户只需登录一次即可访问多个应用系统。\n> 2. **用户管理**：提供用户注册、登录、密码找回等功能，支持用户角色和权限的管理。\n> 3. **权限控制**：与 Casbin 集成，实现灵活的权限控制和策略管理，可以根据用户角色和权限设置不同的访问策略。\n> 4. **开源社区**：Casdoor 是开源项目，提供了完整的文档和示例代码，同时也有活跃的社区支持，方便开发者使用和定制。\n\n### RESTful API\n> RESTful API（Representational State Transfer API）是一种基于REST架构风格的Web服务接口。REST是一种架构风格，用于设计网络应用，使其更轻量、性能更高且更易于扩展。RESTful API利用HTTP协议作为通信标准，并遵循REST架构原则。\n> REST架构原则：\n> - 无状态性：每个请求从客户端到服务器必须包含足够的信息以使服务器理解请求。服务器不存储客户端的上下文，所有状态信息由客户端维护。\n> - 统一接口： 资源：通过URL定位资源（通常是名词，如 /users 表示用户资源）。 操作：使用标准HTTP方法对资源进行操作： GET：获取资源 POST：创建资源 PUT：更新资源 DELETE：删除资源\n> - 可缓存性：服务器的响应可以被标记为可缓存或不可缓存，以提高性能。\n> - 分层系统：客户端不需要直接与服务器交互，可能会通过中间服务器（如代理、负载均衡器等）来提升系统的可扩展性和安全性。\n> - 按需代码：在某些情况下，服务器可以返回可执行代码（如JavaScript），使客户端能够执行。\n>\n> 特点：\n> - 资源导向：一切皆资源，每个资源使用唯一的URL表示。 \n> - 标准化操作：利用HTTP动词来描述对资源的操作。 \n> - 状态表示：服务器在每次请求中发送所需的状态信息，以便客户端理解和使用。 \n> - 客户端-服务器架构：客户端和服务器职责分离，提升了系统的可维护性和可扩展性。 \n> - 无状态交互：每个请求独立，不依赖于之前的请求。\n> \n> 优点 \n> - 简单易懂：遵循标准的HTTP协议和方法，便于理解和使用。 \n> - 性能高：无状态和可缓存性提高了性能。 \n> - 可扩展性：分层系统和明确的资源导向使得系统易于扩展。 \n> - 灵活性：支持多种数据格式（如JSON、XML），适应不同客户端需求。\n> \n> 缺点 \n> - 无状态：每个请求都需要携带所有信息，可能会导致开销增加。\n> - 缺乏标准化：虽然REST原则明确，但实际实现可能会有差异，导致互操作性问题。 \n> - 适用于简单操作：对于复杂事务处理，REST可能不如其他协议（如GraphQL）高效。\n> \n> RESTful API因其简单、灵活和高效，已经成为现代Web服务开发的主流选择。\n\n### 国家电网项目\n\n**简介**\n\n自己导师接的项目，江苏省国家电网智能诊断数据分析平台\n\n**项目诉求**\n\n- 对相应指标进行增删改查\n- 可以导入、导出一些excel表格\n- 对数据进行智能诊断分析\n\n**技术细节**\n\nreact、Antd、Flask、mongodb\n\n\n### 江南布衣实习\n在公司实习期间，我担任网络工程师实习生，主要负责以下工作：\n\n1. **新入职员工设备管理**：负责<u>新入职员工的电脑设备接入公司内网，包括网络配置、安装必要软件以及配备相应办公区域的打印机驱动程序。</u>通过有效的网络设备管理，确保新员工能够快速融入公司工作环境，并顺利开始工作。\n\n2. **离职员工设备回收和资料销毁**：<u>负责处理离职员工设备的回收工作，包括安全地清除设备上的敏感数据并销毁资料，保障公司数据安全和隐私保护。</u>\n\n3. **订货会期间设备组装和网络连接**：<u>在公司订货会期间，负责组装现场所需的大量电脑及相关打印设备，并确保它们在网络上正常连接，打印设备能够顺利工作。</u>通过良好的设备管理和网络连接调试，保证了订货会的顺利进行和信息传输的稳定性。\n\n4. **员工设备报修响应与问题解决**：<u>及时响应员工设备报修请求，并通过重装系统、更换硬件设备等手段迅速解决问题</u>，确保员工工作不受影响，提高公司办公效率和网络设备的稳定性。\n\n通过这些工作，我积累了丰富的网络设备管理、故障排除和应急响应的经验，对计算机硬件、网络有了更深入的理解和实践。\n\n> **公司内网**：指的是一个局域网（LAN），用于连接公司内部各种设备和资源，如电脑、打印机、服务器等，使它们可以相互通信和共享资源。公司内网通常由路由器、交换机等设备组成，通过内部网络连接。\n> 要使一台电脑接入公司内网，经过以下步骤：\n> \n> 1. **网络配置**：打开电脑的网络设置，配置IP地址、子网掩码、网关和DNS服务器等网络参数。这些参数通常由网络管理员提供或在公司内部网络设备中配置。\n> 2. **身份验证**：根据公司的网络策略，需要先在管理员处创建账号密码，然后在需要接入的电脑上输入用户名和密码进行身份验证，以获得对公司内部资源的访问权限。\n> 3. **访问内部资源**：一旦电脑成功接入公司内网，就可以通过内部网络访问共享文件夹、打印机、应用程序和其他资源。\n\n## Java\n\n### Java和C++的区别\nJava 和 C++ 都是面向对象的语言，都支持封装、继承和多态，但还是有很多不同的地方：\n- Java 不提供指针来直接访问内存，程序内存更加安全，C++ 支持指针；\n- Java 的类是单继承的，C++ 支持多继承； Java 的接口可以多继承；\n- Java 有自动内存管理垃圾回收机制(GC)，而C++ 没有垃圾回收机制，程序员需要手动释放无用内存；\n- C++ 支持方法重载和操作符重载，Java 只支持方法重载（操作符重载增加了复杂性，与Java最初的设计思想不符）。\n\n> C 是面向过程的语言，C++ 既支持面向对象也支持面向过程，算是半面向对象语言，Java 是面向对象的语言。\n\n### 移位运算符\n`<<`: 左移运算符，向左移若干位，高位丢弃，低位补零。`x << 1`,相当于 x 乘以 2(不溢出的情况下)。\n`>>`: 带符号右移，向右移若干位，高位补符号位，低位丢弃。正数高位补 0,负数高位补 1。`x >> 1`,相当于 x 除以 2。\n`>>>`: 无符号右移，忽略符号位，空位都以 0 补齐。\n\n使用 `<<`、 `>>` 和`>>>`转换成的指令码运行起来会更高效些。由于 `double`，`float` 在二进制中的表现比较特殊，因此不能来进行移位操作。移位操作符实际上支持的类型只有 `int` 和 `long`，编译器在对 `short`、`byte`、`char` 类型进行移位前，都会将其转换为`int`类型再操作。\n\n如果移位的位数超过数值所占有的位数会怎样？\n当 `int` 类型左移/右移位数大于等于 32 位操作时，会先 **求余（%）** 后再进行左移/右移操作。也就是说左移/右移 32 位相当于不进行移位操作（32%32=0），左移/右移 42 位相当于左移/右移 10 位（42%32=10）。当 `long` 类型进行左移/右移操作时，由于 `long` 对应的二进制是 64 位，因此求余操作的基数也变成了 64。也就是说：`x<<42`等同于`x<<10`，`x>>42`等同于`x>>10`，`x>>>42`等同于`x>>>10`。\n\n### 基本数据类型/包装类型 及区别\n**8种基本数据类型**\n- 6 种数字类型： \n  - 4 种整数型：`byte`、`short`、`int`、`long`\n  - 2 种浮点型：`float`、`double`\n- 1 种字符类型：`char`\n- 1 种布尔型：`boolean`\n\n> 注意：Java 里使用 `long` 类型的数据一定要在数值后面加上 `L` ，否则将作为整型解析。 \n> `char a = 'h'`，`char`: 单引号，`String a = \"hello\"`，`String`: 双引号。\n\n**8种包装类型** \n`Byte`、`Short`、`Integer`、`Long`、`Float`、`Double`、`Character`、`Boolean` 。\n\n**区别**\n- 用途：基本类型用来定义常量和局部变量，包装类型可用于泛型，而基本类型不可以。\n- 存储方式：基本数据类型的局部变量存放在 Java 虚拟机栈中的局部变量表中，基本数据类型的成员变量（未被 `static` 修饰 ）存放在 Java 虚拟机的堆中。包装类型属于对象类型，几乎所有对象实例都存在于堆中。\n- 占用空间：相比于包装类型（对象类型）， 基本数据类型占用的空间往往非常小。\n- 默认值：成员变量包装类型不赋值就是 `null` ，而基本类型有默认值且不是 `null`。\n- 比较方式：对于基本数据类型来说，`==` 比较的是值。对于包装数据类型来说，`==` 比较的是对象的内存地址。所有整型包装类对象之间值的比较，全部使用 `equals()` 方法。\n\n### 包装类的缓存机制\nJava 基本数据类型的包装类型的大部分都用到了缓存机制来提升性能。`Byte`,`Short`,`Integer`,`Long` 这 4 种包装类默认创建了数值 [-128，127] 的相应类型的缓存数据，`Character` 创建了数值在 [0,127] 范围的缓存数据，`Boolean` 直接返回 `True` or `False`。\n\n### 什么是自动拆装箱\n```java\nInteger i = 10;  //装箱\nint n = i;   //拆箱\n```\n\n- 装箱：将基本类型用它们对应的引用类型包装起来；\n- 拆箱：将包装类型转换为基本数据类型；\n\n从字节码来看，装箱调用包装类的 `valueOf()` 方法，拆箱调用 `xxxValue()` 方法。\n\n### 如何解决浮点数运算的精度丢失问题\n\n无限循环的小数存储在计算机时，只能被截断，所以就会导致小数精度发生损失的情况。`BigDecimal` 可以实现对浮点数的运算，不会造成精度丢失。大部分需要浮点数精确运算结果的业务场景（比如涉及到钱的场景）都是通过 `BigDecimal` 来做的。\n\n### 局部变量/成员变量/静态变量\n\n- 语法形式：成员变量可以被 `public`,`private`,`static` 等修饰符所修饰，而局部变量不能被访问控制修饰符及 `static` 所修饰；但是，成员变量和局部变量都能被 final 所修饰。\n- 存储方式：如果成员变量是使用 `static` 修饰的，那么这个成员变量是属于类的，如果没有使用 `static` 修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存。\n- 生存时间：成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动生成，随着方法的调用结束而消亡。\n- 默认值：成员变量如果没有被赋初始值，则会自动以类型的默认值而赋值（一种情况例外:被 `final` 修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。\n\n静态变量是被 `static` 关键字修饰的变量。它可以被类的所有实例共享，无论一个类创建了多少个对象，它们都共享同一份静态变量。也就是说，即使创建多个对象，静态变量只会被分配一次内存，这样可以节省内存。\n\n### 重载和重写\n- 重载就是同名的方法能够根据输入数据的不同，做出不同的处理。重载发生在同一个类中（或者父类和子类之间），方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。\n- 重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。\n  - 方法名、参数列表必须相同，子类方法返回值类型应比父类方法返回值类型更小或相等，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。\n  - 如果父类方法访问修饰符为 private/final/static 则子类就不能重写该方法，但是被 static 修饰的方法能够被再次声明。\n  - 构造方法无法被重写\n\n### 面向对象和面向过程区别\n两者的主要区别在于解决问题的方式不同：\n- 面向过程把解决问题的过程拆成一个个方法，通过一个个方法的执行解决问题。\n- 面向对象会先抽象出对象，然后用对象执行方法的方式解决问题。\n\n另外，面向对象开发的程序一般更易维护、易复用、易扩展。\n\n### 接口和抽象类\n共同点: 都不能被实例化\nhttps://learn.skyofit.com/archives/351\n**区别**\n- 子类使用`extends`关键字来继承抽象类，只能继承 1 个抽象类；子类使用关键字`implements`来实现接口，可以实现多个接口。\n- 抽象类可以有构造方法，接口不能有构造方法。\n- 抽象类允许有普通方法，接口中的方法默认是`public abstract`类型(JDK8后允许使用`default`、`static`定义非抽象方法)。\n- 抽象类允许有成员变量，接口中只允许有常量(默认是`public static final`类型)。\n- 抽象类中的抽象方法可以有访问修饰符(可以是`public`、`protected`、`private`)，接口中的抽象方法默认是`public`类型。\n- 抽象类可以有 `main` 方法，接口中不能有 `main` 方法。\n\n### 深拷贝/浅拷贝/引用拷贝\n- 深拷贝: 完全复制整个对象，包括这个对象所包含的内部对象。\n- 浅拷贝: 浅拷贝会在堆上创建一个新的对象（区别于引用拷贝的一点），不过，如果原对象内部的属性是引用类型的话，浅拷贝会直接复制内部对象的引用地址，也就是说拷贝对象和原对象共用同一个内部对象。\n- 引用拷贝: 引用拷贝是两个不同的引用指向同一个对象。这不就是拷贝了一份引用吗哈哈哈？\n\n### Object 类\nObject 类是一个特殊的类，是所有类的父类。主要提供了以下 11 个方法：\n```java\n//native 方法，用于返回当前运行时对象的 Class 对象，使用了 final 关键字修饰，故不允许子类重写。\npublic final native Class<?> getClass()\n\n//native 方法，用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的HashMap。\npublic native int hashCode()\n\n//用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写以用于比较字符串的值是否相等。\npublic boolean equals(Object obj)\n\n//native 方法，用于创建并返回当前对象的一份拷贝。\nprotected native Object clone() throws CloneNotSupportedException\n\n//返回类的名字实例的哈希码的 16 进制的字符串。建议 Object 所有的子类都重写这个方法。\npublic String toString()\n\n//native 方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。\npublic final native void notify()\n\n//native 方法，并且不能重写。跟 notify 一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。\npublic final native void notifyAll()\n\n//native方法，并且不能重写。暂停线程的执行。注意：sleep 方法没有释放锁，而 wait 方法释放了锁 ，timeout 是等待时间。\npublic final native void wait(long timeout) throws InterruptedException\n\n//多了 nanos 参数，这个参数表示额外时间（以纳秒为单位，范围是 0-999999）。 所以超时的时间还需要加上 nanos 纳秒。。\npublic final void wait(long timeout, int nanos) throws InterruptedException\n\n//跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念\npublic final void wait() throws InterruptedException\n\n// 实例被垃圾回收器回收的时候触发的操作\nprotected void finalize() throws Throwable { }\n```\n\n### 形参&实参\n- 形参（形式参数，Parameters）：用于定义函数/方法，接收实参，不需要有确定的值。\n- 实参（实际参数，Arguments）：用于传递给函数/方法的参数，必须有确定的值。\n\n### 值传递&引用传递\n- 值传递：方法接收的是实参值的拷贝，会创建副本。\n- 引用传递：方法接收的直接是实参所引用的对象在堆中的地址，不会创建副本，对形参的修改将影响到实参。\n\nJava 中只有值传递，C++ 中有值传递和引用传递。\n\n### ==和equals()区别\n- `==` 可以用来比较基本数据类型和引用数据类型\n  - 基本数据类型：比较的是值是否相等\n  - 引用数据类型：比较的是引用地址是否相等\n  - Java只有值传递，不管是基本数据类型还是引用数据类型，比较的都是值，只是引用类型变量存的值是对象的地址。\n- `equals()` 不能用于判断基本数据类型的变量，只能用来判断两个对象是否相等。\n  - 如果没有重写`equals()`方法， 子类调用`Object` 类中的`equals()`方法，等价于通过“==”比较这两个对象，即比较的是两个对象的引用地址。\n  - 一般重写`equals()`方法来比较两个对象中的属性是否相等；若属性相等，则返回 `true`(即认为这两个对象相等)。\n\n### hashCode()和equal()\n`hashCode()` 的作用是获取哈希码（`int` 整数），也称为散列码。哈希码的作用是确定该对象在哈希表中的索引位置。`hashCode()` 定义在 `Object` 类中，意味着 Java 中的任何类都有 `hashCode()`。注意：`Object` 的 `hashCode()` 方法是本地方法，也就是用 C 语言或 C++ 实现的。\n\n`hashCode()` 和 `equals()`都是用于比较两个对象是否相等。JDK 同时提供这两个方法，`hashCode()`方法可以大大减少`equals()`方法的调用次数，从而提高程序的性能。\n- 如果两个对象的`hashCode` 值相等，那这两个对象不一定相等（**哈希碰撞**）。\n- 如果两个对象的`hashCode` 值相等并且`equals()`方法也返回 `true`，认为这两个对象相等。\n- 如果两个对象的`hashCode` 值不相等，可以直接认为这两个对象不相等。\n\n**为什么重写 `equals()` 时必须重写 `hashCode()` 方法？**\n因为两个相等对象的 `hashCode` 值必须相等。也就是说如果 `equals` 方法判断两个对象是相等的，那这两个对象的 `hashCode` 值也要相等。如果重写 `equals()` 时没有重写 `hashCode()` 方法的话就可能会导致 `equals` 方法判断是相等的两个对象，`hashCode` 值却不相等。\n\n### String/StringBuffer/StringBuilder\n- `String` : 字符串常量，不可变，线程安全，适用于少量的字符串操作的情况。\n- `StringBuffer` : 字符串变量（线程安全），适用于多线程下大量字符串操作的情况。\n- `StringBuilder` : 字符串变量（非线程安全），适用于单线程下大量字符串操作的情况。\n\n- 每次对 `String` 类型进行改变的时候，都会生成一个新的 `String` 对象，然后将指针指向新的 `String` 对象。\n- `StringBuffer` 改变时会对本身进行操作，而不是生成新的对象并改变对象引用。\n- `StringBuilder` 相比使用 `StringBuffer` 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。\n\n** `String` 为什么不可变？**\n- `String`类内保存字符串的`char`数组被 `final` 修饰且为私有的，并且 `String` 类没有提供/暴露修改这个字符串的方法。\n- `String` 类被 `final` 修饰导致其不能被继承，进而避免了子类破坏 `String` 不可变。\n\n### 字符串拼接使用+还是StringBuilder？\nJava中“+”和“+=” 实际上是通过 `StringBuilder` 调用 `append()` 方法实现的，拼接完成之后调用 `toString()` 得到一个 String 对象。在循环内使用“+”进行字符串的拼接的话，存在比较明显的缺陷：编译器不会创建单个 `StringBuilder` 以复用，会导致创建过多的 `StringBuilder` 对象。\n\n### String.equals()/Object.equals()\n`String` 中的 `equals` 方法是被重写过的，比较的是 `String` 字符串的值是否相等。 `Object` 的 `equals` 方法是比较的对象的内存地址。\n\n### 字符串常量池\n**字符串常量池** 是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。\n\n### 异常\n异常的共同祖先是 `Throwable` 类，其有两个重要的子类：\n`Error`: 程序无法处理的错误，不建议通过 `catch` 捕获。一般由 JVM 抛出，线程终止执行。\n`Exception`: 程序本身可以处理的异常，可以通过 `catch` 来进行捕获。\n\n### Checked/Unchecked Exception\n- `Checked Exception`即受检查异常 ，在编译过程中，若受检查异常没有被 `catch` 或者 `throws` 关键字处理的话，就没办法通过编译。\n  - 除了 `RuntimeException` 及其子类以外，其他的 `Exception` 类及其子类都属于受检查异常 。常见的受检查异常有：`ClassNotFoundException`、`FileNotFoundException`、`SQLException` 等。\n- `Unchecked Exception` 即不受检查异常 ，在编译过程中 ，即使不处理也可以正常通过编译。\n  - `RuntimeException` 及其子类属于不受检查异常。常见的不受检查异常有：`NullPointerException`、`ArrayIndexOutOfBoundsException`、`IllegalArgumentException` 等。\n\n### try-catch-finally\n`try`：用于捕获异常。其后可接零个或多个 `catch` 块，如果没有 `catch` 块，则必须跟一个 `finally` 块。\n`catch`：用于处理 `try` 捕获到的异常。\n`finally`：无论是否捕获或处理异常，`finally` 块里的语句都会被执行。当在 `try` 块或 `catch` 块中遇到 `return` 语句时，`finally` 语句块将在方法返回之前被执行。\n\n> 注意：不要在 `finally` 语句块中使用 `return` ! 当 `try` 语句和 `finally` 语句中都有 `return` 语句时，`try` 语句块中的 `return` 语句会被忽略。\n\n### 泛型\n- 使用泛型参数，可以增强代码的可读性以及稳定性。\n- 泛型一般有三种使用方式:泛型类、泛型接口、泛型方法。\n\n### 反射\n反射是框架的灵魂，主要是因为它赋予了在运行时分析类以及执行类中方法的能力。通过反射可以获取任意一个类的所有属性和方法，还可以调用这些方法和属性。\n\n- 优点：可以让代码更加灵活、为各种框架提供开箱即用的功能提供了便利。\n- 缺点：在运行时有了分析操作类的能力，这同样也增加了安全问题。比如可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译时）。另外，反射的性能也要稍差点，不过，对于框架来说实际是影响不大的。\n\n### 注解\n注解使用了反射，可以看作是一种特殊的注释，主要用于修饰类、方法或者变量，提供某些信息供程序在编译或者运行时使用。\n\n注解只有被解析之后才会生效，常见的解析方法有两种：\n- 编译期直接扫描：编译器在编译代码的时候扫描对应的注解并处理，如某个方法使用 `@Override` 注解，编译器在编译的时候就会检测当前的方法是否重写了父类对应的方法。\n- 运行期通过反射处理：像框架中自带的注解(比如 `Spring` 框架的 `@Value`、`@Component`)都是通过反射来进行处理的。\n\n### 序列化/反序列化\n如果需要持久化 Java 对象比如将 Java 对象保存在文件中，或者在网络传输 Java 对象，这些场景都需要用到序列化。\n- 序列化：将数据结构或对象转换成二进制字节流的过程\n- 反序列化：将在序列化过程中所生成的二进制字节流转换成数据结构或者对象的过程\n\n序列化和反序列化常见应用场景：\n- 对象在进行网络传输（比如远程方法调用 RPC 的时候）之前需要先被序列化，接收到序列化的对象之后需要再进行反序列化；\n- 将对象存储到文件之前需要进行序列化，将对象从文件中读取出来需要进行反序列化；\n- 将对象存储到数据库（如 Redis）之前需要用到序列化，将对象从缓存数据库中读取出来需要反序列化；\n- 将对象存储到内存之前需要进行序列化，从内存中读取出来之后需要进行反序列化。\n\n### 语法糖\n语法糖（Syntactic sugar） 代指的是编程语言为了方便程序员开发程序而设计的一种特殊语法，这种语法对编程语言的功能并没有影响。实现相同的功能，基于语法糖写出来的代码往往更简单简洁且更易阅读。\n\nJava 中最常用的语法糖主要有**switch语句**、**自动拆装箱**、**for-each循环**、**try-with-resources** 语法、**lambda 表达式**等。\n\n### List/Set/Queue/Map区别\n- List: 存储的元素是有序的、可重复的。\n- Set: 存储的元素不可重复的。\n- Queue: 按特定的排队规则来确定先后顺序，存储的元素是有序的、可重复的。\n- Map: 使用键值对（key-value）存储，key 是无序的、不可重复的，value 是无序的、可重复的，每个键最多映射到一个值。\n\n### 如何选用集合?\n主要根据集合的特点来选择合适的集合。如：\n- 需要根据键值获取到元素值时就选用 `Map` 接口下的集合，需要排序时选择 `TreeMap` ,不需要排序时就选择 `HashMap` ,需要保证线程安全就选用 `ConcurrentHashMap` 。\n- 只需要存放元素值时，就选择实现 `Collection` 接口的集合，需要保证元素唯一时选择实现 `Set` 接口的集合比如 `TreeSet` 或 `HashSet` ，不需要就选择实现 `List` 接口的比如 `ArrayList` 或 `LinkedList` ，然后再根据实现这些接口的集合的特点来选用。\n\n### 为什么要使用集合？\n在实际开发中，存储的数据类型多种多样且数量不确定。相较于数组，Java 集合提供了更灵活、更有效的方法来存储多个数据对象，其优势在于集合的大小可变、支持泛型、具有内建算法等。总的来说，Java 集合提高了数据的存储和处理灵活性，可以更好地适应现代软件开发中多样化的数据需求，并支持高质量的代码编写。\n\n### ArrayList和Array区别\n`ArrayList` 内部基于动态数组实现，比 `Array`（静态数组） 更加灵活：\n- `ArrayList`可动态扩容/缩容，`Array` 创建后不能改变长度。\n- `ArrayList` 可使用泛型确保类型安全，`Array` 则不可以。\n- `ArrayList` 中只能存对象，存基本类型数据时要用对应包装类(如`Integer`)。`Array` 可直接存储基本类型数据，也可存储对象。\n- `ArrayList` 提供增删改查等 API 操作方法，如 `add()`、`remove()`等。`Array` 只是一个固定长度数组，只能按照下标访问元素，无动态添加、删除元素能力。\n- `ArrayList`创建时不需指定大小，而`Array`创建时必须指定大小。\n\n### ArrayList和LinkedList区别\n- `ArrayList` 底层基于`Object`数组实现的，`LinkedList` 是基于双向链表实现的(JDK1.6之前是循环链表，1.7改为双向链表)。\n  - `ArrayList`插入和删除元素的时间复杂度受元素位置的影响。`add()`方法默认在尾部添加元素为O(1)，在指定位置插入元素或者删除元素时间复杂度为O(n)，因为需要移动元素。\n  - `LinkedList`插入和删除元素的时间复杂度为O(1)，因为只需要改变指针指向。如果要在指定位置插入或者删除元素，时间复杂度为O(n)，需要先移动到指定位置再插入和删除。\n- 二者都是线程不安全的。\n- `ArrayList` 随机访问效率高(实现了`RandomAccess()`接口)，`LinkedList` 插入删除效率高。\n- 占用空间：`ArrayList` 主要体现在在列表的结尾会留一定的容量空间，`LinkedList` 每个元素占用空间比前者大(要存放直接后继和直接前驱以及数据)。\n\n> 项目中一般不会使用 `LinkedList`。\n\n### ArrayList和LinkedList插入/删除效率\n`ArrayList`\n- 头部插入/删除：O(n), 需要移动元素。\n- 指定位置插入/删除：O(n), 需要移动元素。\n- 尾部插入/删除：O(1), 直接在尾部添加或删除元素。尾部插入时，当容量已到极限并需扩容时，需执行一次 O(n) 的操作将原数组复制到新的更大的数组中，然后再执行 O(1) 的操作添加元素。\n`LinkedList`\n- 头部插入/删除：O(1), 只需改变指针指向。\n- 尾部插入/删除：O(1), 只需改变指针指向。\n- 指定位置插入/删除：O(n), 需要先移动到指定位置再插入和删除。\n\n### 比较HashSet/LinkedHashSet/TreeSet\n- 都是 `Set` 接口的实现类，都保证元素唯一，且都不是线程安全的。\n- 主要区别在于底层数据结构不同。\n  - `HashSet` 底层是哈希表(`HashMap`)。\n  - `LinkedHashSet` 底层是链表和哈希表，元素的插入和取出顺序满足 FIFO。\n  - `TreeSet` 底层数据结构是红黑树，元素是有序的，排序的方式有自然排序和定制排序。\n- 底层数据结构不同导致三者应用场景不同。`HashSet` 用于不需要保证元素插入和取出顺序的场景，`LinkedHashSet` 用于保证元素的插入和取出顺序满足 FIFO 的场景，`TreeSet` 用于支持对元素自定义排序规则的场景。\n\n### Queue/Deque区别\n- `Queue` 是单端队列，只能从一端插入元素，另一端删除元素，实现上遵循 先进先出(FIFO)规则。\n- `Deque` 是双端队列，在队列的两端均可以插入或删除元素，其还提供有 `push()`等方法，可用于模拟栈。\n\n### ArrayDeque/LinkedList区别\n- `ArrayDeque` 基于**可变长数组**和**双指针**来实现，而 `LinkedList` 通过链表来实现。\n- `ArrayDeque` 不能存储 `NULL` 数据，`LinkedList` 能。\n- `ArrayDeque` 插入时可能存在扩容过程, 不过均摊后的插入操作依然为 O(1)。虽然 `LinkedList` 不需要扩容，但每次插入数据时都要申请新的堆空间，均摊性能相比更慢。\n\n从性能的角度上，选用 `ArrayDeque` 来实现队列要比 `LinkedList` 更好。此外，`ArrayDeque` 也可以用于实现栈。\n\n### PriorityQueue\nPriorityQueue 中元素出队顺序是与优先级相关的，即总是优先级最高的元素先出队。\n- 利用了二叉堆的数据结构来实现的，底层使用可变长的数组来存储数据\n- 通过堆元素的上浮和下沉，实现了在 O(logn) 的时间复杂度内插入元素和删除堆顶元素。\n- 是非线程安全的，且不支持存储 `NULL` 和 `non-comparable` 的对象。\n- 默认是小顶堆，但可以接收一个 `Comparator` 作为构造参数，从而来自定义元素优先级的先后。\n\n> `PriorityQueue` 在面试中可能更多的会出现在手撕算法的时候，典型例题包括堆排序、求第 K 大的数、带权图的遍历等，所以需要会熟练使用才行。\n\n### BlockingQueue及其实现类\n`BlockingQueue`(阻塞队列)是一个接口，其支持当队列没有元素时一直阻塞，直到有元素；还支持如果队列已满，一直等到队列可以放入新元素时再放入。常用于**生产者-消费者模型**中，生产者线程向队列中添加数据，消费者线程从队列中取出数据进行处理。\n\n**实现类**\n- `ArrayBlockingQueue`：使用数组实现的有界阻塞队列。在创建时需要指定容量大小，并支持公平和非公平两种方式的锁访问机制。\n- `LinkedBlockingQueue`：使用单向链表实现的可选有界阻塞队列。在创建时可以指定容量大小，如果不指定则默认为Integer.MAX_VALUE。和ArrayBlockingQueue不同的是， 它仅支持非公平的锁访问机制。\n- `PriorityBlockingQueue`：支持优先级排序的无界阻塞队列。元素必须实现`Comparable`接口且不能插入 `null` 元素。\n- `SynchronousQueue`：同步队列，是一种不存储元素的阻塞队列。每个插入操作都必须等待对应的删除操作，反之删除操作也必须等待插入操作。通常用于线程之间的直接传递数据。\n- `DelayQueue`：延迟队列，其中的元素只有到了其指定的延迟时间，才能够从队列中出队。\n\n### ArrayBlockingQueue/LinkedBlockingQueue区别\n二者是Java并发中常用的两种阻塞队列实现，都是线程安全的。区别：\n- 底层实现：`ArrayBlockingQueue` 基于数组实现，而 `LinkedBlockingQueue` 基于链表实现。\n- 是否有界：`ArrayBlockingQueue` 是有界队列，必须在创建时指定容量大小。`LinkedBlockingQueue` 创建时可以不指定容量大小，默认是Integer.MAX_VALUE，也就是无界的。但也可以指定队列大小，从而成为有界的。\n- 锁是否分离：`ArrayBlockingQueue`中的锁是没有分离的，即生产和消费用的是同一个锁；`LinkedBlockingQueue`中的锁是分离的，即生产用的是`putLock`，消费是`takeLock`，这样可以防止生产者和消费者线程之间的锁争夺。\n- 内存占用：`ArrayBlockingQueue` 需要提前分配数组内存，而 `LinkedBlockingQueue` 则是动态分配链表节点内存。因此，`ArrayBlockingQueue` 在创建时就会占用一定的内存空间，且往往申请的内存比实际所用的内存更大，而`LinkedBlockingQueue` 则是根据元素的增加而逐渐占用内存空间。\n\n\n\n\n\n\n\n\n### 堆和栈的区别\nhttps://blog.csdn.net/qq_44944221/article/details/126692973\n- 栈：是运行时单位，代表逻辑，内含基本数据类型和堆中的对象引用，所在区域连续，没有碎片；\n- 堆：是存储单元，代表着数据，可以被多个栈共享，所在区域不连续，有碎片；\n\n区别:\n- 功能不同：栈内存用来存储局部变量和方法调用，而堆内存用存储Java中的对象；无论是成员变量、局部变量、还是类变量他们指向的对象都存储在堆内存中；\n- 共享性不同：栈是线程私有，而堆是线程共享；\n- 异常错误不同：当内存不足时；栈抛出的是`StackOverFlowError`异常，而堆抛出的是`OutOfMemoryError`；\n- 空间大小不同：堆空间大小远远大于栈的内存空间。\n\n### 进程/线程/协程\nhttps://blog.csdn.net/m0_60505735/article/details/131047046\nhttps://blog.csdn.net/weixin_49199646/article/details/109210547\n进程： 进程是程序的一次执行过程，是系统资源分配和独立运行的最小单位；\n线程： 线程是进程的一个执行单元，是任务调度和系统执行的最小单位；\n协程： 协程是一种用户态的轻量级线程，协程的调度完全由用户控制。\n**进程与线程的区别**\n- 根本区别： 进程是操作系统资源分配和独立运行的最小单位；线程是任务调度和系统执行的最小单位。\n- 地址空间区别： 每个进程都有独立的地址空间，一个进程崩溃不影响其它进程；一个进程中的多个线程共享该 进程的地址空间，一个线程的非法操作会使整个进程崩溃。\n- 上下文切换开销区别： 每个进程有独立的代码和数据空间，进程之间上下文切换开销较大；线程组共享代码和数据空间，线程之间切换的开销较小。\n\n**进程与线程的联系**\n一个进程由共享空间（包括堆、代码区、数据区、进程空间和打开的文件描述符）和一个或多个线程组成，各个线程之间共享进程的内存空间。而一个标准的线程由线程ID、程序计数器PC、寄存器和栈组成。\n\n*进程与线程的选择**\n- 线程的创建或销毁的代价比进程小，需要频繁创建和销毁时应优先选用线程；\n- 线程上下文切换的速度比进程快，需要大量计算时优先选用线程；\n- 线程在CPU上的使用效率更高，需要多核分布时优先选用线程，需要多机分布时优先选用进程\n- 线程的安全性、稳定性没有进程好，需要更稳定安全时优先使用进程。\n\n综上，线程创建和销毁的代价低、上下文切换速度快、对系统资源占用小、对CPU的使用效率高，因此一般情况下优先选择线程进行高并发编程；但线程组的所有线程共用一个进程的内存空间，安全稳定性相对较差，若其中一个线程发生崩溃，可能会使整个进程，因此对安全稳定性要求较高时，需要优先选择进程进行高并发编程。\n\n### 强引用/软引用/弱引用/虚引用\nhttps://blog.csdn.net/u013718071/article/details/134789666\nJava中的引用类型主要分为强引用、软引用、弱引用和虚引用，它们之间的区别主要体现在垃圾回收的行为上。\n- 强引用（Strong Reference）：这是使用最普遍和默认的引用类型。如果一个对象具有强引用，那么垃圾回收器就永远不会回收它。当内存空间不足，Java虚拟机宁愿抛出 `OutOfMemoryError` 错误，也不会回收这种对象。\n- 软引用（Soft Reference）：软引用是用来描述一些还有用但并非必需的对象。只有当JVM认为内存不足时，才会去剔除这些基于软引用的对象。在Java中，可以用 `SoftReference` 类来实现软引用。\n- 弱引用（Weak Reference）：弱引用则是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾回收发生为止。当垃圾回收器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在Java中，可以用 `WeakReference` 类来实现弱引用。\n- 虚引用（Phantom Reference）：虚引用主要用来跟踪对象被垃圾回收的活动。虚引用与其他几种引用的一个区别在于：虚引用必须和引用队列（ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，将这个虚引用加入到与之关联的引用队列中。\n\n以上四种引用类型，强度依次递减：强引用最强，虚引用最弱。强引用对对象的生命周期没有影响，而软引用、弱引用和虚引用可以让对象在系统内存不足时被垃圾回收器回收。软引用和弱引用可以通过Java提供的相应类来创建，而虚引用需要借助 `PhantomReference` 类来实现。这些不同类型的引用给提供了更灵活的内存控制机制，用于满足不同的需求。\n\n### 垃圾回收机制\n\n\n\n## 网络\n\n\n\n## 操作系统\n\n\n## MySQL\n\n\n\n\n## Redis\n\n\n\n## spring boot/cloud ???\n\n\n## Linux\n\n\n\n## 其他\n\n\n\n## 面经\n\n\n\n","slug":"Java后端面经","published":1,"_id":"clx1l2pdv000lnfgn4yc34rmf","layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>准备在这篇文章中，先详细分析简历中可能会被问到的问题，然后总结一下 Java基础、网络、操作系统、数据库等内容的精简答案，最后再回顾一下每次面试的面经。</p>\n</blockquote>\n<h2 id=\"简历相关\"><a href=\"#简历相关\" class=\"headerlink\" title=\"简历相关\"></a>简历相关</h2><h3 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h3><p>面试官您好，我叫陈温鹏，就读于南京理工大学软件工程专业，学位是学硕，这次应聘的是 <strong>Java后端开发岗位</strong>。</p>\n<p>我呢，研一的时候积极参加开源社区建设，先参加了Casbin社区一个线上实习，担任社区维护者，日常工作会解决社区 issue，跟踪解决用户需求，修bug以及完善相关文档；然后在研一暑假三个月时间中了一个中科院和 casbin 社区联合举办的一个开源项目，主要的工作是完善社区整个大前端系统，包括 web，移动端功能完善，以及为社区开发了一款支持通用2FA的移动端app。除此之外，我还参与过国家电网经济研究院的一个项目。 这几段项目实习经历锻炼了我文档阅读、编写的能力，并在代码规范、开发流程等技能上获得提升。</p>\n<p>然后我呢，我评价觉得自己是一个学习能力很强的人，可以比较快速的学习并适应新的环境和技术栈。 最后感谢 xx 给我这次面试机会，我也十分希望能进入 xx ，与公司共同成长进步！</p>\n<h3 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h3><h3 id=\"Casbin明日之星实习\"><a href=\"#Casbin明日之星实习\" class=\"headerlink\" title=\"Casbin明日之星实习\"></a>Casbin明日之星实习</h3><ol>\n<li><p>在实习期间负责处理社区中导师分配的issue。由于Casbin的核心访问控制功能已经比较完善，且有很多仓库及sdk，所以issue的提交并不单单围绕主仓库，我的职责更多的是放在完善sdk上面。具体就是使用Casdoor的RESTful API接口，然后使用其他语言如JS、Java、Python来调用接口实现登录登出、对相关用户信息、资源等进行增删改查，这就是其他语言的sdk。当然，随着主仓库的相关接口或者功能更新，sdk也要做出相应的调整。</p>\n</li>\n<li><p>有时候我也负责Casdoor中的issue或者bug修复，Casdoor 是基于 Casbin 的单点登录（SSO）和权限管理系统，用于管理用户身份验证和访问权限。它提供了用户注册、登录、角色管理、权限控制等功能，可以与 Casbin 搭配使用，实现全面的身份验证和权限管理解决方案。这个系统使用react作为前端，beego作为后端，实现相关功能。</p>\n</li>\n<li><p>另外就是负责编写演示文档了，社区中某些开发文档不够完善，需要自己测试使用某些功能后，写出教程文档。</p>\n</li>\n</ol>\n<h3 id=\"中科院开源之夏项目\"><a href=\"#中科院开源之夏项目\" class=\"headerlink\" title=\"中科院开源之夏项目\"></a>中科院开源之夏项目</h3><p><strong>简介</strong><br>Casdoor单点登录系统⼤前端项⽬包括ios、flutter、uinapp、⼩程序等sdk的开发、功能的增强， 对微信等第三⽅登录的移动端⽅式的⽀持。开发⼤前端应⽤的主要⽬的是为了提⾼⽤户体验和增加应⽤的可访问 性，可以让⽤户在不同的设备和应⽤中都能够⽅便地使⽤应⽤，提⾼⽤户的满意度和使⽤率。同时，⼤前端应⽤也可以为开发者提供更多的开发选项和⼯具，提⾼开发效率和应⽤的可维护性。</p>\n<p><strong>项目诉求</strong></p>\n<ol>\n<li><p>对微信第三方登录的移动端支持</p>\n<ul>\n<li>在casdoor移动网页端，点击微信第三方登录按钮，弹出的却是扫二维码登录，这在移动端显然是不合理的，需要的是点击微信第三方登录后，跳转到微信app进行认证授权登录，用户确认后返回移动网页端。</li>\n</ul>\n</li>\n<li><p>对flutter、react-native、unity等sdk的开发及功能的增强</p>\n<ul>\n<li>对flutter-sdk的增强如第一点</li>\n</ul>\n</li>\n<li><p>临时加上的开发casdoor-app诉求，对标Google Authenticator</p>\n</li>\n</ol>\n<p><strong>技术细节</strong></p>\n<ol>\n<li><p>在flutter-sdk中通过截取session中的url和callbackURLscheme判断其中是否有”weixin”字段，如果有，则进行微信第三方原生授权登录；</p>\n<ul>\n<li><p>使用WKWebView替换原本的ASWebAuthenticationSession，对ios认证部分进行重写，以支持对每个跳转的链接进行监听；</p>\n</li>\n<li><p>使用rb脚本文件自动化配置微信SDK导入后xcode中xcodeproj文件的相关配置；</p>\n</li>\n<li><p>接入xcframework的微信SDK，使用obj-c重写原本的swift代码，以使用微信SDK；</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>接下来根据微信SDK开发文档进行配置即可。由于配置微信SDK需要苹果开发者账号以配置universal Link，需付费几百美元，所以最终代码并未实际测试。</p>\n<ol start=\"2\">\n<li>分为两部分<ol>\n<li>casdoor-unity-example<ul>\n<li>在github上开源的一个小游戏ValleyOfCubes_Unity3D (方块之谷)的基础上，演示如何使用casdoor RESTful API进行web SSO(Single Sign On) 登录；</li>\n<li>以C#为开发语言，调用casdoor-dotnet-sdk进行web SSO 登录；</li>\n<li>在casdoor服务端配置好应用的ClientCode和ClientSecret后，在Unity3D中向服务端发送认证请求(CilentCode等)，解析返回的token，就可以得到用户信息，也可以使用session保存token等信息。</li>\n<li>认证过程中还使用到了unity-webview这个由格力公司一个团队开发的小组件，因为它是开源免费的。</li>\n</ul>\n</li>\n<li>casdoor-react-native-sdk、example<ul>\n<li>以react-native作为框架，使用casdoor RESTful API进行web SSO 登录；</li>\n<li>react-native与JS不同的点在于在JS中，使用sessionStorage保存临时的session，主要是针对web端的，是同步的；react-native中与之类似的一个组件叫AsyncStorage，虽然功能大致相同，但却是异步的，导致不能共用一个sdk，所以就着手写了一个react-native sdk。</li>\n<li>sdk采用PKCE(Proof Key for Code Exchange, 代码交换的证明密钥)这种更安全的方式获取token。PKCE是⼀种⽤于增强OAuth 2.0授权码流程安全性的协议扩展。这种协议使得在客户端不需要 clientSecret 就能获取到 token ，它依赖的是 code_challenge 和 code_verifier 。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>casdoor-app 采用react-native框架，在授权登录功能上使用了react-native-sdk。<ul>\n<li>casdoor-app使用开源的totp-generator作为TOTP(Time-based One Time Passwords)码生成器，默认使用SHA-256(Secure Hash Algorithm-256)哈希算法，也可以支持SHA384、SHA512等其他多种哈希算法。</li>\n<li>casdoor-app支持输入密钥和扫码生成OTP，目前已完成核心功能开发。</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>SHA（Secure Hash Algorithm，安全哈希算法）是一系列的哈希算法，它们用于将数据转换成固定长度的唯一标识符，通常用于数据完整性验证、数字签名、密码学安全等领域。SHA 算法属于密码学中的哈希函数，而不是加密算法。</p>\n</blockquote>\n<p><strong>总结</strong><br>参加开源活动对我的锻炼是非常大的，我觉得虽然每个小例子和sdk涉及相关知识都没那么难，但是他难就难在你从没接触过，要在短时间内学习，并将之应用。在短时间内学习掌握一种领域的知识，我觉得这才是我参与开源项目收获最大的经验。</p>\n<h3 id=\"Casbin-Casdoor-介绍\"><a href=\"#Casbin-Casdoor-介绍\" class=\"headerlink\" title=\"Casbin Casdoor 介绍\"></a>Casbin Casdoor 介绍</h3><blockquote>\n<p>Casbin是一个强大的访问控制库，用于实现权限管理和访问控制的功能。它使用基于策略（Policy-Based）的访问控制模型，支持各种访问控制模型（如 ACL、RBAC、ABAC 等），并提供了丰富的功能和灵活的配置选项，使开发者可以轻松地实现精细化的权限管理。<br>Casbin 的主要特点包括：</p>\n<ol>\n<li><strong>多种访问控制模型支持</strong>：包括基于角色的访问控制（RBAC）、基于属性的访问控制（ABAC）、访问控制列表（ACL）等，满足不同场景的权限管理需求。</li>\n<li><strong>灵活的策略管理</strong>：通过策略文件进行权限管理，支持多种格式（如 CSV、JSON、数据库等），方便管理和配置访问策略。</li>\n<li><strong>细粒度的权限控制</strong>：支持精细到 API 级别的权限控制，可以根据需求对用户和资源进行精确控制。</li>\n<li><strong>跨语言支持</strong>：Casbin 提供了多种语言的实现，如 Go、Java、Node.js、Python 等，方便开发者在不同的技术栈中使用 Casbin 进行权限管理。</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>Casdoor 是基于 Casbin 的单点登录（SSO）和权限管理系统，用于管理用户身份验证和访问权限。它提供了用户注册、登录、角色管理、权限控制等功能，可以与 Casbin 搭配使用，实现全面的身份验证和权限管理解决方案。</p>\n<ol>\n<li><strong>单点登录（SSO）</strong>：支持统一身份验证，用户只需登录一次即可访问多个应用系统。</li>\n<li><strong>用户管理</strong>：提供用户注册、登录、密码找回等功能，支持用户角色和权限的管理。</li>\n<li><strong>权限控制</strong>：与 Casbin 集成，实现灵活的权限控制和策略管理，可以根据用户角色和权限设置不同的访问策略。</li>\n<li><strong>开源社区</strong>：Casdoor 是开源项目，提供了完整的文档和示例代码，同时也有活跃的社区支持，方便开发者使用和定制。</li>\n</ol>\n</blockquote>\n<h3 id=\"RESTful-API\"><a href=\"#RESTful-API\" class=\"headerlink\" title=\"RESTful API\"></a>RESTful API</h3><blockquote>\n<p>RESTful API（Representational State Transfer API）是一种基于REST架构风格的Web服务接口。REST是一种架构风格，用于设计网络应用，使其更轻量、性能更高且更易于扩展。RESTful API利用HTTP协议作为通信标准，并遵循REST架构原则。<br>REST架构原则：</p>\n<ul>\n<li>无状态性：每个请求从客户端到服务器必须包含足够的信息以使服务器理解请求。服务器不存储客户端的上下文，所有状态信息由客户端维护。</li>\n<li>统一接口： 资源：通过URL定位资源（通常是名词，如 &#x2F;users 表示用户资源）。 操作：使用标准HTTP方法对资源进行操作： GET：获取资源 POST：创建资源 PUT：更新资源 DELETE：删除资源</li>\n<li>可缓存性：服务器的响应可以被标记为可缓存或不可缓存，以提高性能。</li>\n<li>分层系统：客户端不需要直接与服务器交互，可能会通过中间服务器（如代理、负载均衡器等）来提升系统的可扩展性和安全性。</li>\n<li>按需代码：在某些情况下，服务器可以返回可执行代码（如JavaScript），使客户端能够执行。</li>\n</ul>\n<p>特点：</p>\n<ul>\n<li>资源导向：一切皆资源，每个资源使用唯一的URL表示。 </li>\n<li>标准化操作：利用HTTP动词来描述对资源的操作。 </li>\n<li>状态表示：服务器在每次请求中发送所需的状态信息，以便客户端理解和使用。 </li>\n<li>客户端-服务器架构：客户端和服务器职责分离，提升了系统的可维护性和可扩展性。 </li>\n<li>无状态交互：每个请求独立，不依赖于之前的请求。</li>\n</ul>\n<p>优点 </p>\n<ul>\n<li>简单易懂：遵循标准的HTTP协议和方法，便于理解和使用。 </li>\n<li>性能高：无状态和可缓存性提高了性能。 </li>\n<li>可扩展性：分层系统和明确的资源导向使得系统易于扩展。 </li>\n<li>灵活性：支持多种数据格式（如JSON、XML），适应不同客户端需求。</li>\n</ul>\n<p>缺点 </p>\n<ul>\n<li>无状态：每个请求都需要携带所有信息，可能会导致开销增加。</li>\n<li>缺乏标准化：虽然REST原则明确，但实际实现可能会有差异，导致互操作性问题。 </li>\n<li>适用于简单操作：对于复杂事务处理，REST可能不如其他协议（如GraphQL）高效。</li>\n</ul>\n<p>RESTful API因其简单、灵活和高效，已经成为现代Web服务开发的主流选择。</p>\n</blockquote>\n<h3 id=\"国家电网项目\"><a href=\"#国家电网项目\" class=\"headerlink\" title=\"国家电网项目\"></a>国家电网项目</h3><p><strong>简介</strong></p>\n<p>自己导师接的项目，江苏省国家电网智能诊断数据分析平台</p>\n<p><strong>项目诉求</strong></p>\n<ul>\n<li>对相应指标进行增删改查</li>\n<li>可以导入、导出一些excel表格</li>\n<li>对数据进行智能诊断分析</li>\n</ul>\n<p><strong>技术细节</strong></p>\n<p>react、Antd、Flask、mongodb</p>\n<h3 id=\"江南布衣实习\"><a href=\"#江南布衣实习\" class=\"headerlink\" title=\"江南布衣实习\"></a>江南布衣实习</h3><p>在公司实习期间，我担任网络工程师实习生，主要负责以下工作：</p>\n<ol>\n<li><p><strong>新入职员工设备管理</strong>：负责<u>新入职员工的电脑设备接入公司内网，包括网络配置、安装必要软件以及配备相应办公区域的打印机驱动程序。</u>通过有效的网络设备管理，确保新员工能够快速融入公司工作环境，并顺利开始工作。</p>\n</li>\n<li><p><strong>离职员工设备回收和资料销毁</strong>：<u>负责处理离职员工设备的回收工作，包括安全地清除设备上的敏感数据并销毁资料，保障公司数据安全和隐私保护。</u></p>\n</li>\n<li><p><strong>订货会期间设备组装和网络连接</strong>：<u>在公司订货会期间，负责组装现场所需的大量电脑及相关打印设备，并确保它们在网络上正常连接，打印设备能够顺利工作。</u>通过良好的设备管理和网络连接调试，保证了订货会的顺利进行和信息传输的稳定性。</p>\n</li>\n<li><p><strong>员工设备报修响应与问题解决</strong>：<u>及时响应员工设备报修请求，并通过重装系统、更换硬件设备等手段迅速解决问题</u>，确保员工工作不受影响，提高公司办公效率和网络设备的稳定性。</p>\n</li>\n</ol>\n<p>通过这些工作，我积累了丰富的网络设备管理、故障排除和应急响应的经验，对计算机硬件、网络有了更深入的理解和实践。</p>\n<blockquote>\n<p><strong>公司内网</strong>：指的是一个局域网（LAN），用于连接公司内部各种设备和资源，如电脑、打印机、服务器等，使它们可以相互通信和共享资源。公司内网通常由路由器、交换机等设备组成，通过内部网络连接。<br>要使一台电脑接入公司内网，经过以下步骤：</p>\n<ol>\n<li><strong>网络配置</strong>：打开电脑的网络设置，配置IP地址、子网掩码、网关和DNS服务器等网络参数。这些参数通常由网络管理员提供或在公司内部网络设备中配置。</li>\n<li><strong>身份验证</strong>：根据公司的网络策略，需要先在管理员处创建账号密码，然后在需要接入的电脑上输入用户名和密码进行身份验证，以获得对公司内部资源的访问权限。</li>\n<li><strong>访问内部资源</strong>：一旦电脑成功接入公司内网，就可以通过内部网络访问共享文件夹、打印机、应用程序和其他资源。</li>\n</ol>\n</blockquote>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><h3 id=\"Java和C-的区别\"><a href=\"#Java和C-的区别\" class=\"headerlink\" title=\"Java和C++的区别\"></a>Java和C++的区别</h3><p>Java 和 C++ 都是面向对象的语言，都支持封装、继承和多态，但还是有很多不同的地方：</p>\n<ul>\n<li>Java 不提供指针来直接访问内存，程序内存更加安全，C++ 支持指针；</li>\n<li>Java 的类是单继承的，C++ 支持多继承； Java 的接口可以多继承；</li>\n<li>Java 有自动内存管理垃圾回收机制(GC)，而C++ 没有垃圾回收机制，程序员需要手动释放无用内存；</li>\n<li>C++ 支持方法重载和操作符重载，Java 只支持方法重载（操作符重载增加了复杂性，与Java最初的设计思想不符）。</li>\n</ul>\n<blockquote>\n<p>C 是面向过程的语言，C++ 既支持面向对象也支持面向过程，算是半面向对象语言，Java 是面向对象的语言。</p>\n</blockquote>\n<h3 id=\"移位运算符\"><a href=\"#移位运算符\" class=\"headerlink\" title=\"移位运算符\"></a>移位运算符</h3><p><code>&lt;&lt;</code>: 左移运算符，向左移若干位，高位丢弃，低位补零。<code>x &lt;&lt; 1</code>,相当于 x 乘以 2(不溢出的情况下)。<br><code>&gt;&gt;</code>: 带符号右移，向右移若干位，高位补符号位，低位丢弃。正数高位补 0,负数高位补 1。<code>x &gt;&gt; 1</code>,相当于 x 除以 2。<br><code>&gt;&gt;&gt;</code>: 无符号右移，忽略符号位，空位都以 0 补齐。</p>\n<p>使用 <code>&lt;&lt;</code>、 <code>&gt;&gt;</code> 和<code>&gt;&gt;&gt;</code>转换成的指令码运行起来会更高效些。由于 <code>double</code>，<code>float</code> 在二进制中的表现比较特殊，因此不能来进行移位操作。移位操作符实际上支持的类型只有 <code>int</code> 和 <code>long</code>，编译器在对 <code>short</code>、<code>byte</code>、<code>char</code> 类型进行移位前，都会将其转换为<code>int</code>类型再操作。</p>\n<p>如果移位的位数超过数值所占有的位数会怎样？<br>当 <code>int</code> 类型左移&#x2F;右移位数大于等于 32 位操作时，会先 <strong>求余（%）</strong> 后再进行左移&#x2F;右移操作。也就是说左移&#x2F;右移 32 位相当于不进行移位操作（32%32&#x3D;0），左移&#x2F;右移 42 位相当于左移&#x2F;右移 10 位（42%32&#x3D;10）。当 <code>long</code> 类型进行左移&#x2F;右移操作时，由于 <code>long</code> 对应的二进制是 64 位，因此求余操作的基数也变成了 64。也就是说：<code>x&lt;&lt;42</code>等同于<code>x&lt;&lt;10</code>，<code>x&gt;&gt;42</code>等同于<code>x&gt;&gt;10</code>，<code>x&gt;&gt;&gt;42</code>等同于<code>x&gt;&gt;&gt;10</code>。</p>\n<h3 id=\"基本数据类型-包装类型-及区别\"><a href=\"#基本数据类型-包装类型-及区别\" class=\"headerlink\" title=\"基本数据类型&#x2F;包装类型 及区别\"></a>基本数据类型&#x2F;包装类型 及区别</h3><p><strong>8种基本数据类型</strong></p>\n<ul>\n<li>6 种数字类型： <ul>\n<li>4 种整数型：<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code></li>\n<li>2 种浮点型：<code>float</code>、<code>double</code></li>\n</ul>\n</li>\n<li>1 种字符类型：<code>char</code></li>\n<li>1 种布尔型：<code>boolean</code></li>\n</ul>\n<blockquote>\n<p>注意：Java 里使用 <code>long</code> 类型的数据一定要在数值后面加上 <code>L</code> ，否则将作为整型解析。<br><code>char a = &#39;h&#39;</code>，<code>char</code>: 单引号，<code>String a = &quot;hello&quot;</code>，<code>String</code>: 双引号。</p>\n</blockquote>\n<p><strong>8种包装类型</strong><br><code>Byte</code>、<code>Short</code>、<code>Integer</code>、<code>Long</code>、<code>Float</code>、<code>Double</code>、<code>Character</code>、<code>Boolean</code> 。</p>\n<p><strong>区别</strong></p>\n<ul>\n<li>用途：基本类型用来定义常量和局部变量，包装类型可用于泛型，而基本类型不可以。</li>\n<li>存储方式：基本数据类型的局部变量存放在 Java 虚拟机栈中的局部变量表中，基本数据类型的成员变量（未被 <code>static</code> 修饰 ）存放在 Java 虚拟机的堆中。包装类型属于对象类型，几乎所有对象实例都存在于堆中。</li>\n<li>占用空间：相比于包装类型（对象类型）， 基本数据类型占用的空间往往非常小。</li>\n<li>默认值：成员变量包装类型不赋值就是 <code>null</code> ，而基本类型有默认值且不是 <code>null</code>。</li>\n<li>比较方式：对于基本数据类型来说，<code>==</code> 比较的是值。对于包装数据类型来说，<code>==</code> 比较的是对象的内存地址。所有整型包装类对象之间值的比较，全部使用 <code>equals()</code> 方法。</li>\n</ul>\n<h3 id=\"包装类的缓存机制\"><a href=\"#包装类的缓存机制\" class=\"headerlink\" title=\"包装类的缓存机制\"></a>包装类的缓存机制</h3><p>Java 基本数据类型的包装类型的大部分都用到了缓存机制来提升性能。<code>Byte</code>,<code>Short</code>,<code>Integer</code>,<code>Long</code> 这 4 种包装类默认创建了数值 [-128，127] 的相应类型的缓存数据，<code>Character</code> 创建了数值在 [0,127] 范围的缓存数据，<code>Boolean</code> 直接返回 <code>True</code> or <code>False</code>。</p>\n<h3 id=\"什么是自动拆装箱\"><a href=\"#什么是自动拆装箱\" class=\"headerlink\" title=\"什么是自动拆装箱\"></a>什么是自动拆装箱</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;  <span class=\"comment\">//装箱</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> i;   <span class=\"comment\">//拆箱</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>装箱：将基本类型用它们对应的引用类型包装起来；</li>\n<li>拆箱：将包装类型转换为基本数据类型；</li>\n</ul>\n<p>从字节码来看，装箱调用包装类的 <code>valueOf()</code> 方法，拆箱调用 <code>xxxValue()</code> 方法。</p>\n<h3 id=\"如何解决浮点数运算的精度丢失问题\"><a href=\"#如何解决浮点数运算的精度丢失问题\" class=\"headerlink\" title=\"如何解决浮点数运算的精度丢失问题\"></a>如何解决浮点数运算的精度丢失问题</h3><p>无限循环的小数存储在计算机时，只能被截断，所以就会导致小数精度发生损失的情况。<code>BigDecimal</code> 可以实现对浮点数的运算，不会造成精度丢失。大部分需要浮点数精确运算结果的业务场景（比如涉及到钱的场景）都是通过 <code>BigDecimal</code> 来做的。</p>\n<h3 id=\"局部变量-成员变量-静态变量\"><a href=\"#局部变量-成员变量-静态变量\" class=\"headerlink\" title=\"局部变量&#x2F;成员变量&#x2F;静态变量\"></a>局部变量&#x2F;成员变量&#x2F;静态变量</h3><ul>\n<li>语法形式：成员变量可以被 <code>public</code>,<code>private</code>,<code>static</code> 等修饰符所修饰，而局部变量不能被访问控制修饰符及 <code>static</code> 所修饰；但是，成员变量和局部变量都能被 final 所修饰。</li>\n<li>存储方式：如果成员变量是使用 <code>static</code> 修饰的，那么这个成员变量是属于类的，如果没有使用 <code>static</code> 修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存。</li>\n<li>生存时间：成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动生成，随着方法的调用结束而消亡。</li>\n<li>默认值：成员变量如果没有被赋初始值，则会自动以类型的默认值而赋值（一种情况例外:被 <code>final</code> 修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。</li>\n</ul>\n<p>静态变量是被 <code>static</code> 关键字修饰的变量。它可以被类的所有实例共享，无论一个类创建了多少个对象，它们都共享同一份静态变量。也就是说，即使创建多个对象，静态变量只会被分配一次内存，这样可以节省内存。</p>\n<h3 id=\"重载和重写\"><a href=\"#重载和重写\" class=\"headerlink\" title=\"重载和重写\"></a>重载和重写</h3><ul>\n<li>重载就是同名的方法能够根据输入数据的不同，做出不同的处理。重载发生在同一个类中（或者父类和子类之间），方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。</li>\n<li>重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。<ul>\n<li>方法名、参数列表必须相同，子类方法返回值类型应比父类方法返回值类型更小或相等，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。</li>\n<li>如果父类方法访问修饰符为 private&#x2F;final&#x2F;static 则子类就不能重写该方法，但是被 static 修饰的方法能够被再次声明。</li>\n<li>构造方法无法被重写</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"面向对象和面向过程区别\"><a href=\"#面向对象和面向过程区别\" class=\"headerlink\" title=\"面向对象和面向过程区别\"></a>面向对象和面向过程区别</h3><p>两者的主要区别在于解决问题的方式不同：</p>\n<ul>\n<li>面向过程把解决问题的过程拆成一个个方法，通过一个个方法的执行解决问题。</li>\n<li>面向对象会先抽象出对象，然后用对象执行方法的方式解决问题。</li>\n</ul>\n<p>另外，面向对象开发的程序一般更易维护、易复用、易扩展。</p>\n<h3 id=\"接口和抽象类\"><a href=\"#接口和抽象类\" class=\"headerlink\" title=\"接口和抽象类\"></a>接口和抽象类</h3><p>共同点: 都不能被实例化<br><a href=\"https://learn.skyofit.com/archives/351\">https://learn.skyofit.com/archives/351</a><br><strong>区别</strong></p>\n<ul>\n<li>子类使用<code>extends</code>关键字来继承抽象类，只能继承 1 个抽象类；子类使用关键字<code>implements</code>来实现接口，可以实现多个接口。</li>\n<li>抽象类可以有构造方法，接口不能有构造方法。</li>\n<li>抽象类允许有普通方法，接口中的方法默认是<code>public abstract</code>类型(JDK8后允许使用<code>default</code>、<code>static</code>定义非抽象方法)。</li>\n<li>抽象类允许有成员变量，接口中只允许有常量(默认是<code>public static final</code>类型)。</li>\n<li>抽象类中的抽象方法可以有访问修饰符(可以是<code>public</code>、<code>protected</code>、<code>private</code>)，接口中的抽象方法默认是<code>public</code>类型。</li>\n<li>抽象类可以有 <code>main</code> 方法，接口中不能有 <code>main</code> 方法。</li>\n</ul>\n<h3 id=\"深拷贝-浅拷贝-引用拷贝\"><a href=\"#深拷贝-浅拷贝-引用拷贝\" class=\"headerlink\" title=\"深拷贝&#x2F;浅拷贝&#x2F;引用拷贝\"></a>深拷贝&#x2F;浅拷贝&#x2F;引用拷贝</h3><ul>\n<li>深拷贝: 完全复制整个对象，包括这个对象所包含的内部对象。</li>\n<li>浅拷贝: 浅拷贝会在堆上创建一个新的对象（区别于引用拷贝的一点），不过，如果原对象内部的属性是引用类型的话，浅拷贝会直接复制内部对象的引用地址，也就是说拷贝对象和原对象共用同一个内部对象。</li>\n<li>引用拷贝: 引用拷贝是两个不同的引用指向同一个对象。这不就是拷贝了一份引用吗哈哈哈？</li>\n</ul>\n<h3 id=\"Object-类\"><a href=\"#Object-类\" class=\"headerlink\" title=\"Object 类\"></a>Object 类</h3><p>Object 类是一个特殊的类，是所有类的父类。主要提供了以下 11 个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//native 方法，用于返回当前运行时对象的 Class 对象，使用了 final 关键字修饰，故不允许子类重写。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> Class&lt;?&gt; getClass()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//native 方法，用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的HashMap。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"type\">int</span> <span class=\"title function_\">hashCode</span><span class=\"params\">()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写以用于比较字符串的值是否相等。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object obj)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//native 方法，用于创建并返回当前对象的一份拷贝。</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">native</span> Object <span class=\"title function_\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回类的名字实例的哈希码的 16 进制的字符串。建议 Object 所有的子类都重写这个方法。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//native 方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notify</span><span class=\"params\">()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//native 方法，并且不能重写。跟 notify 一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notifyAll</span><span class=\"params\">()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//native方法，并且不能重写。暂停线程的执行。注意：sleep 方法没有释放锁，而 wait 方法释放了锁 ，timeout 是等待时间。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">wait</span><span class=\"params\">(<span class=\"type\">long</span> timeout)</span> <span class=\"keyword\">throws</span> InterruptedException</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//多了 nanos 参数，这个参数表示额外时间（以纳秒为单位，范围是 0-999999）。 所以超时的时间还需要加上 nanos 纳秒。。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">wait</span><span class=\"params\">(<span class=\"type\">long</span> timeout, <span class=\"type\">int</span> nanos)</span> <span class=\"keyword\">throws</span> InterruptedException</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">wait</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例被垃圾回收器回收的时候触发的操作</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finalize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"形参-实参\"><a href=\"#形参-实参\" class=\"headerlink\" title=\"形参&amp;实参\"></a>形参&amp;实参</h3><ul>\n<li>形参（形式参数，Parameters）：用于定义函数&#x2F;方法，接收实参，不需要有确定的值。</li>\n<li>实参（实际参数，Arguments）：用于传递给函数&#x2F;方法的参数，必须有确定的值。</li>\n</ul>\n<h3 id=\"值传递-引用传递\"><a href=\"#值传递-引用传递\" class=\"headerlink\" title=\"值传递&amp;引用传递\"></a>值传递&amp;引用传递</h3><ul>\n<li>值传递：方法接收的是实参值的拷贝，会创建副本。</li>\n<li>引用传递：方法接收的直接是实参所引用的对象在堆中的地址，不会创建副本，对形参的修改将影响到实参。</li>\n</ul>\n<p>Java 中只有值传递，C++ 中有值传递和引用传递。</p>\n<h3 id=\"和equals-区别\"><a href=\"#和equals-区别\" class=\"headerlink\" title=\"&#x3D;&#x3D;和equals()区别\"></a>&#x3D;&#x3D;和equals()区别</h3><ul>\n<li><code>==</code> 可以用来比较基本数据类型和引用数据类型<ul>\n<li>基本数据类型：比较的是值是否相等</li>\n<li>引用数据类型：比较的是引用地址是否相等</li>\n<li>Java只有值传递，不管是基本数据类型还是引用数据类型，比较的都是值，只是引用类型变量存的值是对象的地址。</li>\n</ul>\n</li>\n<li><code>equals()</code> 不能用于判断基本数据类型的变量，只能用来判断两个对象是否相等。<ul>\n<li>如果没有重写<code>equals()</code>方法， 子类调用<code>Object</code> 类中的<code>equals()</code>方法，等价于通过“&#x3D;&#x3D;”比较这两个对象，即比较的是两个对象的引用地址。</li>\n<li>一般重写<code>equals()</code>方法来比较两个对象中的属性是否相等；若属性相等，则返回 <code>true</code>(即认为这两个对象相等)。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"hashCode-和equal\"><a href=\"#hashCode-和equal\" class=\"headerlink\" title=\"hashCode()和equal()\"></a>hashCode()和equal()</h3><p><code>hashCode()</code> 的作用是获取哈希码（<code>int</code> 整数），也称为散列码。哈希码的作用是确定该对象在哈希表中的索引位置。<code>hashCode()</code> 定义在 <code>Object</code> 类中，意味着 Java 中的任何类都有 <code>hashCode()</code>。注意：<code>Object</code> 的 <code>hashCode()</code> 方法是本地方法，也就是用 C 语言或 C++ 实现的。</p>\n<p><code>hashCode()</code> 和 <code>equals()</code>都是用于比较两个对象是否相等。JDK 同时提供这两个方法，<code>hashCode()</code>方法可以大大减少<code>equals()</code>方法的调用次数，从而提高程序的性能。</p>\n<ul>\n<li>如果两个对象的<code>hashCode</code> 值相等，那这两个对象不一定相等（<strong>哈希碰撞</strong>）。</li>\n<li>如果两个对象的<code>hashCode</code> 值相等并且<code>equals()</code>方法也返回 <code>true</code>，认为这两个对象相等。</li>\n<li>如果两个对象的<code>hashCode</code> 值不相等，可以直接认为这两个对象不相等。</li>\n</ul>\n<p><strong>为什么重写 <code>equals()</code> 时必须重写 <code>hashCode()</code> 方法？</strong><br>因为两个相等对象的 <code>hashCode</code> 值必须相等。也就是说如果 <code>equals</code> 方法判断两个对象是相等的，那这两个对象的 <code>hashCode</code> 值也要相等。如果重写 <code>equals()</code> 时没有重写 <code>hashCode()</code> 方法的话就可能会导致 <code>equals</code> 方法判断是相等的两个对象，<code>hashCode</code> 值却不相等。</p>\n<h3 id=\"String-StringBuffer-StringBuilder\"><a href=\"#String-StringBuffer-StringBuilder\" class=\"headerlink\" title=\"String&#x2F;StringBuffer&#x2F;StringBuilder\"></a>String&#x2F;StringBuffer&#x2F;StringBuilder</h3><ul>\n<li><p><code>String</code> : 字符串常量，不可变，线程安全，适用于少量的字符串操作的情况。</p>\n</li>\n<li><p><code>StringBuffer</code> : 字符串变量（线程安全），适用于多线程下大量字符串操作的情况。</p>\n</li>\n<li><p><code>StringBuilder</code> : 字符串变量（非线程安全），适用于单线程下大量字符串操作的情况。</p>\n</li>\n<li><p>每次对 <code>String</code> 类型进行改变的时候，都会生成一个新的 <code>String</code> 对象，然后将指针指向新的 <code>String</code> 对象。</p>\n</li>\n<li><p><code>StringBuffer</code> 改变时会对本身进行操作，而不是生成新的对象并改变对象引用。</p>\n</li>\n<li><p><code>StringBuilder</code> 相比使用 <code>StringBuffer</code> 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p>\n</li>\n</ul>\n<p>** <code>String</code> 为什么不可变？**</p>\n<ul>\n<li><code>String</code>类内保存字符串的<code>char</code>数组被 <code>final</code> 修饰且为私有的，并且 <code>String</code> 类没有提供&#x2F;暴露修改这个字符串的方法。</li>\n<li><code>String</code> 类被 <code>final</code> 修饰导致其不能被继承，进而避免了子类破坏 <code>String</code> 不可变。</li>\n</ul>\n<h3 id=\"字符串拼接使用-还是StringBuilder？\"><a href=\"#字符串拼接使用-还是StringBuilder？\" class=\"headerlink\" title=\"字符串拼接使用+还是StringBuilder？\"></a>字符串拼接使用+还是StringBuilder？</h3><p>Java中“+”和“+&#x3D;” 实际上是通过 <code>StringBuilder</code> 调用 <code>append()</code> 方法实现的，拼接完成之后调用 <code>toString()</code> 得到一个 String 对象。在循环内使用“+”进行字符串的拼接的话，存在比较明显的缺陷：编译器不会创建单个 <code>StringBuilder</code> 以复用，会导致创建过多的 <code>StringBuilder</code> 对象。</p>\n<h3 id=\"String-equals-Object-equals\"><a href=\"#String-equals-Object-equals\" class=\"headerlink\" title=\"String.equals()&#x2F;Object.equals()\"></a>String.equals()&#x2F;Object.equals()</h3><p><code>String</code> 中的 <code>equals</code> 方法是被重写过的，比较的是 <code>String</code> 字符串的值是否相等。 <code>Object</code> 的 <code>equals</code> 方法是比较的对象的内存地址。</p>\n<h3 id=\"字符串常量池\"><a href=\"#字符串常量池\" class=\"headerlink\" title=\"字符串常量池\"></a>字符串常量池</h3><p><strong>字符串常量池</strong> 是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。</p>\n<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><p>异常的共同祖先是 <code>Throwable</code> 类，其有两个重要的子类：<br><code>Error</code>: 程序无法处理的错误，不建议通过 <code>catch</code> 捕获。一般由 JVM 抛出，线程终止执行。<br><code>Exception</code>: 程序本身可以处理的异常，可以通过 <code>catch</code> 来进行捕获。</p>\n<h3 id=\"Checked-Unchecked-Exception\"><a href=\"#Checked-Unchecked-Exception\" class=\"headerlink\" title=\"Checked&#x2F;Unchecked Exception\"></a>Checked&#x2F;Unchecked Exception</h3><ul>\n<li><code>Checked Exception</code>即受检查异常 ，在编译过程中，若受检查异常没有被 <code>catch</code> 或者 <code>throws</code> 关键字处理的话，就没办法通过编译。<ul>\n<li>除了 <code>RuntimeException</code> 及其子类以外，其他的 <code>Exception</code> 类及其子类都属于受检查异常 。常见的受检查异常有：<code>ClassNotFoundException</code>、<code>FileNotFoundException</code>、<code>SQLException</code> 等。</li>\n</ul>\n</li>\n<li><code>Unchecked Exception</code> 即不受检查异常 ，在编译过程中 ，即使不处理也可以正常通过编译。<ul>\n<li><code>RuntimeException</code> 及其子类属于不受检查异常。常见的不受检查异常有：<code>NullPointerException</code>、<code>ArrayIndexOutOfBoundsException</code>、<code>IllegalArgumentException</code> 等。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"try-catch-finally\"><a href=\"#try-catch-finally\" class=\"headerlink\" title=\"try-catch-finally\"></a>try-catch-finally</h3><p><code>try</code>：用于捕获异常。其后可接零个或多个 <code>catch</code> 块，如果没有 <code>catch</code> 块，则必须跟一个 <code>finally</code> 块。<br><code>catch</code>：用于处理 <code>try</code> 捕获到的异常。<br><code>finally</code>：无论是否捕获或处理异常，<code>finally</code> 块里的语句都会被执行。当在 <code>try</code> 块或 <code>catch</code> 块中遇到 <code>return</code> 语句时，<code>finally</code> 语句块将在方法返回之前被执行。</p>\n<blockquote>\n<p>注意：不要在 <code>finally</code> 语句块中使用 <code>return</code> ! 当 <code>try</code> 语句和 <code>finally</code> 语句中都有 <code>return</code> 语句时，<code>try</code> 语句块中的 <code>return</code> 语句会被忽略。</p>\n</blockquote>\n<h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><ul>\n<li>使用泛型参数，可以增强代码的可读性以及稳定性。</li>\n<li>泛型一般有三种使用方式:泛型类、泛型接口、泛型方法。</li>\n</ul>\n<h3 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h3><p>反射是框架的灵魂，主要是因为它赋予了在运行时分析类以及执行类中方法的能力。通过反射可以获取任意一个类的所有属性和方法，还可以调用这些方法和属性。</p>\n<ul>\n<li>优点：可以让代码更加灵活、为各种框架提供开箱即用的功能提供了便利。</li>\n<li>缺点：在运行时有了分析操作类的能力，这同样也增加了安全问题。比如可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译时）。另外，反射的性能也要稍差点，不过，对于框架来说实际是影响不大的。</li>\n</ul>\n<h3 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h3><p>注解使用了反射，可以看作是一种特殊的注释，主要用于修饰类、方法或者变量，提供某些信息供程序在编译或者运行时使用。</p>\n<p>注解只有被解析之后才会生效，常见的解析方法有两种：</p>\n<ul>\n<li>编译期直接扫描：编译器在编译代码的时候扫描对应的注解并处理，如某个方法使用 <code>@Override</code> 注解，编译器在编译的时候就会检测当前的方法是否重写了父类对应的方法。</li>\n<li>运行期通过反射处理：像框架中自带的注解(比如 <code>Spring</code> 框架的 <code>@Value</code>、<code>@Component</code>)都是通过反射来进行处理的。</li>\n</ul>\n<h3 id=\"序列化-反序列化\"><a href=\"#序列化-反序列化\" class=\"headerlink\" title=\"序列化&#x2F;反序列化\"></a>序列化&#x2F;反序列化</h3><p>如果需要持久化 Java 对象比如将 Java 对象保存在文件中，或者在网络传输 Java 对象，这些场景都需要用到序列化。</p>\n<ul>\n<li>序列化：将数据结构或对象转换成二进制字节流的过程</li>\n<li>反序列化：将在序列化过程中所生成的二进制字节流转换成数据结构或者对象的过程</li>\n</ul>\n<p>序列化和反序列化常见应用场景：</p>\n<ul>\n<li>对象在进行网络传输（比如远程方法调用 RPC 的时候）之前需要先被序列化，接收到序列化的对象之后需要再进行反序列化；</li>\n<li>将对象存储到文件之前需要进行序列化，将对象从文件中读取出来需要进行反序列化；</li>\n<li>将对象存储到数据库（如 Redis）之前需要用到序列化，将对象从缓存数据库中读取出来需要反序列化；</li>\n<li>将对象存储到内存之前需要进行序列化，从内存中读取出来之后需要进行反序列化。</li>\n</ul>\n<h3 id=\"语法糖\"><a href=\"#语法糖\" class=\"headerlink\" title=\"语法糖\"></a>语法糖</h3><p>语法糖（Syntactic sugar） 代指的是编程语言为了方便程序员开发程序而设计的一种特殊语法，这种语法对编程语言的功能并没有影响。实现相同的功能，基于语法糖写出来的代码往往更简单简洁且更易阅读。</p>\n<p>Java 中最常用的语法糖主要有<strong>switch语句</strong>、<strong>自动拆装箱</strong>、<strong>for-each循环</strong>、<strong>try-with-resources</strong> 语法、<strong>lambda 表达式</strong>等。</p>\n<h3 id=\"List-Set-Queue-Map区别\"><a href=\"#List-Set-Queue-Map区别\" class=\"headerlink\" title=\"List&#x2F;Set&#x2F;Queue&#x2F;Map区别\"></a>List&#x2F;Set&#x2F;Queue&#x2F;Map区别</h3><ul>\n<li>List: 存储的元素是有序的、可重复的。</li>\n<li>Set: 存储的元素不可重复的。</li>\n<li>Queue: 按特定的排队规则来确定先后顺序，存储的元素是有序的、可重复的。</li>\n<li>Map: 使用键值对（key-value）存储，key 是无序的、不可重复的，value 是无序的、可重复的，每个键最多映射到一个值。</li>\n</ul>\n<h3 id=\"如何选用集合\"><a href=\"#如何选用集合\" class=\"headerlink\" title=\"如何选用集合?\"></a>如何选用集合?</h3><p>主要根据集合的特点来选择合适的集合。如：</p>\n<ul>\n<li>需要根据键值获取到元素值时就选用 <code>Map</code> 接口下的集合，需要排序时选择 <code>TreeMap</code> ,不需要排序时就选择 <code>HashMap</code> ,需要保证线程安全就选用 <code>ConcurrentHashMap</code> 。</li>\n<li>只需要存放元素值时，就选择实现 <code>Collection</code> 接口的集合，需要保证元素唯一时选择实现 <code>Set</code> 接口的集合比如 <code>TreeSet</code> 或 <code>HashSet</code> ，不需要就选择实现 <code>List</code> 接口的比如 <code>ArrayList</code> 或 <code>LinkedList</code> ，然后再根据实现这些接口的集合的特点来选用。</li>\n</ul>\n<h3 id=\"为什么要使用集合？\"><a href=\"#为什么要使用集合？\" class=\"headerlink\" title=\"为什么要使用集合？\"></a>为什么要使用集合？</h3><p>在实际开发中，存储的数据类型多种多样且数量不确定。相较于数组，Java 集合提供了更灵活、更有效的方法来存储多个数据对象，其优势在于集合的大小可变、支持泛型、具有内建算法等。总的来说，Java 集合提高了数据的存储和处理灵活性，可以更好地适应现代软件开发中多样化的数据需求，并支持高质量的代码编写。</p>\n<h3 id=\"ArrayList和Array区别\"><a href=\"#ArrayList和Array区别\" class=\"headerlink\" title=\"ArrayList和Array区别\"></a>ArrayList和Array区别</h3><p><code>ArrayList</code> 内部基于动态数组实现，比 <code>Array</code>（静态数组） 更加灵活：</p>\n<ul>\n<li><code>ArrayList</code>可动态扩容&#x2F;缩容，<code>Array</code> 创建后不能改变长度。</li>\n<li><code>ArrayList</code> 可使用泛型确保类型安全，<code>Array</code> 则不可以。</li>\n<li><code>ArrayList</code> 中只能存对象，存基本类型数据时要用对应包装类(如<code>Integer</code>)。<code>Array</code> 可直接存储基本类型数据，也可存储对象。</li>\n<li><code>ArrayList</code> 提供增删改查等 API 操作方法，如 <code>add()</code>、<code>remove()</code>等。<code>Array</code> 只是一个固定长度数组，只能按照下标访问元素，无动态添加、删除元素能力。</li>\n<li><code>ArrayList</code>创建时不需指定大小，而<code>Array</code>创建时必须指定大小。</li>\n</ul>\n<h3 id=\"ArrayList和LinkedList区别\"><a href=\"#ArrayList和LinkedList区别\" class=\"headerlink\" title=\"ArrayList和LinkedList区别\"></a>ArrayList和LinkedList区别</h3><ul>\n<li><code>ArrayList</code> 底层基于<code>Object</code>数组实现的，<code>LinkedList</code> 是基于双向链表实现的(JDK1.6之前是循环链表，1.7改为双向链表)。<ul>\n<li><code>ArrayList</code>插入和删除元素的时间复杂度受元素位置的影响。<code>add()</code>方法默认在尾部添加元素为O(1)，在指定位置插入元素或者删除元素时间复杂度为O(n)，因为需要移动元素。</li>\n<li><code>LinkedList</code>插入和删除元素的时间复杂度为O(1)，因为只需要改变指针指向。如果要在指定位置插入或者删除元素，时间复杂度为O(n)，需要先移动到指定位置再插入和删除。</li>\n</ul>\n</li>\n<li>二者都是线程不安全的。</li>\n<li><code>ArrayList</code> 随机访问效率高(实现了<code>RandomAccess()</code>接口)，<code>LinkedList</code> 插入删除效率高。</li>\n<li>占用空间：<code>ArrayList</code> 主要体现在在列表的结尾会留一定的容量空间，<code>LinkedList</code> 每个元素占用空间比前者大(要存放直接后继和直接前驱以及数据)。</li>\n</ul>\n<blockquote>\n<p>项目中一般不会使用 <code>LinkedList</code>。</p>\n</blockquote>\n<h3 id=\"ArrayList和LinkedList插入-删除效率\"><a href=\"#ArrayList和LinkedList插入-删除效率\" class=\"headerlink\" title=\"ArrayList和LinkedList插入&#x2F;删除效率\"></a>ArrayList和LinkedList插入&#x2F;删除效率</h3><p><code>ArrayList</code></p>\n<ul>\n<li>头部插入&#x2F;删除：O(n), 需要移动元素。</li>\n<li>指定位置插入&#x2F;删除：O(n), 需要移动元素。</li>\n<li>尾部插入&#x2F;删除：O(1), 直接在尾部添加或删除元素。尾部插入时，当容量已到极限并需扩容时，需执行一次 O(n) 的操作将原数组复制到新的更大的数组中，然后再执行 O(1) 的操作添加元素。<br><code>LinkedList</code></li>\n<li>头部插入&#x2F;删除：O(1), 只需改变指针指向。</li>\n<li>尾部插入&#x2F;删除：O(1), 只需改变指针指向。</li>\n<li>指定位置插入&#x2F;删除：O(n), 需要先移动到指定位置再插入和删除。</li>\n</ul>\n<h3 id=\"比较HashSet-LinkedHashSet-TreeSet\"><a href=\"#比较HashSet-LinkedHashSet-TreeSet\" class=\"headerlink\" title=\"比较HashSet&#x2F;LinkedHashSet&#x2F;TreeSet\"></a>比较HashSet&#x2F;LinkedHashSet&#x2F;TreeSet</h3><ul>\n<li>都是 <code>Set</code> 接口的实现类，都保证元素唯一，且都不是线程安全的。</li>\n<li>主要区别在于底层数据结构不同。<ul>\n<li><code>HashSet</code> 底层是哈希表(<code>HashMap</code>)。</li>\n<li><code>LinkedHashSet</code> 底层是链表和哈希表，元素的插入和取出顺序满足 FIFO。</li>\n<li><code>TreeSet</code> 底层数据结构是红黑树，元素是有序的，排序的方式有自然排序和定制排序。</li>\n</ul>\n</li>\n<li>底层数据结构不同导致三者应用场景不同。<code>HashSet</code> 用于不需要保证元素插入和取出顺序的场景，<code>LinkedHashSet</code> 用于保证元素的插入和取出顺序满足 FIFO 的场景，<code>TreeSet</code> 用于支持对元素自定义排序规则的场景。</li>\n</ul>\n<h3 id=\"Queue-Deque区别\"><a href=\"#Queue-Deque区别\" class=\"headerlink\" title=\"Queue&#x2F;Deque区别\"></a>Queue&#x2F;Deque区别</h3><ul>\n<li><code>Queue</code> 是单端队列，只能从一端插入元素，另一端删除元素，实现上遵循 先进先出(FIFO)规则。</li>\n<li><code>Deque</code> 是双端队列，在队列的两端均可以插入或删除元素，其还提供有 <code>push()</code>等方法，可用于模拟栈。</li>\n</ul>\n<h3 id=\"ArrayDeque-LinkedList区别\"><a href=\"#ArrayDeque-LinkedList区别\" class=\"headerlink\" title=\"ArrayDeque&#x2F;LinkedList区别\"></a>ArrayDeque&#x2F;LinkedList区别</h3><ul>\n<li><code>ArrayDeque</code> 基于<strong>可变长数组</strong>和<strong>双指针</strong>来实现，而 <code>LinkedList</code> 通过链表来实现。</li>\n<li><code>ArrayDeque</code> 不能存储 <code>NULL</code> 数据，<code>LinkedList</code> 能。</li>\n<li><code>ArrayDeque</code> 插入时可能存在扩容过程, 不过均摊后的插入操作依然为 O(1)。虽然 <code>LinkedList</code> 不需要扩容，但每次插入数据时都要申请新的堆空间，均摊性能相比更慢。</li>\n</ul>\n<p>从性能的角度上，选用 <code>ArrayDeque</code> 来实现队列要比 <code>LinkedList</code> 更好。此外，<code>ArrayDeque</code> 也可以用于实现栈。</p>\n<h3 id=\"PriorityQueue\"><a href=\"#PriorityQueue\" class=\"headerlink\" title=\"PriorityQueue\"></a>PriorityQueue</h3><p>PriorityQueue 中元素出队顺序是与优先级相关的，即总是优先级最高的元素先出队。</p>\n<ul>\n<li>利用了二叉堆的数据结构来实现的，底层使用可变长的数组来存储数据</li>\n<li>通过堆元素的上浮和下沉，实现了在 O(logn) 的时间复杂度内插入元素和删除堆顶元素。</li>\n<li>是非线程安全的，且不支持存储 <code>NULL</code> 和 <code>non-comparable</code> 的对象。</li>\n<li>默认是小顶堆，但可以接收一个 <code>Comparator</code> 作为构造参数，从而来自定义元素优先级的先后。</li>\n</ul>\n<blockquote>\n<p><code>PriorityQueue</code> 在面试中可能更多的会出现在手撕算法的时候，典型例题包括堆排序、求第 K 大的数、带权图的遍历等，所以需要会熟练使用才行。</p>\n</blockquote>\n<h3 id=\"BlockingQueue及其实现类\"><a href=\"#BlockingQueue及其实现类\" class=\"headerlink\" title=\"BlockingQueue及其实现类\"></a>BlockingQueue及其实现类</h3><p><code>BlockingQueue</code>(阻塞队列)是一个接口，其支持当队列没有元素时一直阻塞，直到有元素；还支持如果队列已满，一直等到队列可以放入新元素时再放入。常用于<strong>生产者-消费者模型</strong>中，生产者线程向队列中添加数据，消费者线程从队列中取出数据进行处理。</p>\n<p><strong>实现类</strong></p>\n<ul>\n<li><code>ArrayBlockingQueue</code>：使用数组实现的有界阻塞队列。在创建时需要指定容量大小，并支持公平和非公平两种方式的锁访问机制。</li>\n<li><code>LinkedBlockingQueue</code>：使用单向链表实现的可选有界阻塞队列。在创建时可以指定容量大小，如果不指定则默认为Integer.MAX_VALUE。和ArrayBlockingQueue不同的是， 它仅支持非公平的锁访问机制。</li>\n<li><code>PriorityBlockingQueue</code>：支持优先级排序的无界阻塞队列。元素必须实现<code>Comparable</code>接口且不能插入 <code>null</code> 元素。</li>\n<li><code>SynchronousQueue</code>：同步队列，是一种不存储元素的阻塞队列。每个插入操作都必须等待对应的删除操作，反之删除操作也必须等待插入操作。通常用于线程之间的直接传递数据。</li>\n<li><code>DelayQueue</code>：延迟队列，其中的元素只有到了其指定的延迟时间，才能够从队列中出队。</li>\n</ul>\n<h3 id=\"ArrayBlockingQueue-LinkedBlockingQueue区别\"><a href=\"#ArrayBlockingQueue-LinkedBlockingQueue区别\" class=\"headerlink\" title=\"ArrayBlockingQueue&#x2F;LinkedBlockingQueue区别\"></a>ArrayBlockingQueue&#x2F;LinkedBlockingQueue区别</h3><p>二者是Java并发中常用的两种阻塞队列实现，都是线程安全的。区别：</p>\n<ul>\n<li>底层实现：<code>ArrayBlockingQueue</code> 基于数组实现，而 <code>LinkedBlockingQueue</code> 基于链表实现。</li>\n<li>是否有界：<code>ArrayBlockingQueue</code> 是有界队列，必须在创建时指定容量大小。<code>LinkedBlockingQueue</code> 创建时可以不指定容量大小，默认是Integer.MAX_VALUE，也就是无界的。但也可以指定队列大小，从而成为有界的。</li>\n<li>锁是否分离：<code>ArrayBlockingQueue</code>中的锁是没有分离的，即生产和消费用的是同一个锁；<code>LinkedBlockingQueue</code>中的锁是分离的，即生产用的是<code>putLock</code>，消费是<code>takeLock</code>，这样可以防止生产者和消费者线程之间的锁争夺。</li>\n<li>内存占用：<code>ArrayBlockingQueue</code> 需要提前分配数组内存，而 <code>LinkedBlockingQueue</code> 则是动态分配链表节点内存。因此，<code>ArrayBlockingQueue</code> 在创建时就会占用一定的内存空间，且往往申请的内存比实际所用的内存更大，而<code>LinkedBlockingQueue</code> 则是根据元素的增加而逐渐占用内存空间。</li>\n</ul>\n<h3 id=\"堆和栈的区别\"><a href=\"#堆和栈的区别\" class=\"headerlink\" title=\"堆和栈的区别\"></a>堆和栈的区别</h3><p><a href=\"https://blog.csdn.net/qq_44944221/article/details/126692973\">https://blog.csdn.net/qq_44944221/article/details/126692973</a></p>\n<ul>\n<li>栈：是运行时单位，代表逻辑，内含基本数据类型和堆中的对象引用，所在区域连续，没有碎片；</li>\n<li>堆：是存储单元，代表着数据，可以被多个栈共享，所在区域不连续，有碎片；</li>\n</ul>\n<p>区别:</p>\n<ul>\n<li>功能不同：栈内存用来存储局部变量和方法调用，而堆内存用存储Java中的对象；无论是成员变量、局部变量、还是类变量他们指向的对象都存储在堆内存中；</li>\n<li>共享性不同：栈是线程私有，而堆是线程共享；</li>\n<li>异常错误不同：当内存不足时；栈抛出的是<code>StackOverFlowError</code>异常，而堆抛出的是<code>OutOfMemoryError</code>；</li>\n<li>空间大小不同：堆空间大小远远大于栈的内存空间。</li>\n</ul>\n<h3 id=\"进程-线程-协程\"><a href=\"#进程-线程-协程\" class=\"headerlink\" title=\"进程&#x2F;线程&#x2F;协程\"></a>进程&#x2F;线程&#x2F;协程</h3><p><a href=\"https://blog.csdn.net/m0_60505735/article/details/131047046\">https://blog.csdn.net/m0_60505735/article/details/131047046</a><br><a href=\"https://blog.csdn.net/weixin_49199646/article/details/109210547\">https://blog.csdn.net/weixin_49199646/article/details/109210547</a><br>进程： 进程是程序的一次执行过程，是系统资源分配和独立运行的最小单位；<br>线程： 线程是进程的一个执行单元，是任务调度和系统执行的最小单位；<br>协程： 协程是一种用户态的轻量级线程，协程的调度完全由用户控制。<br><strong>进程与线程的区别</strong></p>\n<ul>\n<li>根本区别： 进程是操作系统资源分配和独立运行的最小单位；线程是任务调度和系统执行的最小单位。</li>\n<li>地址空间区别： 每个进程都有独立的地址空间，一个进程崩溃不影响其它进程；一个进程中的多个线程共享该 进程的地址空间，一个线程的非法操作会使整个进程崩溃。</li>\n<li>上下文切换开销区别： 每个进程有独立的代码和数据空间，进程之间上下文切换开销较大；线程组共享代码和数据空间，线程之间切换的开销较小。</li>\n</ul>\n<p><strong>进程与线程的联系</strong><br>一个进程由共享空间（包括堆、代码区、数据区、进程空间和打开的文件描述符）和一个或多个线程组成，各个线程之间共享进程的内存空间。而一个标准的线程由线程ID、程序计数器PC、寄存器和栈组成。</p>\n<p><em>进程与线程的选择</em>*</p>\n<ul>\n<li>线程的创建或销毁的代价比进程小，需要频繁创建和销毁时应优先选用线程；</li>\n<li>线程上下文切换的速度比进程快，需要大量计算时优先选用线程；</li>\n<li>线程在CPU上的使用效率更高，需要多核分布时优先选用线程，需要多机分布时优先选用进程</li>\n<li>线程的安全性、稳定性没有进程好，需要更稳定安全时优先使用进程。</li>\n</ul>\n<p>综上，线程创建和销毁的代价低、上下文切换速度快、对系统资源占用小、对CPU的使用效率高，因此一般情况下优先选择线程进行高并发编程；但线程组的所有线程共用一个进程的内存空间，安全稳定性相对较差，若其中一个线程发生崩溃，可能会使整个进程，因此对安全稳定性要求较高时，需要优先选择进程进行高并发编程。</p>\n<h3 id=\"强引用-软引用-弱引用-虚引用\"><a href=\"#强引用-软引用-弱引用-虚引用\" class=\"headerlink\" title=\"强引用&#x2F;软引用&#x2F;弱引用&#x2F;虚引用\"></a>强引用&#x2F;软引用&#x2F;弱引用&#x2F;虚引用</h3><p><a href=\"https://blog.csdn.net/u013718071/article/details/134789666\">https://blog.csdn.net/u013718071/article/details/134789666</a><br>Java中的引用类型主要分为强引用、软引用、弱引用和虚引用，它们之间的区别主要体现在垃圾回收的行为上。</p>\n<ul>\n<li>强引用（Strong Reference）：这是使用最普遍和默认的引用类型。如果一个对象具有强引用，那么垃圾回收器就永远不会回收它。当内存空间不足，Java虚拟机宁愿抛出 <code>OutOfMemoryError</code> 错误，也不会回收这种对象。</li>\n<li>软引用（Soft Reference）：软引用是用来描述一些还有用但并非必需的对象。只有当JVM认为内存不足时，才会去剔除这些基于软引用的对象。在Java中，可以用 <code>SoftReference</code> 类来实现软引用。</li>\n<li>弱引用（Weak Reference）：弱引用则是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾回收发生为止。当垃圾回收器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在Java中，可以用 <code>WeakReference</code> 类来实现弱引用。</li>\n<li>虚引用（Phantom Reference）：虚引用主要用来跟踪对象被垃圾回收的活动。虚引用与其他几种引用的一个区别在于：虚引用必须和引用队列（ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，将这个虚引用加入到与之关联的引用队列中。</li>\n</ul>\n<p>以上四种引用类型，强度依次递减：强引用最强，虚引用最弱。强引用对对象的生命周期没有影响，而软引用、弱引用和虚引用可以让对象在系统内存不足时被垃圾回收器回收。软引用和弱引用可以通过Java提供的相应类来创建，而虚引用需要借助 <code>PhantomReference</code> 类来实现。这些不同类型的引用给提供了更灵活的内存控制机制，用于满足不同的需求。</p>\n<h3 id=\"垃圾回收机制\"><a href=\"#垃圾回收机制\" class=\"headerlink\" title=\"垃圾回收机制\"></a>垃圾回收机制</h3><h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><h2 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h2><h2 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h2><h2 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h2><h2 id=\"spring-boot-cloud\"><a href=\"#spring-boot-cloud\" class=\"headerlink\" title=\"spring boot&#x2F;cloud ???\"></a>spring boot&#x2F;cloud ???</h2><h2 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h2><h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h2 id=\"面经\"><a href=\"#面经\" class=\"headerlink\" title=\"面经\"></a>面经</h2>","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<blockquote>\n<p>准备在这篇文章中，先详细分析简历中可能会被问到的问题，然后总结一下 Java基础、网络、操作系统、数据库等内容的精简答案，最后再回顾一下每次面试的面经。</p>\n</blockquote>\n<h2 id=\"简历相关\"><a href=\"#简历相关\" class=\"headerlink\" title=\"简历相关\"></a>简历相关</h2><h3 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h3><p>面试官您好，我叫陈温鹏，就读于南京理工大学软件工程专业，学位是学硕，这次应聘的是 <strong>Java后端开发岗位</strong>。</p>\n<p>我呢，研一的时候积极参加开源社区建设，先参加了Casbin社区一个线上实习，担任社区维护者，日常工作会解决社区 issue，跟踪解决用户需求，修bug以及完善相关文档；然后在研一暑假三个月时间中了一个中科院和 casbin 社区联合举办的一个开源项目，主要的工作是完善社区整个大前端系统，包括 web，移动端功能完善，以及为社区开发了一款支持通用2FA的移动端app。除此之外，我还参与过国家电网经济研究院的一个项目。 这几段项目实习经历锻炼了我文档阅读、编写的能力，并在代码规范、开发流程等技能上获得提升。</p>\n<p>然后我呢，我评价觉得自己是一个学习能力很强的人，可以比较快速的学习并适应新的环境和技术栈。 最后感谢 xx 给我这次面试机会，我也十分希望能进入 xx ，与公司共同成长进步！</p>\n<h3 id=\"专业技能\"><a href=\"#专业技能\" class=\"headerlink\" title=\"专业技能\"></a>专业技能</h3><h3 id=\"Casbin明日之星实习\"><a href=\"#Casbin明日之星实习\" class=\"headerlink\" title=\"Casbin明日之星实习\"></a>Casbin明日之星实习</h3><ol>\n<li><p>在实习期间负责处理社区中导师分配的issue。由于Casbin的核心访问控制功能已经比较完善，且有很多仓库及sdk，所以issue的提交并不单单围绕主仓库，我的职责更多的是放在完善sdk上面。具体就是使用Casdoor的RESTful API接口，然后使用其他语言如JS、Java、Python来调用接口实现登录登出、对相关用户信息、资源等进行增删改查，这就是其他语言的sdk。当然，随着主仓库的相关接口或者功能更新，sdk也要做出相应的调整。</p>\n</li>\n<li><p>有时候我也负责Casdoor中的issue或者bug修复，Casdoor 是基于 Casbin 的单点登录（SSO）和权限管理系统，用于管理用户身份验证和访问权限。它提供了用户注册、登录、角色管理、权限控制等功能，可以与 Casbin 搭配使用，实现全面的身份验证和权限管理解决方案。这个系统使用react作为前端，beego作为后端，实现相关功能。</p>\n</li>\n<li><p>另外就是负责编写演示文档了，社区中某些开发文档不够完善，需要自己测试使用某些功能后，写出教程文档。</p>\n</li>\n</ol>\n<h3 id=\"中科院开源之夏项目\"><a href=\"#中科院开源之夏项目\" class=\"headerlink\" title=\"中科院开源之夏项目\"></a>中科院开源之夏项目</h3><p><strong>简介</strong><br>Casdoor单点登录系统⼤前端项⽬包括ios、flutter、uinapp、⼩程序等sdk的开发、功能的增强， 对微信等第三⽅登录的移动端⽅式的⽀持。开发⼤前端应⽤的主要⽬的是为了提⾼⽤户体验和增加应⽤的可访问 性，可以让⽤户在不同的设备和应⽤中都能够⽅便地使⽤应⽤，提⾼⽤户的满意度和使⽤率。同时，⼤前端应⽤也可以为开发者提供更多的开发选项和⼯具，提⾼开发效率和应⽤的可维护性。</p>\n<p><strong>项目诉求</strong></p>\n<ol>\n<li><p>对微信第三方登录的移动端支持</p>\n<ul>\n<li>在casdoor移动网页端，点击微信第三方登录按钮，弹出的却是扫二维码登录，这在移动端显然是不合理的，需要的是点击微信第三方登录后，跳转到微信app进行认证授权登录，用户确认后返回移动网页端。</li>\n</ul>\n</li>\n<li><p>对flutter、react-native、unity等sdk的开发及功能的增强</p>\n<ul>\n<li>对flutter-sdk的增强如第一点</li>\n</ul>\n</li>\n<li><p>临时加上的开发casdoor-app诉求，对标Google Authenticator</p>\n</li>\n</ol>\n<p><strong>技术细节</strong></p>\n<ol>\n<li><p>在flutter-sdk中通过截取session中的url和callbackURLscheme判断其中是否有”weixin”字段，如果有，则进行微信第三方原生授权登录；</p>\n<ul>\n<li><p>使用WKWebView替换原本的ASWebAuthenticationSession，对ios认证部分进行重写，以支持对每个跳转的链接进行监听；</p>\n</li>\n<li><p>使用rb脚本文件自动化配置微信SDK导入后xcode中xcodeproj文件的相关配置；</p>\n</li>\n<li><p>接入xcframework的微信SDK，使用obj-c重写原本的swift代码，以使用微信SDK；</p>\n</li>\n</ul>\n</li>\n</ol>\n<p>接下来根据微信SDK开发文档进行配置即可。由于配置微信SDK需要苹果开发者账号以配置universal Link，需付费几百美元，所以最终代码并未实际测试。</p>\n<ol start=\"2\">\n<li>分为两部分<ol>\n<li>casdoor-unity-example<ul>\n<li>在github上开源的一个小游戏ValleyOfCubes_Unity3D (方块之谷)的基础上，演示如何使用casdoor RESTful API进行web SSO(Single Sign On) 登录；</li>\n<li>以C#为开发语言，调用casdoor-dotnet-sdk进行web SSO 登录；</li>\n<li>在casdoor服务端配置好应用的ClientCode和ClientSecret后，在Unity3D中向服务端发送认证请求(CilentCode等)，解析返回的token，就可以得到用户信息，也可以使用session保存token等信息。</li>\n<li>认证过程中还使用到了unity-webview这个由格力公司一个团队开发的小组件，因为它是开源免费的。</li>\n</ul>\n</li>\n<li>casdoor-react-native-sdk、example<ul>\n<li>以react-native作为框架，使用casdoor RESTful API进行web SSO 登录；</li>\n<li>react-native与JS不同的点在于在JS中，使用sessionStorage保存临时的session，主要是针对web端的，是同步的；react-native中与之类似的一个组件叫AsyncStorage，虽然功能大致相同，但却是异步的，导致不能共用一个sdk，所以就着手写了一个react-native sdk。</li>\n<li>sdk采用PKCE(Proof Key for Code Exchange, 代码交换的证明密钥)这种更安全的方式获取token。PKCE是⼀种⽤于增强OAuth 2.0授权码流程安全性的协议扩展。这种协议使得在客户端不需要 clientSecret 就能获取到 token ，它依赖的是 code_challenge 和 code_verifier 。</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>casdoor-app 采用react-native框架，在授权登录功能上使用了react-native-sdk。<ul>\n<li>casdoor-app使用开源的totp-generator作为TOTP(Time-based One Time Passwords)码生成器，默认使用SHA-256(Secure Hash Algorithm-256)哈希算法，也可以支持SHA384、SHA512等其他多种哈希算法。</li>\n<li>casdoor-app支持输入密钥和扫码生成OTP，目前已完成核心功能开发。</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>SHA（Secure Hash Algorithm，安全哈希算法）是一系列的哈希算法，它们用于将数据转换成固定长度的唯一标识符，通常用于数据完整性验证、数字签名、密码学安全等领域。SHA 算法属于密码学中的哈希函数，而不是加密算法。</p>\n</blockquote>\n<p><strong>总结</strong><br>参加开源活动对我的锻炼是非常大的，我觉得虽然每个小例子和sdk涉及相关知识都没那么难，但是他难就难在你从没接触过，要在短时间内学习，并将之应用。在短时间内学习掌握一种领域的知识，我觉得这才是我参与开源项目收获最大的经验。</p>\n<h3 id=\"Casbin-Casdoor-介绍\"><a href=\"#Casbin-Casdoor-介绍\" class=\"headerlink\" title=\"Casbin Casdoor 介绍\"></a>Casbin Casdoor 介绍</h3><blockquote>\n<p>Casbin是一个强大的访问控制库，用于实现权限管理和访问控制的功能。它使用基于策略（Policy-Based）的访问控制模型，支持各种访问控制模型（如 ACL、RBAC、ABAC 等），并提供了丰富的功能和灵活的配置选项，使开发者可以轻松地实现精细化的权限管理。<br>Casbin 的主要特点包括：</p>\n<ol>\n<li><strong>多种访问控制模型支持</strong>：包括基于角色的访问控制（RBAC）、基于属性的访问控制（ABAC）、访问控制列表（ACL）等，满足不同场景的权限管理需求。</li>\n<li><strong>灵活的策略管理</strong>：通过策略文件进行权限管理，支持多种格式（如 CSV、JSON、数据库等），方便管理和配置访问策略。</li>\n<li><strong>细粒度的权限控制</strong>：支持精细到 API 级别的权限控制，可以根据需求对用户和资源进行精确控制。</li>\n<li><strong>跨语言支持</strong>：Casbin 提供了多种语言的实现，如 Go、Java、Node.js、Python 等，方便开发者在不同的技术栈中使用 Casbin 进行权限管理。</li>\n</ol>\n</blockquote>\n<blockquote>\n<p>Casdoor 是基于 Casbin 的单点登录（SSO）和权限管理系统，用于管理用户身份验证和访问权限。它提供了用户注册、登录、角色管理、权限控制等功能，可以与 Casbin 搭配使用，实现全面的身份验证和权限管理解决方案。</p>\n<ol>\n<li><strong>单点登录（SSO）</strong>：支持统一身份验证，用户只需登录一次即可访问多个应用系统。</li>\n<li><strong>用户管理</strong>：提供用户注册、登录、密码找回等功能，支持用户角色和权限的管理。</li>\n<li><strong>权限控制</strong>：与 Casbin 集成，实现灵活的权限控制和策略管理，可以根据用户角色和权限设置不同的访问策略。</li>\n<li><strong>开源社区</strong>：Casdoor 是开源项目，提供了完整的文档和示例代码，同时也有活跃的社区支持，方便开发者使用和定制。</li>\n</ol>\n</blockquote>\n<h3 id=\"RESTful-API\"><a href=\"#RESTful-API\" class=\"headerlink\" title=\"RESTful API\"></a>RESTful API</h3><blockquote>\n<p>RESTful API（Representational State Transfer API）是一种基于REST架构风格的Web服务接口。REST是一种架构风格，用于设计网络应用，使其更轻量、性能更高且更易于扩展。RESTful API利用HTTP协议作为通信标准，并遵循REST架构原则。<br>REST架构原则：</p>\n<ul>\n<li>无状态性：每个请求从客户端到服务器必须包含足够的信息以使服务器理解请求。服务器不存储客户端的上下文，所有状态信息由客户端维护。</li>\n<li>统一接口： 资源：通过URL定位资源（通常是名词，如 &#x2F;users 表示用户资源）。 操作：使用标准HTTP方法对资源进行操作： GET：获取资源 POST：创建资源 PUT：更新资源 DELETE：删除资源</li>\n<li>可缓存性：服务器的响应可以被标记为可缓存或不可缓存，以提高性能。</li>\n<li>分层系统：客户端不需要直接与服务器交互，可能会通过中间服务器（如代理、负载均衡器等）来提升系统的可扩展性和安全性。</li>\n<li>按需代码：在某些情况下，服务器可以返回可执行代码（如JavaScript），使客户端能够执行。</li>\n</ul>\n<p>特点：</p>\n<ul>\n<li>资源导向：一切皆资源，每个资源使用唯一的URL表示。 </li>\n<li>标准化操作：利用HTTP动词来描述对资源的操作。 </li>\n<li>状态表示：服务器在每次请求中发送所需的状态信息，以便客户端理解和使用。 </li>\n<li>客户端-服务器架构：客户端和服务器职责分离，提升了系统的可维护性和可扩展性。 </li>\n<li>无状态交互：每个请求独立，不依赖于之前的请求。</li>\n</ul>\n<p>优点 </p>\n<ul>\n<li>简单易懂：遵循标准的HTTP协议和方法，便于理解和使用。 </li>\n<li>性能高：无状态和可缓存性提高了性能。 </li>\n<li>可扩展性：分层系统和明确的资源导向使得系统易于扩展。 </li>\n<li>灵活性：支持多种数据格式（如JSON、XML），适应不同客户端需求。</li>\n</ul>\n<p>缺点 </p>\n<ul>\n<li>无状态：每个请求都需要携带所有信息，可能会导致开销增加。</li>\n<li>缺乏标准化：虽然REST原则明确，但实际实现可能会有差异，导致互操作性问题。 </li>\n<li>适用于简单操作：对于复杂事务处理，REST可能不如其他协议（如GraphQL）高效。</li>\n</ul>\n<p>RESTful API因其简单、灵活和高效，已经成为现代Web服务开发的主流选择。</p>\n</blockquote>\n<h3 id=\"国家电网项目\"><a href=\"#国家电网项目\" class=\"headerlink\" title=\"国家电网项目\"></a>国家电网项目</h3><p><strong>简介</strong></p>\n<p>自己导师接的项目，江苏省国家电网智能诊断数据分析平台</p>\n<p><strong>项目诉求</strong></p>\n<ul>\n<li>对相应指标进行增删改查</li>\n<li>可以导入、导出一些excel表格</li>\n<li>对数据进行智能诊断分析</li>\n</ul>\n<p><strong>技术细节</strong></p>\n<p>react、Antd、Flask、mongodb</p>\n<h3 id=\"江南布衣实习\"><a href=\"#江南布衣实习\" class=\"headerlink\" title=\"江南布衣实习\"></a>江南布衣实习</h3><p>在公司实习期间，我担任网络工程师实习生，主要负责以下工作：</p>\n<ol>\n<li><p><strong>新入职员工设备管理</strong>：负责<u>新入职员工的电脑设备接入公司内网，包括网络配置、安装必要软件以及配备相应办公区域的打印机驱动程序。</u>通过有效的网络设备管理，确保新员工能够快速融入公司工作环境，并顺利开始工作。</p>\n</li>\n<li><p><strong>离职员工设备回收和资料销毁</strong>：<u>负责处理离职员工设备的回收工作，包括安全地清除设备上的敏感数据并销毁资料，保障公司数据安全和隐私保护。</u></p>\n</li>\n<li><p><strong>订货会期间设备组装和网络连接</strong>：<u>在公司订货会期间，负责组装现场所需的大量电脑及相关打印设备，并确保它们在网络上正常连接，打印设备能够顺利工作。</u>通过良好的设备管理和网络连接调试，保证了订货会的顺利进行和信息传输的稳定性。</p>\n</li>\n<li><p><strong>员工设备报修响应与问题解决</strong>：<u>及时响应员工设备报修请求，并通过重装系统、更换硬件设备等手段迅速解决问题</u>，确保员工工作不受影响，提高公司办公效率和网络设备的稳定性。</p>\n</li>\n</ol>\n<p>通过这些工作，我积累了丰富的网络设备管理、故障排除和应急响应的经验，对计算机硬件、网络有了更深入的理解和实践。</p>\n<blockquote>\n<p><strong>公司内网</strong>：指的是一个局域网（LAN），用于连接公司内部各种设备和资源，如电脑、打印机、服务器等，使它们可以相互通信和共享资源。公司内网通常由路由器、交换机等设备组成，通过内部网络连接。<br>要使一台电脑接入公司内网，经过以下步骤：</p>\n<ol>\n<li><strong>网络配置</strong>：打开电脑的网络设置，配置IP地址、子网掩码、网关和DNS服务器等网络参数。这些参数通常由网络管理员提供或在公司内部网络设备中配置。</li>\n<li><strong>身份验证</strong>：根据公司的网络策略，需要先在管理员处创建账号密码，然后在需要接入的电脑上输入用户名和密码进行身份验证，以获得对公司内部资源的访问权限。</li>\n<li><strong>访问内部资源</strong>：一旦电脑成功接入公司内网，就可以通过内部网络访问共享文件夹、打印机、应用程序和其他资源。</li>\n</ol>\n</blockquote>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><h3 id=\"Java和C-的区别\"><a href=\"#Java和C-的区别\" class=\"headerlink\" title=\"Java和C++的区别\"></a>Java和C++的区别</h3><p>Java 和 C++ 都是面向对象的语言，都支持封装、继承和多态，但还是有很多不同的地方：</p>\n<ul>\n<li>Java 不提供指针来直接访问内存，程序内存更加安全，C++ 支持指针；</li>\n<li>Java 的类是单继承的，C++ 支持多继承； Java 的接口可以多继承；</li>\n<li>Java 有自动内存管理垃圾回收机制(GC)，而C++ 没有垃圾回收机制，程序员需要手动释放无用内存；</li>\n<li>C++ 支持方法重载和操作符重载，Java 只支持方法重载（操作符重载增加了复杂性，与Java最初的设计思想不符）。</li>\n</ul>\n<blockquote>\n<p>C 是面向过程的语言，C++ 既支持面向对象也支持面向过程，算是半面向对象语言，Java 是面向对象的语言。</p>\n</blockquote>\n<h3 id=\"移位运算符\"><a href=\"#移位运算符\" class=\"headerlink\" title=\"移位运算符\"></a>移位运算符</h3><p><code>&lt;&lt;</code>: 左移运算符，向左移若干位，高位丢弃，低位补零。<code>x &lt;&lt; 1</code>,相当于 x 乘以 2(不溢出的情况下)。<br><code>&gt;&gt;</code>: 带符号右移，向右移若干位，高位补符号位，低位丢弃。正数高位补 0,负数高位补 1。<code>x &gt;&gt; 1</code>,相当于 x 除以 2。<br><code>&gt;&gt;&gt;</code>: 无符号右移，忽略符号位，空位都以 0 补齐。</p>\n<p>使用 <code>&lt;&lt;</code>、 <code>&gt;&gt;</code> 和<code>&gt;&gt;&gt;</code>转换成的指令码运行起来会更高效些。由于 <code>double</code>，<code>float</code> 在二进制中的表现比较特殊，因此不能来进行移位操作。移位操作符实际上支持的类型只有 <code>int</code> 和 <code>long</code>，编译器在对 <code>short</code>、<code>byte</code>、<code>char</code> 类型进行移位前，都会将其转换为<code>int</code>类型再操作。</p>\n<p>如果移位的位数超过数值所占有的位数会怎样？<br>当 <code>int</code> 类型左移&#x2F;右移位数大于等于 32 位操作时，会先 <strong>求余（%）</strong> 后再进行左移&#x2F;右移操作。也就是说左移&#x2F;右移 32 位相当于不进行移位操作（32%32&#x3D;0），左移&#x2F;右移 42 位相当于左移&#x2F;右移 10 位（42%32&#x3D;10）。当 <code>long</code> 类型进行左移&#x2F;右移操作时，由于 <code>long</code> 对应的二进制是 64 位，因此求余操作的基数也变成了 64。也就是说：<code>x&lt;&lt;42</code>等同于<code>x&lt;&lt;10</code>，<code>x&gt;&gt;42</code>等同于<code>x&gt;&gt;10</code>，<code>x&gt;&gt;&gt;42</code>等同于<code>x&gt;&gt;&gt;10</code>。</p>\n<h3 id=\"基本数据类型-包装类型-及区别\"><a href=\"#基本数据类型-包装类型-及区别\" class=\"headerlink\" title=\"基本数据类型&#x2F;包装类型 及区别\"></a>基本数据类型&#x2F;包装类型 及区别</h3><p><strong>8种基本数据类型</strong></p>\n<ul>\n<li>6 种数字类型： <ul>\n<li>4 种整数型：<code>byte</code>、<code>short</code>、<code>int</code>、<code>long</code></li>\n<li>2 种浮点型：<code>float</code>、<code>double</code></li>\n</ul>\n</li>\n<li>1 种字符类型：<code>char</code></li>\n<li>1 种布尔型：<code>boolean</code></li>\n</ul>\n<blockquote>\n<p>注意：Java 里使用 <code>long</code> 类型的数据一定要在数值后面加上 <code>L</code> ，否则将作为整型解析。<br><code>char a = &#39;h&#39;</code>，<code>char</code>: 单引号，<code>String a = &quot;hello&quot;</code>，<code>String</code>: 双引号。</p>\n</blockquote>\n<p><strong>8种包装类型</strong><br><code>Byte</code>、<code>Short</code>、<code>Integer</code>、<code>Long</code>、<code>Float</code>、<code>Double</code>、<code>Character</code>、<code>Boolean</code> 。</p>\n<p><strong>区别</strong></p>\n<ul>\n<li>用途：基本类型用来定义常量和局部变量，包装类型可用于泛型，而基本类型不可以。</li>\n<li>存储方式：基本数据类型的局部变量存放在 Java 虚拟机栈中的局部变量表中，基本数据类型的成员变量（未被 <code>static</code> 修饰 ）存放在 Java 虚拟机的堆中。包装类型属于对象类型，几乎所有对象实例都存在于堆中。</li>\n<li>占用空间：相比于包装类型（对象类型）， 基本数据类型占用的空间往往非常小。</li>\n<li>默认值：成员变量包装类型不赋值就是 <code>null</code> ，而基本类型有默认值且不是 <code>null</code>。</li>\n<li>比较方式：对于基本数据类型来说，<code>==</code> 比较的是值。对于包装数据类型来说，<code>==</code> 比较的是对象的内存地址。所有整型包装类对象之间值的比较，全部使用 <code>equals()</code> 方法。</li>\n</ul>\n<h3 id=\"包装类的缓存机制\"><a href=\"#包装类的缓存机制\" class=\"headerlink\" title=\"包装类的缓存机制\"></a>包装类的缓存机制</h3><p>Java 基本数据类型的包装类型的大部分都用到了缓存机制来提升性能。<code>Byte</code>,<code>Short</code>,<code>Integer</code>,<code>Long</code> 这 4 种包装类默认创建了数值 [-128，127] 的相应类型的缓存数据，<code>Character</code> 创建了数值在 [0,127] 范围的缓存数据，<code>Boolean</code> 直接返回 <code>True</code> or <code>False</code>。</p>\n<h3 id=\"什么是自动拆装箱\"><a href=\"#什么是自动拆装箱\" class=\"headerlink\" title=\"什么是自动拆装箱\"></a>什么是自动拆装箱</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Integer</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;  <span class=\"comment\">//装箱</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> i;   <span class=\"comment\">//拆箱</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>装箱：将基本类型用它们对应的引用类型包装起来；</li>\n<li>拆箱：将包装类型转换为基本数据类型；</li>\n</ul>\n<p>从字节码来看，装箱调用包装类的 <code>valueOf()</code> 方法，拆箱调用 <code>xxxValue()</code> 方法。</p>\n<h3 id=\"如何解决浮点数运算的精度丢失问题\"><a href=\"#如何解决浮点数运算的精度丢失问题\" class=\"headerlink\" title=\"如何解决浮点数运算的精度丢失问题\"></a>如何解决浮点数运算的精度丢失问题</h3><p>无限循环的小数存储在计算机时，只能被截断，所以就会导致小数精度发生损失的情况。<code>BigDecimal</code> 可以实现对浮点数的运算，不会造成精度丢失。大部分需要浮点数精确运算结果的业务场景（比如涉及到钱的场景）都是通过 <code>BigDecimal</code> 来做的。</p>\n<h3 id=\"局部变量-成员变量-静态变量\"><a href=\"#局部变量-成员变量-静态变量\" class=\"headerlink\" title=\"局部变量&#x2F;成员变量&#x2F;静态变量\"></a>局部变量&#x2F;成员变量&#x2F;静态变量</h3><ul>\n<li>语法形式：成员变量可以被 <code>public</code>,<code>private</code>,<code>static</code> 等修饰符所修饰，而局部变量不能被访问控制修饰符及 <code>static</code> 所修饰；但是，成员变量和局部变量都能被 final 所修饰。</li>\n<li>存储方式：如果成员变量是使用 <code>static</code> 修饰的，那么这个成员变量是属于类的，如果没有使用 <code>static</code> 修饰，这个成员变量是属于实例的。而对象存在于堆内存，局部变量则存在于栈内存。</li>\n<li>生存时间：成员变量是对象的一部分，它随着对象的创建而存在，而局部变量随着方法的调用而自动生成，随着方法的调用结束而消亡。</li>\n<li>默认值：成员变量如果没有被赋初始值，则会自动以类型的默认值而赋值（一种情况例外:被 <code>final</code> 修饰的成员变量也必须显式地赋值），而局部变量则不会自动赋值。</li>\n</ul>\n<p>静态变量是被 <code>static</code> 关键字修饰的变量。它可以被类的所有实例共享，无论一个类创建了多少个对象，它们都共享同一份静态变量。也就是说，即使创建多个对象，静态变量只会被分配一次内存，这样可以节省内存。</p>\n<h3 id=\"重载和重写\"><a href=\"#重载和重写\" class=\"headerlink\" title=\"重载和重写\"></a>重载和重写</h3><ul>\n<li>重载就是同名的方法能够根据输入数据的不同，做出不同的处理。重载发生在同一个类中（或者父类和子类之间），方法名必须相同，参数类型不同、个数不同、顺序不同，方法返回值和访问修饰符可以不同。</li>\n<li>重写发生在运行期，是子类对父类的允许访问的方法的实现过程进行重新编写。<ul>\n<li>方法名、参数列表必须相同，子类方法返回值类型应比父类方法返回值类型更小或相等，抛出的异常范围小于等于父类，访问修饰符范围大于等于父类。</li>\n<li>如果父类方法访问修饰符为 private&#x2F;final&#x2F;static 则子类就不能重写该方法，但是被 static 修饰的方法能够被再次声明。</li>\n<li>构造方法无法被重写</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"面向对象和面向过程区别\"><a href=\"#面向对象和面向过程区别\" class=\"headerlink\" title=\"面向对象和面向过程区别\"></a>面向对象和面向过程区别</h3><p>两者的主要区别在于解决问题的方式不同：</p>\n<ul>\n<li>面向过程把解决问题的过程拆成一个个方法，通过一个个方法的执行解决问题。</li>\n<li>面向对象会先抽象出对象，然后用对象执行方法的方式解决问题。</li>\n</ul>\n<p>另外，面向对象开发的程序一般更易维护、易复用、易扩展。</p>\n<h3 id=\"接口和抽象类\"><a href=\"#接口和抽象类\" class=\"headerlink\" title=\"接口和抽象类\"></a>接口和抽象类</h3><p>共同点: 都不能被实例化<br><a href=\"https://learn.skyofit.com/archives/351\">https://learn.skyofit.com/archives/351</a><br><strong>区别</strong></p>\n<ul>\n<li>子类使用<code>extends</code>关键字来继承抽象类，只能继承 1 个抽象类；子类使用关键字<code>implements</code>来实现接口，可以实现多个接口。</li>\n<li>抽象类可以有构造方法，接口不能有构造方法。</li>\n<li>抽象类允许有普通方法，接口中的方法默认是<code>public abstract</code>类型(JDK8后允许使用<code>default</code>、<code>static</code>定义非抽象方法)。</li>\n<li>抽象类允许有成员变量，接口中只允许有常量(默认是<code>public static final</code>类型)。</li>\n<li>抽象类中的抽象方法可以有访问修饰符(可以是<code>public</code>、<code>protected</code>、<code>private</code>)，接口中的抽象方法默认是<code>public</code>类型。</li>\n<li>抽象类可以有 <code>main</code> 方法，接口中不能有 <code>main</code> 方法。</li>\n</ul>\n<h3 id=\"深拷贝-浅拷贝-引用拷贝\"><a href=\"#深拷贝-浅拷贝-引用拷贝\" class=\"headerlink\" title=\"深拷贝&#x2F;浅拷贝&#x2F;引用拷贝\"></a>深拷贝&#x2F;浅拷贝&#x2F;引用拷贝</h3><ul>\n<li>深拷贝: 完全复制整个对象，包括这个对象所包含的内部对象。</li>\n<li>浅拷贝: 浅拷贝会在堆上创建一个新的对象（区别于引用拷贝的一点），不过，如果原对象内部的属性是引用类型的话，浅拷贝会直接复制内部对象的引用地址，也就是说拷贝对象和原对象共用同一个内部对象。</li>\n<li>引用拷贝: 引用拷贝是两个不同的引用指向同一个对象。这不就是拷贝了一份引用吗哈哈哈？</li>\n</ul>\n<h3 id=\"Object-类\"><a href=\"#Object-类\" class=\"headerlink\" title=\"Object 类\"></a>Object 类</h3><p>Object 类是一个特殊的类，是所有类的父类。主要提供了以下 11 个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//native 方法，用于返回当前运行时对象的 Class 对象，使用了 final 关键字修饰，故不允许子类重写。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> Class&lt;?&gt; getClass()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//native 方法，用于返回对象的哈希码，主要使用在哈希表中，比如 JDK 中的HashMap。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">native</span> <span class=\"type\">int</span> <span class=\"title function_\">hashCode</span><span class=\"params\">()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用于比较 2 个对象的内存地址是否相等，String 类对该方法进行了重写以用于比较字符串的值是否相等。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">equals</span><span class=\"params\">(Object obj)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//native 方法，用于创建并返回当前对象的一份拷贝。</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">native</span> Object <span class=\"title function_\">clone</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> CloneNotSupportedException</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//返回类的名字实例的哈希码的 16 进制的字符串。建议 Object 所有的子类都重写这个方法。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//native 方法，并且不能重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果有多个线程在等待只会任意唤醒一个。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notify</span><span class=\"params\">()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//native 方法，并且不能重写。跟 notify 一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">notifyAll</span><span class=\"params\">()</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//native方法，并且不能重写。暂停线程的执行。注意：sleep 方法没有释放锁，而 wait 方法释放了锁 ，timeout 是等待时间。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">wait</span><span class=\"params\">(<span class=\"type\">long</span> timeout)</span> <span class=\"keyword\">throws</span> InterruptedException</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//多了 nanos 参数，这个参数表示额外时间（以纳秒为单位，范围是 0-999999）。 所以超时的时间还需要加上 nanos 纳秒。。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">wait</span><span class=\"params\">(<span class=\"type\">long</span> timeout, <span class=\"type\">int</span> nanos)</span> <span class=\"keyword\">throws</span> InterruptedException</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间这个概念</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">wait</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 实例被垃圾回收器回收的时候触发的操作</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finalize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable &#123; &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"形参-实参\"><a href=\"#形参-实参\" class=\"headerlink\" title=\"形参&amp;实参\"></a>形参&amp;实参</h3><ul>\n<li>形参（形式参数，Parameters）：用于定义函数&#x2F;方法，接收实参，不需要有确定的值。</li>\n<li>实参（实际参数，Arguments）：用于传递给函数&#x2F;方法的参数，必须有确定的值。</li>\n</ul>\n<h3 id=\"值传递-引用传递\"><a href=\"#值传递-引用传递\" class=\"headerlink\" title=\"值传递&amp;引用传递\"></a>值传递&amp;引用传递</h3><ul>\n<li>值传递：方法接收的是实参值的拷贝，会创建副本。</li>\n<li>引用传递：方法接收的直接是实参所引用的对象在堆中的地址，不会创建副本，对形参的修改将影响到实参。</li>\n</ul>\n<p>Java 中只有值传递，C++ 中有值传递和引用传递。</p>\n<h3 id=\"和equals-区别\"><a href=\"#和equals-区别\" class=\"headerlink\" title=\"&#x3D;&#x3D;和equals()区别\"></a>&#x3D;&#x3D;和equals()区别</h3><ul>\n<li><code>==</code> 可以用来比较基本数据类型和引用数据类型<ul>\n<li>基本数据类型：比较的是值是否相等</li>\n<li>引用数据类型：比较的是引用地址是否相等</li>\n<li>Java只有值传递，不管是基本数据类型还是引用数据类型，比较的都是值，只是引用类型变量存的值是对象的地址。</li>\n</ul>\n</li>\n<li><code>equals()</code> 不能用于判断基本数据类型的变量，只能用来判断两个对象是否相等。<ul>\n<li>如果没有重写<code>equals()</code>方法， 子类调用<code>Object</code> 类中的<code>equals()</code>方法，等价于通过“&#x3D;&#x3D;”比较这两个对象，即比较的是两个对象的引用地址。</li>\n<li>一般重写<code>equals()</code>方法来比较两个对象中的属性是否相等；若属性相等，则返回 <code>true</code>(即认为这两个对象相等)。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"hashCode-和equal\"><a href=\"#hashCode-和equal\" class=\"headerlink\" title=\"hashCode()和equal()\"></a>hashCode()和equal()</h3><p><code>hashCode()</code> 的作用是获取哈希码（<code>int</code> 整数），也称为散列码。哈希码的作用是确定该对象在哈希表中的索引位置。<code>hashCode()</code> 定义在 <code>Object</code> 类中，意味着 Java 中的任何类都有 <code>hashCode()</code>。注意：<code>Object</code> 的 <code>hashCode()</code> 方法是本地方法，也就是用 C 语言或 C++ 实现的。</p>\n<p><code>hashCode()</code> 和 <code>equals()</code>都是用于比较两个对象是否相等。JDK 同时提供这两个方法，<code>hashCode()</code>方法可以大大减少<code>equals()</code>方法的调用次数，从而提高程序的性能。</p>\n<ul>\n<li>如果两个对象的<code>hashCode</code> 值相等，那这两个对象不一定相等（<strong>哈希碰撞</strong>）。</li>\n<li>如果两个对象的<code>hashCode</code> 值相等并且<code>equals()</code>方法也返回 <code>true</code>，认为这两个对象相等。</li>\n<li>如果两个对象的<code>hashCode</code> 值不相等，可以直接认为这两个对象不相等。</li>\n</ul>\n<p><strong>为什么重写 <code>equals()</code> 时必须重写 <code>hashCode()</code> 方法？</strong><br>因为两个相等对象的 <code>hashCode</code> 值必须相等。也就是说如果 <code>equals</code> 方法判断两个对象是相等的，那这两个对象的 <code>hashCode</code> 值也要相等。如果重写 <code>equals()</code> 时没有重写 <code>hashCode()</code> 方法的话就可能会导致 <code>equals</code> 方法判断是相等的两个对象，<code>hashCode</code> 值却不相等。</p>\n<h3 id=\"String-StringBuffer-StringBuilder\"><a href=\"#String-StringBuffer-StringBuilder\" class=\"headerlink\" title=\"String&#x2F;StringBuffer&#x2F;StringBuilder\"></a>String&#x2F;StringBuffer&#x2F;StringBuilder</h3><ul>\n<li><p><code>String</code> : 字符串常量，不可变，线程安全，适用于少量的字符串操作的情况。</p>\n</li>\n<li><p><code>StringBuffer</code> : 字符串变量（线程安全），适用于多线程下大量字符串操作的情况。</p>\n</li>\n<li><p><code>StringBuilder</code> : 字符串变量（非线程安全），适用于单线程下大量字符串操作的情况。</p>\n</li>\n<li><p>每次对 <code>String</code> 类型进行改变的时候，都会生成一个新的 <code>String</code> 对象，然后将指针指向新的 <code>String</code> 对象。</p>\n</li>\n<li><p><code>StringBuffer</code> 改变时会对本身进行操作，而不是生成新的对象并改变对象引用。</p>\n</li>\n<li><p><code>StringBuilder</code> 相比使用 <code>StringBuffer</code> 仅能获得 10%~15% 左右的性能提升，但却要冒多线程不安全的风险。</p>\n</li>\n</ul>\n<p>** <code>String</code> 为什么不可变？**</p>\n<ul>\n<li><code>String</code>类内保存字符串的<code>char</code>数组被 <code>final</code> 修饰且为私有的，并且 <code>String</code> 类没有提供&#x2F;暴露修改这个字符串的方法。</li>\n<li><code>String</code> 类被 <code>final</code> 修饰导致其不能被继承，进而避免了子类破坏 <code>String</code> 不可变。</li>\n</ul>\n<h3 id=\"字符串拼接使用-还是StringBuilder？\"><a href=\"#字符串拼接使用-还是StringBuilder？\" class=\"headerlink\" title=\"字符串拼接使用+还是StringBuilder？\"></a>字符串拼接使用+还是StringBuilder？</h3><p>Java中“+”和“+&#x3D;” 实际上是通过 <code>StringBuilder</code> 调用 <code>append()</code> 方法实现的，拼接完成之后调用 <code>toString()</code> 得到一个 String 对象。在循环内使用“+”进行字符串的拼接的话，存在比较明显的缺陷：编译器不会创建单个 <code>StringBuilder</code> 以复用，会导致创建过多的 <code>StringBuilder</code> 对象。</p>\n<h3 id=\"String-equals-Object-equals\"><a href=\"#String-equals-Object-equals\" class=\"headerlink\" title=\"String.equals()&#x2F;Object.equals()\"></a>String.equals()&#x2F;Object.equals()</h3><p><code>String</code> 中的 <code>equals</code> 方法是被重写过的，比较的是 <code>String</code> 字符串的值是否相等。 <code>Object</code> 的 <code>equals</code> 方法是比较的对象的内存地址。</p>\n<h3 id=\"字符串常量池\"><a href=\"#字符串常量池\" class=\"headerlink\" title=\"字符串常量池\"></a>字符串常量池</h3><p><strong>字符串常量池</strong> 是 JVM 为了提升性能和减少内存消耗针对字符串（String 类）专门开辟的一块区域，主要目的是为了避免字符串的重复创建。</p>\n<h3 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h3><p>异常的共同祖先是 <code>Throwable</code> 类，其有两个重要的子类：<br><code>Error</code>: 程序无法处理的错误，不建议通过 <code>catch</code> 捕获。一般由 JVM 抛出，线程终止执行。<br><code>Exception</code>: 程序本身可以处理的异常，可以通过 <code>catch</code> 来进行捕获。</p>\n<h3 id=\"Checked-Unchecked-Exception\"><a href=\"#Checked-Unchecked-Exception\" class=\"headerlink\" title=\"Checked&#x2F;Unchecked Exception\"></a>Checked&#x2F;Unchecked Exception</h3><ul>\n<li><code>Checked Exception</code>即受检查异常 ，在编译过程中，若受检查异常没有被 <code>catch</code> 或者 <code>throws</code> 关键字处理的话，就没办法通过编译。<ul>\n<li>除了 <code>RuntimeException</code> 及其子类以外，其他的 <code>Exception</code> 类及其子类都属于受检查异常 。常见的受检查异常有：<code>ClassNotFoundException</code>、<code>FileNotFoundException</code>、<code>SQLException</code> 等。</li>\n</ul>\n</li>\n<li><code>Unchecked Exception</code> 即不受检查异常 ，在编译过程中 ，即使不处理也可以正常通过编译。<ul>\n<li><code>RuntimeException</code> 及其子类属于不受检查异常。常见的不受检查异常有：<code>NullPointerException</code>、<code>ArrayIndexOutOfBoundsException</code>、<code>IllegalArgumentException</code> 等。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"try-catch-finally\"><a href=\"#try-catch-finally\" class=\"headerlink\" title=\"try-catch-finally\"></a>try-catch-finally</h3><p><code>try</code>：用于捕获异常。其后可接零个或多个 <code>catch</code> 块，如果没有 <code>catch</code> 块，则必须跟一个 <code>finally</code> 块。<br><code>catch</code>：用于处理 <code>try</code> 捕获到的异常。<br><code>finally</code>：无论是否捕获或处理异常，<code>finally</code> 块里的语句都会被执行。当在 <code>try</code> 块或 <code>catch</code> 块中遇到 <code>return</code> 语句时，<code>finally</code> 语句块将在方法返回之前被执行。</p>\n<blockquote>\n<p>注意：不要在 <code>finally</code> 语句块中使用 <code>return</code> ! 当 <code>try</code> 语句和 <code>finally</code> 语句中都有 <code>return</code> 语句时，<code>try</code> 语句块中的 <code>return</code> 语句会被忽略。</p>\n</blockquote>\n<h3 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h3><ul>\n<li>使用泛型参数，可以增强代码的可读性以及稳定性。</li>\n<li>泛型一般有三种使用方式:泛型类、泛型接口、泛型方法。</li>\n</ul>\n<h3 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h3><p>反射是框架的灵魂，主要是因为它赋予了在运行时分析类以及执行类中方法的能力。通过反射可以获取任意一个类的所有属性和方法，还可以调用这些方法和属性。</p>\n<ul>\n<li>优点：可以让代码更加灵活、为各种框架提供开箱即用的功能提供了便利。</li>\n<li>缺点：在运行时有了分析操作类的能力，这同样也增加了安全问题。比如可以无视泛型参数的安全检查（泛型参数的安全检查发生在编译时）。另外，反射的性能也要稍差点，不过，对于框架来说实际是影响不大的。</li>\n</ul>\n<h3 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h3><p>注解使用了反射，可以看作是一种特殊的注释，主要用于修饰类、方法或者变量，提供某些信息供程序在编译或者运行时使用。</p>\n<p>注解只有被解析之后才会生效，常见的解析方法有两种：</p>\n<ul>\n<li>编译期直接扫描：编译器在编译代码的时候扫描对应的注解并处理，如某个方法使用 <code>@Override</code> 注解，编译器在编译的时候就会检测当前的方法是否重写了父类对应的方法。</li>\n<li>运行期通过反射处理：像框架中自带的注解(比如 <code>Spring</code> 框架的 <code>@Value</code>、<code>@Component</code>)都是通过反射来进行处理的。</li>\n</ul>\n<h3 id=\"序列化-反序列化\"><a href=\"#序列化-反序列化\" class=\"headerlink\" title=\"序列化&#x2F;反序列化\"></a>序列化&#x2F;反序列化</h3><p>如果需要持久化 Java 对象比如将 Java 对象保存在文件中，或者在网络传输 Java 对象，这些场景都需要用到序列化。</p>\n<ul>\n<li>序列化：将数据结构或对象转换成二进制字节流的过程</li>\n<li>反序列化：将在序列化过程中所生成的二进制字节流转换成数据结构或者对象的过程</li>\n</ul>\n<p>序列化和反序列化常见应用场景：</p>\n<ul>\n<li>对象在进行网络传输（比如远程方法调用 RPC 的时候）之前需要先被序列化，接收到序列化的对象之后需要再进行反序列化；</li>\n<li>将对象存储到文件之前需要进行序列化，将对象从文件中读取出来需要进行反序列化；</li>\n<li>将对象存储到数据库（如 Redis）之前需要用到序列化，将对象从缓存数据库中读取出来需要反序列化；</li>\n<li>将对象存储到内存之前需要进行序列化，从内存中读取出来之后需要进行反序列化。</li>\n</ul>\n<h3 id=\"语法糖\"><a href=\"#语法糖\" class=\"headerlink\" title=\"语法糖\"></a>语法糖</h3><p>语法糖（Syntactic sugar） 代指的是编程语言为了方便程序员开发程序而设计的一种特殊语法，这种语法对编程语言的功能并没有影响。实现相同的功能，基于语法糖写出来的代码往往更简单简洁且更易阅读。</p>\n<p>Java 中最常用的语法糖主要有<strong>switch语句</strong>、<strong>自动拆装箱</strong>、<strong>for-each循环</strong>、<strong>try-with-resources</strong> 语法、<strong>lambda 表达式</strong>等。</p>\n<h3 id=\"List-Set-Queue-Map区别\"><a href=\"#List-Set-Queue-Map区别\" class=\"headerlink\" title=\"List&#x2F;Set&#x2F;Queue&#x2F;Map区别\"></a>List&#x2F;Set&#x2F;Queue&#x2F;Map区别</h3><ul>\n<li>List: 存储的元素是有序的、可重复的。</li>\n<li>Set: 存储的元素不可重复的。</li>\n<li>Queue: 按特定的排队规则来确定先后顺序，存储的元素是有序的、可重复的。</li>\n<li>Map: 使用键值对（key-value）存储，key 是无序的、不可重复的，value 是无序的、可重复的，每个键最多映射到一个值。</li>\n</ul>\n<h3 id=\"如何选用集合\"><a href=\"#如何选用集合\" class=\"headerlink\" title=\"如何选用集合?\"></a>如何选用集合?</h3><p>主要根据集合的特点来选择合适的集合。如：</p>\n<ul>\n<li>需要根据键值获取到元素值时就选用 <code>Map</code> 接口下的集合，需要排序时选择 <code>TreeMap</code> ,不需要排序时就选择 <code>HashMap</code> ,需要保证线程安全就选用 <code>ConcurrentHashMap</code> 。</li>\n<li>只需要存放元素值时，就选择实现 <code>Collection</code> 接口的集合，需要保证元素唯一时选择实现 <code>Set</code> 接口的集合比如 <code>TreeSet</code> 或 <code>HashSet</code> ，不需要就选择实现 <code>List</code> 接口的比如 <code>ArrayList</code> 或 <code>LinkedList</code> ，然后再根据实现这些接口的集合的特点来选用。</li>\n</ul>\n<h3 id=\"为什么要使用集合？\"><a href=\"#为什么要使用集合？\" class=\"headerlink\" title=\"为什么要使用集合？\"></a>为什么要使用集合？</h3><p>在实际开发中，存储的数据类型多种多样且数量不确定。相较于数组，Java 集合提供了更灵活、更有效的方法来存储多个数据对象，其优势在于集合的大小可变、支持泛型、具有内建算法等。总的来说，Java 集合提高了数据的存储和处理灵活性，可以更好地适应现代软件开发中多样化的数据需求，并支持高质量的代码编写。</p>\n<h3 id=\"ArrayList和Array区别\"><a href=\"#ArrayList和Array区别\" class=\"headerlink\" title=\"ArrayList和Array区别\"></a>ArrayList和Array区别</h3><p><code>ArrayList</code> 内部基于动态数组实现，比 <code>Array</code>（静态数组） 更加灵活：</p>\n<ul>\n<li><code>ArrayList</code>可动态扩容&#x2F;缩容，<code>Array</code> 创建后不能改变长度。</li>\n<li><code>ArrayList</code> 可使用泛型确保类型安全，<code>Array</code> 则不可以。</li>\n<li><code>ArrayList</code> 中只能存对象，存基本类型数据时要用对应包装类(如<code>Integer</code>)。<code>Array</code> 可直接存储基本类型数据，也可存储对象。</li>\n<li><code>ArrayList</code> 提供增删改查等 API 操作方法，如 <code>add()</code>、<code>remove()</code>等。<code>Array</code> 只是一个固定长度数组，只能按照下标访问元素，无动态添加、删除元素能力。</li>\n<li><code>ArrayList</code>创建时不需指定大小，而<code>Array</code>创建时必须指定大小。</li>\n</ul>\n<h3 id=\"ArrayList和LinkedList区别\"><a href=\"#ArrayList和LinkedList区别\" class=\"headerlink\" title=\"ArrayList和LinkedList区别\"></a>ArrayList和LinkedList区别</h3><ul>\n<li><code>ArrayList</code> 底层基于<code>Object</code>数组实现的，<code>LinkedList</code> 是基于双向链表实现的(JDK1.6之前是循环链表，1.7改为双向链表)。<ul>\n<li><code>ArrayList</code>插入和删除元素的时间复杂度受元素位置的影响。<code>add()</code>方法默认在尾部添加元素为O(1)，在指定位置插入元素或者删除元素时间复杂度为O(n)，因为需要移动元素。</li>\n<li><code>LinkedList</code>插入和删除元素的时间复杂度为O(1)，因为只需要改变指针指向。如果要在指定位置插入或者删除元素，时间复杂度为O(n)，需要先移动到指定位置再插入和删除。</li>\n</ul>\n</li>\n<li>二者都是线程不安全的。</li>\n<li><code>ArrayList</code> 随机访问效率高(实现了<code>RandomAccess()</code>接口)，<code>LinkedList</code> 插入删除效率高。</li>\n<li>占用空间：<code>ArrayList</code> 主要体现在在列表的结尾会留一定的容量空间，<code>LinkedList</code> 每个元素占用空间比前者大(要存放直接后继和直接前驱以及数据)。</li>\n</ul>\n<blockquote>\n<p>项目中一般不会使用 <code>LinkedList</code>。</p>\n</blockquote>\n<h3 id=\"ArrayList和LinkedList插入-删除效率\"><a href=\"#ArrayList和LinkedList插入-删除效率\" class=\"headerlink\" title=\"ArrayList和LinkedList插入&#x2F;删除效率\"></a>ArrayList和LinkedList插入&#x2F;删除效率</h3><p><code>ArrayList</code></p>\n<ul>\n<li>头部插入&#x2F;删除：O(n), 需要移动元素。</li>\n<li>指定位置插入&#x2F;删除：O(n), 需要移动元素。</li>\n<li>尾部插入&#x2F;删除：O(1), 直接在尾部添加或删除元素。尾部插入时，当容量已到极限并需扩容时，需执行一次 O(n) 的操作将原数组复制到新的更大的数组中，然后再执行 O(1) 的操作添加元素。<br><code>LinkedList</code></li>\n<li>头部插入&#x2F;删除：O(1), 只需改变指针指向。</li>\n<li>尾部插入&#x2F;删除：O(1), 只需改变指针指向。</li>\n<li>指定位置插入&#x2F;删除：O(n), 需要先移动到指定位置再插入和删除。</li>\n</ul>\n<h3 id=\"比较HashSet-LinkedHashSet-TreeSet\"><a href=\"#比较HashSet-LinkedHashSet-TreeSet\" class=\"headerlink\" title=\"比较HashSet&#x2F;LinkedHashSet&#x2F;TreeSet\"></a>比较HashSet&#x2F;LinkedHashSet&#x2F;TreeSet</h3><ul>\n<li>都是 <code>Set</code> 接口的实现类，都保证元素唯一，且都不是线程安全的。</li>\n<li>主要区别在于底层数据结构不同。<ul>\n<li><code>HashSet</code> 底层是哈希表(<code>HashMap</code>)。</li>\n<li><code>LinkedHashSet</code> 底层是链表和哈希表，元素的插入和取出顺序满足 FIFO。</li>\n<li><code>TreeSet</code> 底层数据结构是红黑树，元素是有序的，排序的方式有自然排序和定制排序。</li>\n</ul>\n</li>\n<li>底层数据结构不同导致三者应用场景不同。<code>HashSet</code> 用于不需要保证元素插入和取出顺序的场景，<code>LinkedHashSet</code> 用于保证元素的插入和取出顺序满足 FIFO 的场景，<code>TreeSet</code> 用于支持对元素自定义排序规则的场景。</li>\n</ul>\n<h3 id=\"Queue-Deque区别\"><a href=\"#Queue-Deque区别\" class=\"headerlink\" title=\"Queue&#x2F;Deque区别\"></a>Queue&#x2F;Deque区别</h3><ul>\n<li><code>Queue</code> 是单端队列，只能从一端插入元素，另一端删除元素，实现上遵循 先进先出(FIFO)规则。</li>\n<li><code>Deque</code> 是双端队列，在队列的两端均可以插入或删除元素，其还提供有 <code>push()</code>等方法，可用于模拟栈。</li>\n</ul>\n<h3 id=\"ArrayDeque-LinkedList区别\"><a href=\"#ArrayDeque-LinkedList区别\" class=\"headerlink\" title=\"ArrayDeque&#x2F;LinkedList区别\"></a>ArrayDeque&#x2F;LinkedList区别</h3><ul>\n<li><code>ArrayDeque</code> 基于<strong>可变长数组</strong>和<strong>双指针</strong>来实现，而 <code>LinkedList</code> 通过链表来实现。</li>\n<li><code>ArrayDeque</code> 不能存储 <code>NULL</code> 数据，<code>LinkedList</code> 能。</li>\n<li><code>ArrayDeque</code> 插入时可能存在扩容过程, 不过均摊后的插入操作依然为 O(1)。虽然 <code>LinkedList</code> 不需要扩容，但每次插入数据时都要申请新的堆空间，均摊性能相比更慢。</li>\n</ul>\n<p>从性能的角度上，选用 <code>ArrayDeque</code> 来实现队列要比 <code>LinkedList</code> 更好。此外，<code>ArrayDeque</code> 也可以用于实现栈。</p>\n<h3 id=\"PriorityQueue\"><a href=\"#PriorityQueue\" class=\"headerlink\" title=\"PriorityQueue\"></a>PriorityQueue</h3><p>PriorityQueue 中元素出队顺序是与优先级相关的，即总是优先级最高的元素先出队。</p>\n<ul>\n<li>利用了二叉堆的数据结构来实现的，底层使用可变长的数组来存储数据</li>\n<li>通过堆元素的上浮和下沉，实现了在 O(logn) 的时间复杂度内插入元素和删除堆顶元素。</li>\n<li>是非线程安全的，且不支持存储 <code>NULL</code> 和 <code>non-comparable</code> 的对象。</li>\n<li>默认是小顶堆，但可以接收一个 <code>Comparator</code> 作为构造参数，从而来自定义元素优先级的先后。</li>\n</ul>\n<blockquote>\n<p><code>PriorityQueue</code> 在面试中可能更多的会出现在手撕算法的时候，典型例题包括堆排序、求第 K 大的数、带权图的遍历等，所以需要会熟练使用才行。</p>\n</blockquote>\n<h3 id=\"BlockingQueue及其实现类\"><a href=\"#BlockingQueue及其实现类\" class=\"headerlink\" title=\"BlockingQueue及其实现类\"></a>BlockingQueue及其实现类</h3><p><code>BlockingQueue</code>(阻塞队列)是一个接口，其支持当队列没有元素时一直阻塞，直到有元素；还支持如果队列已满，一直等到队列可以放入新元素时再放入。常用于<strong>生产者-消费者模型</strong>中，生产者线程向队列中添加数据，消费者线程从队列中取出数据进行处理。</p>\n<p><strong>实现类</strong></p>\n<ul>\n<li><code>ArrayBlockingQueue</code>：使用数组实现的有界阻塞队列。在创建时需要指定容量大小，并支持公平和非公平两种方式的锁访问机制。</li>\n<li><code>LinkedBlockingQueue</code>：使用单向链表实现的可选有界阻塞队列。在创建时可以指定容量大小，如果不指定则默认为Integer.MAX_VALUE。和ArrayBlockingQueue不同的是， 它仅支持非公平的锁访问机制。</li>\n<li><code>PriorityBlockingQueue</code>：支持优先级排序的无界阻塞队列。元素必须实现<code>Comparable</code>接口且不能插入 <code>null</code> 元素。</li>\n<li><code>SynchronousQueue</code>：同步队列，是一种不存储元素的阻塞队列。每个插入操作都必须等待对应的删除操作，反之删除操作也必须等待插入操作。通常用于线程之间的直接传递数据。</li>\n<li><code>DelayQueue</code>：延迟队列，其中的元素只有到了其指定的延迟时间，才能够从队列中出队。</li>\n</ul>\n<h3 id=\"ArrayBlockingQueue-LinkedBlockingQueue区别\"><a href=\"#ArrayBlockingQueue-LinkedBlockingQueue区别\" class=\"headerlink\" title=\"ArrayBlockingQueue&#x2F;LinkedBlockingQueue区别\"></a>ArrayBlockingQueue&#x2F;LinkedBlockingQueue区别</h3><p>二者是Java并发中常用的两种阻塞队列实现，都是线程安全的。区别：</p>\n<ul>\n<li>底层实现：<code>ArrayBlockingQueue</code> 基于数组实现，而 <code>LinkedBlockingQueue</code> 基于链表实现。</li>\n<li>是否有界：<code>ArrayBlockingQueue</code> 是有界队列，必须在创建时指定容量大小。<code>LinkedBlockingQueue</code> 创建时可以不指定容量大小，默认是Integer.MAX_VALUE，也就是无界的。但也可以指定队列大小，从而成为有界的。</li>\n<li>锁是否分离：<code>ArrayBlockingQueue</code>中的锁是没有分离的，即生产和消费用的是同一个锁；<code>LinkedBlockingQueue</code>中的锁是分离的，即生产用的是<code>putLock</code>，消费是<code>takeLock</code>，这样可以防止生产者和消费者线程之间的锁争夺。</li>\n<li>内存占用：<code>ArrayBlockingQueue</code> 需要提前分配数组内存，而 <code>LinkedBlockingQueue</code> 则是动态分配链表节点内存。因此，<code>ArrayBlockingQueue</code> 在创建时就会占用一定的内存空间，且往往申请的内存比实际所用的内存更大，而<code>LinkedBlockingQueue</code> 则是根据元素的增加而逐渐占用内存空间。</li>\n</ul>\n<h3 id=\"堆和栈的区别\"><a href=\"#堆和栈的区别\" class=\"headerlink\" title=\"堆和栈的区别\"></a>堆和栈的区别</h3><p><a href=\"https://blog.csdn.net/qq_44944221/article/details/126692973\">https://blog.csdn.net/qq_44944221/article/details/126692973</a></p>\n<ul>\n<li>栈：是运行时单位，代表逻辑，内含基本数据类型和堆中的对象引用，所在区域连续，没有碎片；</li>\n<li>堆：是存储单元，代表着数据，可以被多个栈共享，所在区域不连续，有碎片；</li>\n</ul>\n<p>区别:</p>\n<ul>\n<li>功能不同：栈内存用来存储局部变量和方法调用，而堆内存用存储Java中的对象；无论是成员变量、局部变量、还是类变量他们指向的对象都存储在堆内存中；</li>\n<li>共享性不同：栈是线程私有，而堆是线程共享；</li>\n<li>异常错误不同：当内存不足时；栈抛出的是<code>StackOverFlowError</code>异常，而堆抛出的是<code>OutOfMemoryError</code>；</li>\n<li>空间大小不同：堆空间大小远远大于栈的内存空间。</li>\n</ul>\n<h3 id=\"进程-线程-协程\"><a href=\"#进程-线程-协程\" class=\"headerlink\" title=\"进程&#x2F;线程&#x2F;协程\"></a>进程&#x2F;线程&#x2F;协程</h3><p><a href=\"https://blog.csdn.net/m0_60505735/article/details/131047046\">https://blog.csdn.net/m0_60505735/article/details/131047046</a><br><a href=\"https://blog.csdn.net/weixin_49199646/article/details/109210547\">https://blog.csdn.net/weixin_49199646/article/details/109210547</a><br>进程： 进程是程序的一次执行过程，是系统资源分配和独立运行的最小单位；<br>线程： 线程是进程的一个执行单元，是任务调度和系统执行的最小单位；<br>协程： 协程是一种用户态的轻量级线程，协程的调度完全由用户控制。<br><strong>进程与线程的区别</strong></p>\n<ul>\n<li>根本区别： 进程是操作系统资源分配和独立运行的最小单位；线程是任务调度和系统执行的最小单位。</li>\n<li>地址空间区别： 每个进程都有独立的地址空间，一个进程崩溃不影响其它进程；一个进程中的多个线程共享该 进程的地址空间，一个线程的非法操作会使整个进程崩溃。</li>\n<li>上下文切换开销区别： 每个进程有独立的代码和数据空间，进程之间上下文切换开销较大；线程组共享代码和数据空间，线程之间切换的开销较小。</li>\n</ul>\n<p><strong>进程与线程的联系</strong><br>一个进程由共享空间（包括堆、代码区、数据区、进程空间和打开的文件描述符）和一个或多个线程组成，各个线程之间共享进程的内存空间。而一个标准的线程由线程ID、程序计数器PC、寄存器和栈组成。</p>\n<p><em>进程与线程的选择</em>*</p>\n<ul>\n<li>线程的创建或销毁的代价比进程小，需要频繁创建和销毁时应优先选用线程；</li>\n<li>线程上下文切换的速度比进程快，需要大量计算时优先选用线程；</li>\n<li>线程在CPU上的使用效率更高，需要多核分布时优先选用线程，需要多机分布时优先选用进程</li>\n<li>线程的安全性、稳定性没有进程好，需要更稳定安全时优先使用进程。</li>\n</ul>\n<p>综上，线程创建和销毁的代价低、上下文切换速度快、对系统资源占用小、对CPU的使用效率高，因此一般情况下优先选择线程进行高并发编程；但线程组的所有线程共用一个进程的内存空间，安全稳定性相对较差，若其中一个线程发生崩溃，可能会使整个进程，因此对安全稳定性要求较高时，需要优先选择进程进行高并发编程。</p>\n<h3 id=\"强引用-软引用-弱引用-虚引用\"><a href=\"#强引用-软引用-弱引用-虚引用\" class=\"headerlink\" title=\"强引用&#x2F;软引用&#x2F;弱引用&#x2F;虚引用\"></a>强引用&#x2F;软引用&#x2F;弱引用&#x2F;虚引用</h3><p><a href=\"https://blog.csdn.net/u013718071/article/details/134789666\">https://blog.csdn.net/u013718071/article/details/134789666</a><br>Java中的引用类型主要分为强引用、软引用、弱引用和虚引用，它们之间的区别主要体现在垃圾回收的行为上。</p>\n<ul>\n<li>强引用（Strong Reference）：这是使用最普遍和默认的引用类型。如果一个对象具有强引用，那么垃圾回收器就永远不会回收它。当内存空间不足，Java虚拟机宁愿抛出 <code>OutOfMemoryError</code> 错误，也不会回收这种对象。</li>\n<li>软引用（Soft Reference）：软引用是用来描述一些还有用但并非必需的对象。只有当JVM认为内存不足时，才会去剔除这些基于软引用的对象。在Java中，可以用 <code>SoftReference</code> 类来实现软引用。</li>\n<li>弱引用（Weak Reference）：弱引用则是用来描述非必需对象的，但是它的强度比软引用更弱一些，被弱引用关联的对象只能生存到下一次垃圾回收发生为止。当垃圾回收器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。在Java中，可以用 <code>WeakReference</code> 类来实现弱引用。</li>\n<li>虚引用（Phantom Reference）：虚引用主要用来跟踪对象被垃圾回收的活动。虚引用与其他几种引用的一个区别在于：虚引用必须和引用队列（ReferenceQueue）联合使用。当垃圾回收器准备回收一个对象时，如果发现它还有虚引用，就会在回收对象的内存之前，将这个虚引用加入到与之关联的引用队列中。</li>\n</ul>\n<p>以上四种引用类型，强度依次递减：强引用最强，虚引用最弱。强引用对对象的生命周期没有影响，而软引用、弱引用和虚引用可以让对象在系统内存不足时被垃圾回收器回收。软引用和弱引用可以通过Java提供的相应类来创建，而虚引用需要借助 <code>PhantomReference</code> 类来实现。这些不同类型的引用给提供了更灵活的内存控制机制，用于满足不同的需求。</p>\n<h3 id=\"垃圾回收机制\"><a href=\"#垃圾回收机制\" class=\"headerlink\" title=\"垃圾回收机制\"></a>垃圾回收机制</h3><h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><h2 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h2><h2 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h2><h2 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h2><h2 id=\"spring-boot-cloud\"><a href=\"#spring-boot-cloud\" class=\"headerlink\" title=\"spring boot&#x2F;cloud ???\"></a>spring boot&#x2F;cloud ???</h2><h2 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h2><h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h2 id=\"面经\"><a href=\"#面经\" class=\"headerlink\" title=\"面经\"></a>面经</h2>"},{"title":"前端&移动端面经","keywords":["面经"],"description":"前端&移动端面经","abbrlink":17767,"date":"2024-05-27T12:14:47.000Z","updated":"2024-05-27T12:58:53.000Z","top_img":"https://s2.loli.net/2024/05/27/ytcdAHzliRquNM2.png","comments":1,"cover":"https://s2.loli.net/2024/05/27/6wWObXhdZL13pqo.png","toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"\nthis is a test file.\n","source":"_posts/前端-移动端面经.md","raw":"---\ntitle: 前端&移动端面经\ntags:\n  - 前端\n  - 移动端\n  - 面经\ncategories:\n  - 面经\nkeywords:\n  - 面经\ndescription: 前端&移动端面经\nabbrlink: 17767\ndate: 2024-05-27 20:14:47\nupdated: 2024-05-27 20:58:53\ntop_img: https://s2.loli.net/2024/05/27/ytcdAHzliRquNM2.png\ncomments:\ncover: https://s2.loli.net/2024/05/27/6wWObXhdZL13pqo.png\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n---\n\nthis is a test file.\n","slug":"前端-移动端面经","published":1,"layout":"post","photos":[],"link":"","_id":"clx1l2pdv000nnfgnbyuahakb","content":"<p>this is a test file.</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<p>this is a test file.</p>\n"},{"title":"react技巧","keywords":["react"],"description":"写代码的时候对react-native使用的一些技巧","abbrlink":56292,"date":"2023-10-07T07:03:23.000Z","updated":"2023-10-07T07:30:23.000Z","top_img":"https://s2.loli.net/2024/02/06/lhsVBAGIouNxRUa.png","comments":1,"cover":"https://s2.loli.net/2024/02/06/u1DMChx86N93wPR.png","toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"\n> 主要是对开源项目中react-native的一些使用技巧进行总结。具体项目见：[casdoor-app](https://github.com/cwp0/casdoor-app)\n\n> 后面如果做react的话可能也会做一些总结，到时候再加。\n\n# react-native\n\n## React Context\n\n用于在不同的组件中或者 `js` 文件中共享同一个数据。\n\n使用方法：\n\n例如要共享 `userInfo`\n\n1. 在应用程序中创建一个 `React Context`，用于共享 `userInfo`。\n\n   `UserContext.js`\n\n    ```jsx\n    import React from \"react\";\n    \n    const UserContext = React.createContext();\n    export const UserProvider = UserContext.Provider;\n    export const UserConsumer = UserContext.Consumer;\n    export default UserContext;\n    ```\n\n\n1. 在 `App.js` 中使用 **`UserProvider`** 包裹应用程序\n\n   注意这里要设置需要共享的数据 `value={{userInfo, setUserInfo}}`\n\n    ```jsx\n    import * as React from \"react\";\n    import {PaperProvider} from \"react-native-paper\";\n    import NavigationBar from \"./NavigationBar\";\n    import {NavigationContainer} from \"@react-navigation/native\";\n    import Header from \"./Header\";\n    import {UserProvider} from \"./UserContext\";\n    \n    const App = () => {\n      const [userInfo, setUserInfo] = React.useState(null);\n      return (\n        <UserProvider value={{userInfo, setUserInfo}} >\n          <NavigationContainer>\n            <PaperProvider>\n              <Header />\n              <NavigationBar />\n            </PaperProvider>\n          </NavigationContainer>\n        </UserProvider>\n      );\n    };\n    export default App;\n    ```\n\n\n1. 在其他组件中，通过导入 `UserContext.js` 进行使用共享的数据。\n\n   注意：声明新的 `React.useContext`的时候需要用花括号。\n\n   `Header.js`\n\n    ```jsx\n    import * as React from \"react\";\n    import {Appbar, Avatar, Button, Menu, Text} from \"react-native-paper\";\n    import UserContext from \"./UserContext\";\n    import {View} from \"react-native\";\n    import CasdoorLoginPage, {CasdoorLogout} from \"./CasdoorLoginPage\";\n    \n    const Header = () => {\n      const {userInfo, setUserInfo} = React.useContext(UserContext);\n      const [showLoginPage, setShowLoginPage] = React.useState(false);\n      const [menuVisible, setMenuVisible] = React.useState(false);\n      const openMenu = () => setMenuVisible(true);\n      const closeMenu = () => setMenuVisible(false);\n      const handleMenuLogoutClicked = () => {\n        handleCasdoorLogout();\n        closeMenu();\n      };\n    \n      const handleCasdoorLogin = () => {\n        setShowLoginPage(true);\n      };\n      const handleCasdoorLogout = () => {\n        CasdoorLogout();\n        setUserInfo(null);\n      };\n      const handleHideLoginPage = () => {\n        setShowLoginPage(false);\n      };\n      return (\n        <View>\n          <Appbar.Header style={{height: 40}}>\n            <Appbar.Content title=\"Casdoor\" />\n            <Menu\n              visible={menuVisible}\n              anchor={\n                <Button\n                  style={{marginRight: 10, backgroundColor: \"transparent\", height: 40}}\n                  onPress={userInfo === null ? handleCasdoorLogin : openMenu}\n                >\n                  {\n                    userInfo === null ?\n                      null :\n                      <Avatar.Image\n                        size={32}\n                        source={{uri: userInfo.avatar}}\n                        style={{marginRight: 10, backgroundColor: \"transparent\"}}\n                      />\n                  }\n                  <Text style={{marginRight: 10}} variant=\"titleMedium\">\n                    {userInfo === null ? \"Login\" : userInfo.name}\n                  </Text>\n                </Button>\n              }\n              onDismiss={closeMenu}\n            >\n              <Menu.Item onPress={() => handleMenuLogoutClicked()} title=\"Logout\" />\n            </Menu>\n          </Appbar.Header>\n          {showLoginPage && <CasdoorLoginPage onWebviewClose={handleHideLoginPage} />}\n        </View>\n      );\n    };\n    \n    export default Header;\n    ```\n\n\n## 子组件使用父组件的函数等参数\n\n在父组件中：\n\n定义好相关函数及变量，将参数传递给子组件。\n\n```jsx\nconst [placeholder, setPlaceholder] = React.useState(\"\");\n\nconst closeEditAccountModal = () => {\n    setShowEditAccountModal(false);\n};\n\nconst onAccountEdit = (accountDescp) => {\n    const accountToEdit = accountList.find(account => account.getEditStatus() === true);\n    if (accountToEdit) {\n      accountToEdit.setTitle(accountDescp);\n    }\n    setPlaceholder(\"\");\n    closeEditAccountModal();\n}\n\n<EditAccountDetails onClose={closeEditAccountModal} onEdit={onAccountEdit} placeholder={placeholder} />\n```\n\n在子组件中：\n\n添加相关代码，将父组件的函数等参数接收过来，然后就可以使用父组件的相关参数了。\n\n```jsx\nimport React, {useState} from \"react\";\nimport {Text, TextInput, View} from \"react-native\";\nimport {Button, IconButton} from \"react-native-paper\";\nimport PropTypes from \"prop-types\";\n\nexport default function EnterAccountDetails({onClose, onEdit, placeholder}) {\n  EnterAccountDetails.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    placeholder: PropTypes.string.isRequired,\n  };\n\n  const [description, setDescription] = useState(\"\");\n\n  const handleConfirm = () => {\n    onEdit(description);\n  };\n  return (\n    <View style={{flex: 1, justifyContent: \"center\", alignItems: \"center\"}}>\n      <Text style={{fontSize: 24, marginBottom: 5}}>Enter new description</Text>\n      <View style={{flexDirection: \"row\", alignItems: \"center\"}}>\n        <IconButton icon=\"account-details\" size={35} />\n        <TextInput\n          placeholder={placeholder}\n          value={description}\n          onChangeText={(text) => setDescription(text)}\n          style={{borderWidth: 3, borderColor: \"white\", margin: 10, width: 230, height: 50, borderRadius: 5, fontSize: 18, color: \"gray\", paddingLeft: 10}}\n        />\n      </View>\n      <Button\n        style={{\n          backgroundColor: \"#E6DFF3\",\n          borderRadius: 5,\n          margin: 10,\n          alignItems: \"center\",\n          position: \"absolute\",\n          top: 160,\n          width: 300,\n        }}\n        onPress={handleConfirm}\n      >\n        <Text style={{fontSize: 18, width: 280}}>Confirm</Text>\n      </Button>\n      <IconButton icon={\"close\"} size={30} onPress={onClose} style={{position: \"absolute\", top: 5, right: 5}} />\n    </View>\n  );\n}\n```\n\n## 父组件使用自组件的函数等参数\n\n在子组件中：\n\n将父组件要使用的函数导出：\n\n```jsx\nimport React, {useEffect} from \"react\";\nimport {WebView} from \"react-native-webview\";\nimport {View} from \"react-native\";\nimport {Portal} from \"react-native-paper\";\nimport CasdoorSdkConfig from \"./CasdoorSdkConfig\";\nimport SDK from \"casdoor-react-native-sdk\";\nimport UserContext from \"./UserContext\";\nimport PropTypes from \"prop-types\";\n// import {LogBox} from \"react-native\";\n// LogBox.ignoreAllLogs();\nconst sdk = new SDK(CasdoorSdkConfig);\n\nconst CasdoorLoginPage = ({onWebviewClose}) => {\n  CasdoorLoginPage.propTypes = {\n    onWebviewClose: PropTypes.func.isRequired,\n  };\n  const [casdoorLoginURL, setCasdoorLoginURL] = React.useState(\"\");\n  const {setUserInfo} = React.useContext(UserContext);\n  const getCasdoorSignInUrl = async() => {\n    const signinUrl = await sdk.getSigninUrl();\n    setCasdoorLoginURL(signinUrl);\n  };\n\n  useEffect(() => {\n    getCasdoorSignInUrl();\n  }, []);\n\n  const onNavigationStateChange = async(navState) => {\n    if (navState.url.startsWith(CasdoorSdkConfig.redirectPath)) {\n      onWebviewClose();\n      const token = await sdk.getAccessToken(navState.url);\n      const userInfo = sdk.JwtDecode(token);\n      setUserInfo(userInfo);\n    }\n  };\n\n  return (\n    <Portal>\n      <View style={{flex: 1}}>\n        {casdoorLoginURL !== \"\" && (\n          <WebView\n            source={{uri: casdoorLoginURL}}\n            onNavigationStateChange={onNavigationStateChange}\n            style={{flex: 1}}\n            mixedContentMode=\"always\"\n            javaScriptEnabled={true}\n          />\n        )}\n      </View>\n    </Portal>\n  );\n};\n\nexport const CasdoorLogout = () => {\n  sdk.clearState();\n};\nexport default CasdoorLoginPage;\n```\n\n在父组件中：\n\n导入子组件及其导出的函数，注意导出的方式，导出的组件直接 `import` ，导出的组件的函数要使用花括号来包裹。\n","source":"_posts/react技巧.md","raw":"---\ntitle: react技巧\ntags:\n  - 移动端\n  - 前端\n  - react\n  - react-native\ncategories:\n  - react\nkeywords:\n  - react\ndescription: 写代码的时候对react-native使用的一些技巧\nabbrlink: 56292\ndate: 2023-10-07 15:03:23\nupdated: 2023-10-07 15:30:23\ntop_img: https://s2.loli.net/2024/02/06/lhsVBAGIouNxRUa.png\ncomments:\ncover: https://s2.loli.net/2024/02/06/u1DMChx86N93wPR.png\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n---\n\n> 主要是对开源项目中react-native的一些使用技巧进行总结。具体项目见：[casdoor-app](https://github.com/cwp0/casdoor-app)\n\n> 后面如果做react的话可能也会做一些总结，到时候再加。\n\n# react-native\n\n## React Context\n\n用于在不同的组件中或者 `js` 文件中共享同一个数据。\n\n使用方法：\n\n例如要共享 `userInfo`\n\n1. 在应用程序中创建一个 `React Context`，用于共享 `userInfo`。\n\n   `UserContext.js`\n\n    ```jsx\n    import React from \"react\";\n    \n    const UserContext = React.createContext();\n    export const UserProvider = UserContext.Provider;\n    export const UserConsumer = UserContext.Consumer;\n    export default UserContext;\n    ```\n\n\n1. 在 `App.js` 中使用 **`UserProvider`** 包裹应用程序\n\n   注意这里要设置需要共享的数据 `value={{userInfo, setUserInfo}}`\n\n    ```jsx\n    import * as React from \"react\";\n    import {PaperProvider} from \"react-native-paper\";\n    import NavigationBar from \"./NavigationBar\";\n    import {NavigationContainer} from \"@react-navigation/native\";\n    import Header from \"./Header\";\n    import {UserProvider} from \"./UserContext\";\n    \n    const App = () => {\n      const [userInfo, setUserInfo] = React.useState(null);\n      return (\n        <UserProvider value={{userInfo, setUserInfo}} >\n          <NavigationContainer>\n            <PaperProvider>\n              <Header />\n              <NavigationBar />\n            </PaperProvider>\n          </NavigationContainer>\n        </UserProvider>\n      );\n    };\n    export default App;\n    ```\n\n\n1. 在其他组件中，通过导入 `UserContext.js` 进行使用共享的数据。\n\n   注意：声明新的 `React.useContext`的时候需要用花括号。\n\n   `Header.js`\n\n    ```jsx\n    import * as React from \"react\";\n    import {Appbar, Avatar, Button, Menu, Text} from \"react-native-paper\";\n    import UserContext from \"./UserContext\";\n    import {View} from \"react-native\";\n    import CasdoorLoginPage, {CasdoorLogout} from \"./CasdoorLoginPage\";\n    \n    const Header = () => {\n      const {userInfo, setUserInfo} = React.useContext(UserContext);\n      const [showLoginPage, setShowLoginPage] = React.useState(false);\n      const [menuVisible, setMenuVisible] = React.useState(false);\n      const openMenu = () => setMenuVisible(true);\n      const closeMenu = () => setMenuVisible(false);\n      const handleMenuLogoutClicked = () => {\n        handleCasdoorLogout();\n        closeMenu();\n      };\n    \n      const handleCasdoorLogin = () => {\n        setShowLoginPage(true);\n      };\n      const handleCasdoorLogout = () => {\n        CasdoorLogout();\n        setUserInfo(null);\n      };\n      const handleHideLoginPage = () => {\n        setShowLoginPage(false);\n      };\n      return (\n        <View>\n          <Appbar.Header style={{height: 40}}>\n            <Appbar.Content title=\"Casdoor\" />\n            <Menu\n              visible={menuVisible}\n              anchor={\n                <Button\n                  style={{marginRight: 10, backgroundColor: \"transparent\", height: 40}}\n                  onPress={userInfo === null ? handleCasdoorLogin : openMenu}\n                >\n                  {\n                    userInfo === null ?\n                      null :\n                      <Avatar.Image\n                        size={32}\n                        source={{uri: userInfo.avatar}}\n                        style={{marginRight: 10, backgroundColor: \"transparent\"}}\n                      />\n                  }\n                  <Text style={{marginRight: 10}} variant=\"titleMedium\">\n                    {userInfo === null ? \"Login\" : userInfo.name}\n                  </Text>\n                </Button>\n              }\n              onDismiss={closeMenu}\n            >\n              <Menu.Item onPress={() => handleMenuLogoutClicked()} title=\"Logout\" />\n            </Menu>\n          </Appbar.Header>\n          {showLoginPage && <CasdoorLoginPage onWebviewClose={handleHideLoginPage} />}\n        </View>\n      );\n    };\n    \n    export default Header;\n    ```\n\n\n## 子组件使用父组件的函数等参数\n\n在父组件中：\n\n定义好相关函数及变量，将参数传递给子组件。\n\n```jsx\nconst [placeholder, setPlaceholder] = React.useState(\"\");\n\nconst closeEditAccountModal = () => {\n    setShowEditAccountModal(false);\n};\n\nconst onAccountEdit = (accountDescp) => {\n    const accountToEdit = accountList.find(account => account.getEditStatus() === true);\n    if (accountToEdit) {\n      accountToEdit.setTitle(accountDescp);\n    }\n    setPlaceholder(\"\");\n    closeEditAccountModal();\n}\n\n<EditAccountDetails onClose={closeEditAccountModal} onEdit={onAccountEdit} placeholder={placeholder} />\n```\n\n在子组件中：\n\n添加相关代码，将父组件的函数等参数接收过来，然后就可以使用父组件的相关参数了。\n\n```jsx\nimport React, {useState} from \"react\";\nimport {Text, TextInput, View} from \"react-native\";\nimport {Button, IconButton} from \"react-native-paper\";\nimport PropTypes from \"prop-types\";\n\nexport default function EnterAccountDetails({onClose, onEdit, placeholder}) {\n  EnterAccountDetails.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    placeholder: PropTypes.string.isRequired,\n  };\n\n  const [description, setDescription] = useState(\"\");\n\n  const handleConfirm = () => {\n    onEdit(description);\n  };\n  return (\n    <View style={{flex: 1, justifyContent: \"center\", alignItems: \"center\"}}>\n      <Text style={{fontSize: 24, marginBottom: 5}}>Enter new description</Text>\n      <View style={{flexDirection: \"row\", alignItems: \"center\"}}>\n        <IconButton icon=\"account-details\" size={35} />\n        <TextInput\n          placeholder={placeholder}\n          value={description}\n          onChangeText={(text) => setDescription(text)}\n          style={{borderWidth: 3, borderColor: \"white\", margin: 10, width: 230, height: 50, borderRadius: 5, fontSize: 18, color: \"gray\", paddingLeft: 10}}\n        />\n      </View>\n      <Button\n        style={{\n          backgroundColor: \"#E6DFF3\",\n          borderRadius: 5,\n          margin: 10,\n          alignItems: \"center\",\n          position: \"absolute\",\n          top: 160,\n          width: 300,\n        }}\n        onPress={handleConfirm}\n      >\n        <Text style={{fontSize: 18, width: 280}}>Confirm</Text>\n      </Button>\n      <IconButton icon={\"close\"} size={30} onPress={onClose} style={{position: \"absolute\", top: 5, right: 5}} />\n    </View>\n  );\n}\n```\n\n## 父组件使用自组件的函数等参数\n\n在子组件中：\n\n将父组件要使用的函数导出：\n\n```jsx\nimport React, {useEffect} from \"react\";\nimport {WebView} from \"react-native-webview\";\nimport {View} from \"react-native\";\nimport {Portal} from \"react-native-paper\";\nimport CasdoorSdkConfig from \"./CasdoorSdkConfig\";\nimport SDK from \"casdoor-react-native-sdk\";\nimport UserContext from \"./UserContext\";\nimport PropTypes from \"prop-types\";\n// import {LogBox} from \"react-native\";\n// LogBox.ignoreAllLogs();\nconst sdk = new SDK(CasdoorSdkConfig);\n\nconst CasdoorLoginPage = ({onWebviewClose}) => {\n  CasdoorLoginPage.propTypes = {\n    onWebviewClose: PropTypes.func.isRequired,\n  };\n  const [casdoorLoginURL, setCasdoorLoginURL] = React.useState(\"\");\n  const {setUserInfo} = React.useContext(UserContext);\n  const getCasdoorSignInUrl = async() => {\n    const signinUrl = await sdk.getSigninUrl();\n    setCasdoorLoginURL(signinUrl);\n  };\n\n  useEffect(() => {\n    getCasdoorSignInUrl();\n  }, []);\n\n  const onNavigationStateChange = async(navState) => {\n    if (navState.url.startsWith(CasdoorSdkConfig.redirectPath)) {\n      onWebviewClose();\n      const token = await sdk.getAccessToken(navState.url);\n      const userInfo = sdk.JwtDecode(token);\n      setUserInfo(userInfo);\n    }\n  };\n\n  return (\n    <Portal>\n      <View style={{flex: 1}}>\n        {casdoorLoginURL !== \"\" && (\n          <WebView\n            source={{uri: casdoorLoginURL}}\n            onNavigationStateChange={onNavigationStateChange}\n            style={{flex: 1}}\n            mixedContentMode=\"always\"\n            javaScriptEnabled={true}\n          />\n        )}\n      </View>\n    </Portal>\n  );\n};\n\nexport const CasdoorLogout = () => {\n  sdk.clearState();\n};\nexport default CasdoorLoginPage;\n```\n\n在父组件中：\n\n导入子组件及其导出的函数，注意导出的方式，导出的组件直接 `import` ，导出的组件的函数要使用花括号来包裹。\n","slug":"react技巧","published":1,"layout":"post","photos":[],"link":"","_id":"clx1l2pdv000qnfgndm6xcf6i","content":"<blockquote>\n<p>主要是对开源项目中react-native的一些使用技巧进行总结。具体项目见：<a href=\"https://github.com/cwp0/casdoor-app\">casdoor-app</a></p>\n</blockquote>\n<blockquote>\n<p>后面如果做react的话可能也会做一些总结，到时候再加。</p>\n</blockquote>\n<h1 id=\"react-native\"><a href=\"#react-native\" class=\"headerlink\" title=\"react-native\"></a>react-native</h1><h2 id=\"React-Context\"><a href=\"#React-Context\" class=\"headerlink\" title=\"React Context\"></a>React Context</h2><p>用于在不同的组件中或者 <code>js</code> 文件中共享同一个数据。</p>\n<p>使用方法：</p>\n<p>例如要共享 <code>userInfo</code></p>\n<ol>\n<li><p>在应用程序中创建一个 <code>React Context</code>，用于共享 <code>userInfo</code>。</p>\n<p><code>UserContext.js</code></p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">UserContext</span> = <span class=\"title class_\">React</span>.<span class=\"title function_\">createContext</span>();</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">UserProvider</span> = <span class=\"title class_\">UserContext</span>.<span class=\"property\">Provider</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">UserConsumer</span> = <span class=\"title class_\">UserContext</span>.<span class=\"property\">Consumer</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">UserContext</span>;</span><br></pre></td></tr></table></figure>\n\n</li>\n<li><p>在 <code>App.js</code> 中使用 <strong><code>UserProvider</code></strong> 包裹应用程序</p>\n<p>注意这里要设置需要共享的数据 <code>value=&#123;&#123;userInfo, setUserInfo&#125;&#125;</code></p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">PaperProvider</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-native-paper&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">NavigationBar</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./NavigationBar&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">NavigationContainer</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@react-navigation/native&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Header</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Header&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">UserProvider</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./UserContext&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">App</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [userInfo, setUserInfo] = <span class=\"title class_\">React</span>.<span class=\"title function_\">useState</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">UserProvider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;userInfo,</span> <span class=\"attr\">setUserInfo</span>&#125;&#125; &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">NavigationContainer</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">PaperProvider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Header</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">NavigationBar</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">PaperProvider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">NavigationContainer</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">UserProvider</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br></pre></td></tr></table></figure>\n\n</li>\n<li><p>在其他组件中，通过导入 <code>UserContext.js</code> 进行使用共享的数据。</p>\n<p>注意：声明新的 <code>React.useContext</code>的时候需要用花括号。</p>\n<p><code>Header.js</code></p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">Appbar</span>, <span class=\"title class_\">Avatar</span>, <span class=\"title class_\">Button</span>, <span class=\"title class_\">Menu</span>, <span class=\"title class_\">Text</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-native-paper&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">UserContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./UserContext&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">View</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-native&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">CasdoorLoginPage</span>, &#123;<span class=\"title class_\">CasdoorLogout</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./CasdoorLoginPage&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Header</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;userInfo, setUserInfo&#125; = <span class=\"title class_\">React</span>.<span class=\"title function_\">useContext</span>(<span class=\"title class_\">UserContext</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [showLoginPage, setShowLoginPage] = <span class=\"title class_\">React</span>.<span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [menuVisible, setMenuVisible] = <span class=\"title class_\">React</span>.<span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">openMenu</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title function_\">setMenuVisible</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">closeMenu</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title function_\">setMenuVisible</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">handleMenuLogoutClicked</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">handleCasdoorLogout</span>();</span><br><span class=\"line\">    <span class=\"title function_\">closeMenu</span>();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">handleCasdoorLogin</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setShowLoginPage</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">handleCasdoorLogout</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title class_\">CasdoorLogout</span>();</span><br><span class=\"line\">    <span class=\"title function_\">setUserInfo</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">handleHideLoginPage</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setShowLoginPage</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Appbar.Header</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;height:</span> <span class=\"attr\">40</span>&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Appbar.Content</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;Casdoor&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Menu</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">visible</span>=<span class=\"string\">&#123;menuVisible&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">anchor</span>=<span class=\"string\">&#123;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            &lt;<span class=\"attr\">Button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;marginRight:</span> <span class=\"attr\">10</span>, <span class=\"attr\">backgroundColor:</span> &quot;<span class=\"attr\">transparent</span>&quot;, <span class=\"attr\">height:</span> <span class=\"attr\">40</span>&#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;userInfo</span> === <span class=\"string\">null</span> ? <span class=\"attr\">handleCasdoorLogin</span> <span class=\"attr\">:</span> <span class=\"attr\">openMenu</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                userInfo === null ?</span></span><br><span class=\"line\"><span class=\"language-xml\">                  null :</span></span><br><span class=\"line\"><span class=\"language-xml\">                  <span class=\"tag\">&lt;<span class=\"name\">Avatar.Image</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">size</span>=<span class=\"string\">&#123;32&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">source</span>=<span class=\"string\">&#123;&#123;uri:</span> <span class=\"attr\">userInfo.avatar</span>&#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;marginRight:</span> <span class=\"attr\">10</span>, <span class=\"attr\">backgroundColor:</span> &quot;<span class=\"attr\">transparent</span>&quot;&#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                  /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;marginRight:</span> <span class=\"attr\">10</span>&#125;&#125; <span class=\"attr\">variant</span>=<span class=\"string\">&quot;titleMedium&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                &#123;userInfo === null ? &quot;Login&quot; : userInfo.name&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          onDismiss=&#123;closeMenu&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Menu.Item</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt;</span> handleMenuLogoutClicked()&#125; title=&quot;Logout&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Menu</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Appbar.Header</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;showLoginPage &amp;&amp; <span class=\"tag\">&lt;<span class=\"name\">CasdoorLoginPage</span> <span class=\"attr\">onWebviewClose</span>=<span class=\"string\">&#123;handleHideLoginPage&#125;</span> /&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Header</span>;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"子组件使用父组件的函数等参数\"><a href=\"#子组件使用父组件的函数等参数\" class=\"headerlink\" title=\"子组件使用父组件的函数等参数\"></a>子组件使用父组件的函数等参数</h2><p>在父组件中：</p>\n<p>定义好相关函数及变量，将参数传递给子组件。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [placeholder, setPlaceholder] = <span class=\"title class_\">React</span>.<span class=\"title function_\">useState</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">closeEditAccountModal</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setShowEditAccountModal</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">onAccountEdit</span> = (<span class=\"params\">accountDescp</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> accountToEdit = accountList.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">account</span> =&gt;</span> account.<span class=\"title function_\">getEditStatus</span>() === <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (accountToEdit) &#123;</span><br><span class=\"line\">      accountToEdit.<span class=\"title function_\">setTitle</span>(accountDescp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">setPlaceholder</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    <span class=\"title function_\">closeEditAccountModal</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"title class_\">EditAccountDetails</span> onClose=&#123;closeEditAccountModal&#125; onEdit=&#123;onAccountEdit&#125; placeholder=&#123;placeholder&#125; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在子组件中：</p>\n<p>添加相关代码，将父组件的函数等参数接收过来，然后就可以使用父组件的相关参数了。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123;useState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">Text</span>, <span class=\"title class_\">TextInput</span>, <span class=\"title class_\">View</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-native&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">Button</span>, <span class=\"title class_\">IconButton</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-native-paper&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">PropTypes</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;prop-types&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">EnterAccountDetails</span>(<span class=\"params\">&#123;onClose, onEdit, placeholder&#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">EnterAccountDetails</span>.<span class=\"property\">propTypes</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">onClose</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">func</span>.<span class=\"property\">isRequired</span>,</span><br><span class=\"line\">    <span class=\"attr\">onEdit</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">func</span>.<span class=\"property\">isRequired</span>,</span><br><span class=\"line\">    <span class=\"attr\">placeholder</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">string</span>.<span class=\"property\">isRequired</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [description, setDescription] = <span class=\"title function_\">useState</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">handleConfirm</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">onEdit</span>(description);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;flex:</span> <span class=\"attr\">1</span>, <span class=\"attr\">justifyContent:</span> &quot;<span class=\"attr\">center</span>&quot;, <span class=\"attr\">alignItems:</span> &quot;<span class=\"attr\">center</span>&quot;&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;fontSize:</span> <span class=\"attr\">24</span>, <span class=\"attr\">marginBottom:</span> <span class=\"attr\">5</span>&#125;&#125;&gt;</span>Enter new description<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;flexDirection:</span> &quot;<span class=\"attr\">row</span>&quot;, <span class=\"attr\">alignItems:</span> &quot;<span class=\"attr\">center</span>&quot;&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">IconButton</span> <span class=\"attr\">icon</span>=<span class=\"string\">&quot;account-details&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&#123;35&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">TextInput</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">placeholder</span>=<span class=\"string\">&#123;placeholder&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">value</span>=<span class=\"string\">&#123;description&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">onChangeText</span>=<span class=\"string\">&#123;(text)</span> =&gt;</span> setDescription(text)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          style=&#123;&#123;borderWidth: 3, borderColor: &quot;white&quot;, margin: 10, width: 230, height: 50, borderRadius: 5, fontSize: 18, color: &quot;gray&quot;, paddingLeft: 10&#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">backgroundColor:</span> &quot;#<span class=\"attr\">E6DFF3</span>&quot;,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">borderRadius:</span> <span class=\"attr\">5</span>,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">margin:</span> <span class=\"attr\">10</span>,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">alignItems:</span> &quot;<span class=\"attr\">center</span>&quot;,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">position:</span> &quot;<span class=\"attr\">absolute</span>&quot;,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">top:</span> <span class=\"attr\">160</span>,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">width:</span> <span class=\"attr\">300</span>,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;handleConfirm&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;fontSize:</span> <span class=\"attr\">18</span>, <span class=\"attr\">width:</span> <span class=\"attr\">280</span>&#125;&#125;&gt;</span>Confirm<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">IconButton</span> <span class=\"attr\">icon</span>=<span class=\"string\">&#123;</span>&quot;<span class=\"attr\">close</span>&quot;&#125; <span class=\"attr\">size</span>=<span class=\"string\">&#123;30&#125;</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;onClose&#125;</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;position:</span> &quot;<span class=\"attr\">absolute</span>&quot;, <span class=\"attr\">top:</span> <span class=\"attr\">5</span>, <span class=\"attr\">right:</span> <span class=\"attr\">5</span>&#125;&#125; /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"父组件使用自组件的函数等参数\"><a href=\"#父组件使用自组件的函数等参数\" class=\"headerlink\" title=\"父组件使用自组件的函数等参数\"></a>父组件使用自组件的函数等参数</h2><p>在子组件中：</p>\n<p>将父组件要使用的函数导出：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123;useEffect&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">WebView</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-native-webview&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">View</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-native&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">Portal</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-native-paper&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">CasdoorSdkConfig</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./CasdoorSdkConfig&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"variable constant_\">SDK</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;casdoor-react-native-sdk&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">UserContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./UserContext&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">PropTypes</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;prop-types&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// import &#123;LogBox&#125; from &quot;react-native&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">// LogBox.ignoreAllLogs();</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sdk = <span class=\"keyword\">new</span> <span class=\"title function_\">SDK</span>(<span class=\"title class_\">CasdoorSdkConfig</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">CasdoorLoginPage</span> = (<span class=\"params\">&#123;onWebviewClose&#125;</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"title class_\">CasdoorLoginPage</span>.<span class=\"property\">propTypes</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">onWebviewClose</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">func</span>.<span class=\"property\">isRequired</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [casdoorLoginURL, setCasdoorLoginURL] = <span class=\"title class_\">React</span>.<span class=\"title function_\">useState</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;setUserInfo&#125; = <span class=\"title class_\">React</span>.<span class=\"title function_\">useContext</span>(<span class=\"title class_\">UserContext</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">getCasdoorSignInUrl</span> = <span class=\"keyword\">async</span>(<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> signinUrl = <span class=\"keyword\">await</span> sdk.<span class=\"title function_\">getSigninUrl</span>();</span><br><span class=\"line\">    <span class=\"title function_\">setCasdoorLoginURL</span>(signinUrl);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">getCasdoorSignInUrl</span>();</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">onNavigationStateChange</span> = <span class=\"keyword\">async</span>(<span class=\"params\">navState</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (navState.<span class=\"property\">url</span>.<span class=\"title function_\">startsWith</span>(<span class=\"title class_\">CasdoorSdkConfig</span>.<span class=\"property\">redirectPath</span>)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onWebviewClose</span>();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> token = <span class=\"keyword\">await</span> sdk.<span class=\"title function_\">getAccessToken</span>(navState.<span class=\"property\">url</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> userInfo = sdk.<span class=\"title class_\">JwtDecode</span>(token);</span><br><span class=\"line\">      <span class=\"title function_\">setUserInfo</span>(userInfo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Portal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;flex:</span> <span class=\"attr\">1</span>&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;casdoorLoginURL !== &quot;&quot; &amp;&amp; (</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">WebView</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">source</span>=<span class=\"string\">&#123;&#123;uri:</span> <span class=\"attr\">casdoorLoginURL</span>&#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">onNavigationStateChange</span>=<span class=\"string\">&#123;onNavigationStateChange&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;flex:</span> <span class=\"attr\">1</span>&#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">mixedContentMode</span>=<span class=\"string\">&quot;always&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">javaScriptEnabled</span>=<span class=\"string\">&#123;true&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        )&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Portal</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">CasdoorLogout</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  sdk.<span class=\"title function_\">clearState</span>();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">CasdoorLoginPage</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在父组件中：</p>\n<p>导入子组件及其导出的函数，注意导出的方式，导出的组件直接 <code>import</code> ，导出的组件的函数要使用花括号来包裹。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<blockquote>\n<p>主要是对开源项目中react-native的一些使用技巧进行总结。具体项目见：<a href=\"https://github.com/cwp0/casdoor-app\">casdoor-app</a></p>\n</blockquote>\n<blockquote>\n<p>后面如果做react的话可能也会做一些总结，到时候再加。</p>\n</blockquote>\n<h1 id=\"react-native\"><a href=\"#react-native\" class=\"headerlink\" title=\"react-native\"></a>react-native</h1><h2 id=\"React-Context\"><a href=\"#React-Context\" class=\"headerlink\" title=\"React Context\"></a>React Context</h2><p>用于在不同的组件中或者 <code>js</code> 文件中共享同一个数据。</p>\n<p>使用方法：</p>\n<p>例如要共享 <code>userInfo</code></p>\n<ol>\n<li><p>在应用程序中创建一个 <code>React Context</code>，用于共享 <code>userInfo</code>。</p>\n<p><code>UserContext.js</code></p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title class_\">UserContext</span> = <span class=\"title class_\">React</span>.<span class=\"title function_\">createContext</span>();</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">UserProvider</span> = <span class=\"title class_\">UserContext</span>.<span class=\"property\">Provider</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title class_\">UserConsumer</span> = <span class=\"title class_\">UserContext</span>.<span class=\"property\">Consumer</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">UserContext</span>;</span><br></pre></td></tr></table></figure>\n\n</li>\n<li><p>在 <code>App.js</code> 中使用 <strong><code>UserProvider</code></strong> 包裹应用程序</p>\n<p>注意这里要设置需要共享的数据 <code>value=&#123;&#123;userInfo, setUserInfo&#125;&#125;</code></p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">PaperProvider</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-native-paper&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">NavigationBar</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./NavigationBar&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">NavigationContainer</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@react-navigation/native&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">Header</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./Header&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">UserProvider</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./UserContext&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">App</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [userInfo, setUserInfo] = <span class=\"title class_\">React</span>.<span class=\"title function_\">useState</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">UserProvider</span> <span class=\"attr\">value</span>=<span class=\"string\">&#123;&#123;userInfo,</span> <span class=\"attr\">setUserInfo</span>&#125;&#125; &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">NavigationContainer</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">PaperProvider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Header</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">NavigationBar</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">PaperProvider</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">NavigationContainer</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">UserProvider</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">App</span>;</span><br></pre></td></tr></table></figure>\n\n</li>\n<li><p>在其他组件中，通过导入 <code>UserContext.js</code> 进行使用共享的数据。</p>\n<p>注意：声明新的 <code>React.useContext</code>的时候需要用花括号。</p>\n<p><code>Header.js</code></p>\n <figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> <span class=\"title class_\">React</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">Appbar</span>, <span class=\"title class_\">Avatar</span>, <span class=\"title class_\">Button</span>, <span class=\"title class_\">Menu</span>, <span class=\"title class_\">Text</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-native-paper&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">UserContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./UserContext&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">View</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-native&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">CasdoorLoginPage</span>, &#123;<span class=\"title class_\">CasdoorLogout</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./CasdoorLoginPage&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">Header</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;userInfo, setUserInfo&#125; = <span class=\"title class_\">React</span>.<span class=\"title function_\">useContext</span>(<span class=\"title class_\">UserContext</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [showLoginPage, setShowLoginPage] = <span class=\"title class_\">React</span>.<span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [menuVisible, setMenuVisible] = <span class=\"title class_\">React</span>.<span class=\"title function_\">useState</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">openMenu</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title function_\">setMenuVisible</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">closeMenu</span> = (<span class=\"params\"></span>) =&gt; <span class=\"title function_\">setMenuVisible</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">handleMenuLogoutClicked</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">handleCasdoorLogout</span>();</span><br><span class=\"line\">    <span class=\"title function_\">closeMenu</span>();</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">handleCasdoorLogin</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setShowLoginPage</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">handleCasdoorLogout</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title class_\">CasdoorLogout</span>();</span><br><span class=\"line\">    <span class=\"title function_\">setUserInfo</span>(<span class=\"literal\">null</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">handleHideLoginPage</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setShowLoginPage</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Appbar.Header</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;height:</span> <span class=\"attr\">40</span>&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Appbar.Content</span> <span class=\"attr\">title</span>=<span class=\"string\">&quot;Casdoor&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Menu</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">visible</span>=<span class=\"string\">&#123;menuVisible&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">anchor</span>=<span class=\"string\">&#123;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            &lt;<span class=\"attr\">Button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;marginRight:</span> <span class=\"attr\">10</span>, <span class=\"attr\">backgroundColor:</span> &quot;<span class=\"attr\">transparent</span>&quot;, <span class=\"attr\">height:</span> <span class=\"attr\">40</span>&#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">              <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;userInfo</span> === <span class=\"string\">null</span> ? <span class=\"attr\">handleCasdoorLogin</span> <span class=\"attr\">:</span> <span class=\"attr\">openMenu</span>&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              &#123;</span></span><br><span class=\"line\"><span class=\"language-xml\">                userInfo === null ?</span></span><br><span class=\"line\"><span class=\"language-xml\">                  null :</span></span><br><span class=\"line\"><span class=\"language-xml\">                  <span class=\"tag\">&lt;<span class=\"name\">Avatar.Image</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">size</span>=<span class=\"string\">&#123;32&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">source</span>=<span class=\"string\">&#123;&#123;uri:</span> <span class=\"attr\">userInfo.avatar</span>&#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                    <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;marginRight:</span> <span class=\"attr\">10</span>, <span class=\"attr\">backgroundColor:</span> &quot;<span class=\"attr\">transparent</span>&quot;&#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">                  /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">              &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;marginRight:</span> <span class=\"attr\">10</span>&#125;&#125; <span class=\"attr\">variant</span>=<span class=\"string\">&quot;titleMedium&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                &#123;userInfo === null ? &quot;Login&quot; : userInfo.name&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">              <span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">          &#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          onDismiss=&#123;closeMenu&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        &gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">Menu.Item</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;()</span> =&gt;</span> handleMenuLogoutClicked()&#125; title=&quot;Logout&quot; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">Menu</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Appbar.Header</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      &#123;showLoginPage &amp;&amp; <span class=\"tag\">&lt;<span class=\"name\">CasdoorLoginPage</span> <span class=\"attr\">onWebviewClose</span>=<span class=\"string\">&#123;handleHideLoginPage&#125;</span> /&gt;</span>&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">Header</span>;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"子组件使用父组件的函数等参数\"><a href=\"#子组件使用父组件的函数等参数\" class=\"headerlink\" title=\"子组件使用父组件的函数等参数\"></a>子组件使用父组件的函数等参数</h2><p>在父组件中：</p>\n<p>定义好相关函数及变量，将参数传递给子组件。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [placeholder, setPlaceholder] = <span class=\"title class_\">React</span>.<span class=\"title function_\">useState</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">closeEditAccountModal</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">setShowEditAccountModal</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">onAccountEdit</span> = (<span class=\"params\">accountDescp</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> accountToEdit = accountList.<span class=\"title function_\">find</span>(<span class=\"function\"><span class=\"params\">account</span> =&gt;</span> account.<span class=\"title function_\">getEditStatus</span>() === <span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (accountToEdit) &#123;</span><br><span class=\"line\">      accountToEdit.<span class=\"title function_\">setTitle</span>(accountDescp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">setPlaceholder</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">    <span class=\"title function_\">closeEditAccountModal</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;<span class=\"title class_\">EditAccountDetails</span> onClose=&#123;closeEditAccountModal&#125; onEdit=&#123;onAccountEdit&#125; placeholder=&#123;placeholder&#125; /&gt;</span><br></pre></td></tr></table></figure>\n\n<p>在子组件中：</p>\n<p>添加相关代码，将父组件的函数等参数接收过来，然后就可以使用父组件的相关参数了。</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123;useState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">Text</span>, <span class=\"title class_\">TextInput</span>, <span class=\"title class_\">View</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-native&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">Button</span>, <span class=\"title class_\">IconButton</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-native-paper&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">PropTypes</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;prop-types&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">function</span> <span class=\"title function_\">EnterAccountDetails</span>(<span class=\"params\">&#123;onClose, onEdit, placeholder&#125;</span>) &#123;</span><br><span class=\"line\">  <span class=\"title class_\">EnterAccountDetails</span>.<span class=\"property\">propTypes</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">onClose</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">func</span>.<span class=\"property\">isRequired</span>,</span><br><span class=\"line\">    <span class=\"attr\">onEdit</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">func</span>.<span class=\"property\">isRequired</span>,</span><br><span class=\"line\">    <span class=\"attr\">placeholder</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">string</span>.<span class=\"property\">isRequired</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [description, setDescription] = <span class=\"title function_\">useState</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">handleConfirm</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"title function_\">onEdit</span>(description);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;flex:</span> <span class=\"attr\">1</span>, <span class=\"attr\">justifyContent:</span> &quot;<span class=\"attr\">center</span>&quot;, <span class=\"attr\">alignItems:</span> &quot;<span class=\"attr\">center</span>&quot;&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;fontSize:</span> <span class=\"attr\">24</span>, <span class=\"attr\">marginBottom:</span> <span class=\"attr\">5</span>&#125;&#125;&gt;</span>Enter new description<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;flexDirection:</span> &quot;<span class=\"attr\">row</span>&quot;, <span class=\"attr\">alignItems:</span> &quot;<span class=\"attr\">center</span>&quot;&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">IconButton</span> <span class=\"attr\">icon</span>=<span class=\"string\">&quot;account-details&quot;</span> <span class=\"attr\">size</span>=<span class=\"string\">&#123;35&#125;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">TextInput</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">placeholder</span>=<span class=\"string\">&#123;placeholder&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">value</span>=<span class=\"string\">&#123;description&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">onChangeText</span>=<span class=\"string\">&#123;(text)</span> =&gt;</span> setDescription(text)&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">          style=&#123;&#123;borderWidth: 3, borderColor: &quot;white&quot;, margin: 10, width: 230, height: 50, borderRadius: 5, fontSize: 18, color: &quot;gray&quot;, paddingLeft: 10&#125;&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">        /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">Button</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">backgroundColor:</span> &quot;#<span class=\"attr\">E6DFF3</span>&quot;,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">borderRadius:</span> <span class=\"attr\">5</span>,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">margin:</span> <span class=\"attr\">10</span>,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">alignItems:</span> &quot;<span class=\"attr\">center</span>&quot;,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">position:</span> &quot;<span class=\"attr\">absolute</span>&quot;,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">top:</span> <span class=\"attr\">160</span>,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          <span class=\"attr\">width:</span> <span class=\"attr\">300</span>,</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        &#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">        <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;handleConfirm&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">      &gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">Text</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;fontSize:</span> <span class=\"attr\">18</span>, <span class=\"attr\">width:</span> <span class=\"attr\">280</span>&#125;&#125;&gt;</span>Confirm<span class=\"tag\">&lt;/<span class=\"name\">Text</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">Button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">IconButton</span> <span class=\"attr\">icon</span>=<span class=\"string\">&#123;</span>&quot;<span class=\"attr\">close</span>&quot;&#125; <span class=\"attr\">size</span>=<span class=\"string\">&#123;30&#125;</span> <span class=\"attr\">onPress</span>=<span class=\"string\">&#123;onClose&#125;</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;position:</span> &quot;<span class=\"attr\">absolute</span>&quot;, <span class=\"attr\">top:</span> <span class=\"attr\">5</span>, <span class=\"attr\">right:</span> <span class=\"attr\">5</span>&#125;&#125; /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"父组件使用自组件的函数等参数\"><a href=\"#父组件使用自组件的函数等参数\" class=\"headerlink\" title=\"父组件使用自组件的函数等参数\"></a>父组件使用自组件的函数等参数</h2><p>在子组件中：</p>\n<p>将父组件要使用的函数导出：</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">React</span>, &#123;useEffect&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">WebView</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-native-webview&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">View</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-native&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;<span class=\"title class_\">Portal</span>&#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-native-paper&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">CasdoorSdkConfig</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./CasdoorSdkConfig&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"variable constant_\">SDK</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;casdoor-react-native-sdk&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">UserContext</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;./UserContext&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"title class_\">PropTypes</span> <span class=\"keyword\">from</span> <span class=\"string\">&quot;prop-types&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// import &#123;LogBox&#125; from &quot;react-native&quot;;</span></span><br><span class=\"line\"><span class=\"comment\">// LogBox.ignoreAllLogs();</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sdk = <span class=\"keyword\">new</span> <span class=\"title function_\">SDK</span>(<span class=\"title class_\">CasdoorSdkConfig</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">CasdoorLoginPage</span> = (<span class=\"params\">&#123;onWebviewClose&#125;</span>) =&gt; &#123;</span><br><span class=\"line\">  <span class=\"title class_\">CasdoorLoginPage</span>.<span class=\"property\">propTypes</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">onWebviewClose</span>: <span class=\"title class_\">PropTypes</span>.<span class=\"property\">func</span>.<span class=\"property\">isRequired</span>,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [casdoorLoginURL, setCasdoorLoginURL] = <span class=\"title class_\">React</span>.<span class=\"title function_\">useState</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;setUserInfo&#125; = <span class=\"title class_\">React</span>.<span class=\"title function_\">useContext</span>(<span class=\"title class_\">UserContext</span>);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">getCasdoorSignInUrl</span> = <span class=\"keyword\">async</span>(<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> signinUrl = <span class=\"keyword\">await</span> sdk.<span class=\"title function_\">getSigninUrl</span>();</span><br><span class=\"line\">    <span class=\"title function_\">setCasdoorLoginURL</span>(signinUrl);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">useEffect</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">getCasdoorSignInUrl</span>();</span><br><span class=\"line\">  &#125;, []);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> <span class=\"title function_\">onNavigationStateChange</span> = <span class=\"keyword\">async</span>(<span class=\"params\">navState</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (navState.<span class=\"property\">url</span>.<span class=\"title function_\">startsWith</span>(<span class=\"title class_\">CasdoorSdkConfig</span>.<span class=\"property\">redirectPath</span>)) &#123;</span><br><span class=\"line\">      <span class=\"title function_\">onWebviewClose</span>();</span><br><span class=\"line\">      <span class=\"keyword\">const</span> token = <span class=\"keyword\">await</span> sdk.<span class=\"title function_\">getAccessToken</span>(navState.<span class=\"property\">url</span>);</span><br><span class=\"line\">      <span class=\"keyword\">const</span> userInfo = sdk.<span class=\"title class_\">JwtDecode</span>(token);</span><br><span class=\"line\">      <span class=\"title function_\">setUserInfo</span>(userInfo);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Portal</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;<span class=\"name\">View</span> <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;flex:</span> <span class=\"attr\">1</span>&#125;&#125;&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        &#123;casdoorLoginURL !== &quot;&quot; &amp;&amp; (</span></span><br><span class=\"line\"><span class=\"language-xml\">          <span class=\"tag\">&lt;<span class=\"name\">WebView</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">source</span>=<span class=\"string\">&#123;&#123;uri:</span> <span class=\"attr\">casdoorLoginURL</span>&#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">onNavigationStateChange</span>=<span class=\"string\">&#123;onNavigationStateChange&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">style</span>=<span class=\"string\">&#123;&#123;flex:</span> <span class=\"attr\">1</span>&#125;&#125;</span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">mixedContentMode</span>=<span class=\"string\">&quot;always&quot;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">            <span class=\"attr\">javaScriptEnabled</span>=<span class=\"string\">&#123;true&#125;</span></span></span></span><br><span class=\"line\"><span class=\"tag\"><span class=\"language-xml\">          /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        )&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">View</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">    <span class=\"tag\">&lt;/<span class=\"name\">Portal</span>&gt;</span></span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> <span class=\"title function_\">CasdoorLogout</span> = (<span class=\"params\"></span>) =&gt; &#123;</span><br><span class=\"line\">  sdk.<span class=\"title function_\">clearState</span>();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"title class_\">CasdoorLoginPage</span>;</span><br></pre></td></tr></table></figure>\n\n<p>在父组件中：</p>\n<p>导入子组件及其导出的函数，注意导出的方式，导出的组件直接 <code>import</code> ，导出的组件的函数要使用花括号来包裹。</p>\n"},{"title":"k8s部署云笔记系统","description":"在k8s服务器上部署云笔记系统","top_img":"../image/k8s部署云笔记系统/可莉.png","abbrlink":16330,"date":"2023-09-19T14:35:00.000Z","updated":"2023-09-20T05:35:00.000Z","keywords":null,"comments":1,"cover":"https://s2.loli.net/2024/02/06/t5V92W3qvbceOTh.png","toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"\n> 起因是导师之前让两个研一的学弟学妹写了个前后端的云笔记系统，然后后面让我部署到服务器中，因此记录一下。\n\n## 创建namespace\n\n```kubernetes helm\n# 创建namespace\nkubectl create namespace note\n```\n\n## 1. 部署MySQL\n\n创建mysql文件夹\n\n```shell\nsudo mkdir -p /home/mysql/data\n```\n\n### 1.1 挂载数据卷\n\nnote-mysql-pvc.yaml\n\n```yaml\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: note-mysql-pv\nspec:\n  capacity:\n\tstorage: 1Gi\n  accessModes:\n\t- ReadWriteOnce\n  hostPath:\n\tpath: /home/mysql/data # 主机上的数据存储路径\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: note-mysql-pvc\nspec:\n  accessModes:\n\t- ReadWriteOnce\n  resources:\n\trequests:\n\t  storage: 1Gi\n  storageClassName: \"\"\n\tvolumeName: note-mysql-pv\n```\n\n部署\n\n```kubernetes helm\nkubectl create -f note-mysql-pvc.yaml -n note\n```\n\n查看是否部署成功：\n\n![mysql是否部署成功](../image/k8s部署云笔记系统/1.png)\n\n### 1.2 部署mysql\n\nnote-mysql.yaml\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: note-mysql-deployment\nspec:\n  replicas: 1\n  selector:\n\tmatchLabels:\n\t  app: note-mysql-pod\n  template:\n\tmetadata:\n\t  labels:\n\t\tapp: note-mysql-pod\n\tspec:\n\t  containers:\n\t\t- name: note-mysql\n\t\t  image: registry.cn-hangzhou.aliyuncs.com/lucas-njfu/note_mysql:v1.1.0\n\t\t  imagePullPolicy: IfNotPresent\n\t\t  env:\n\t\t\t- name: MYSQL_ROOT_PASSWORD\n\t\t\t  value: dfa6f1b032ee42ed95d12647225f2ff4\n\t\t  ports:\n\t\t\t- containerPort: 3306\n\t\t  volumeMounts:\n\t\t\t- name: note-mysql-persistent-storage\n\t\t\t  mountPath: /var/lib/mysql\n\tvolumes:\n\t  - name: note-mysql-persistent-storage\n\t\tpersistentVolumeClaim:\n\t\t  claimName: note-mysql-pvc # 使用之前创建的持久卷声明\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: note-mysql-service\nspec:\n  selector:\n\tapp: note-mysql-pod\n  type: NodePort # service类型\n  ports:\n  - port: 3306\n\tnodePort: 30006 # 指定绑定的node的端口(默认的取值范围是：30000-32767), 如果不指定，会默认分配\n\ttargetPort: 3306\n```\n\n部署：\n\n```kubernetes helm\nkubectl create -f note-mysql.yaml -n note\n```\n\n## 2. 部署redis\n\nnote-redis.yaml\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: note-redis-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: note-redis-pod\n  template:\n    metadata:\n      labels:\n        app: note-redis-pod\n    spec:\n      containers:\n        - name: note-redis\n          image: redis:latest\n          imagePullPolicy: IfNotPresent\n          env:\n            - name: REDIS_PASSWORD\n              value: adcc64a4a9b04324914626590fb52a1a\n          ports:\n            - containerPort: 6379\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: note-redis-service\nspec:\n  selector:\n    app: note-redis-pod\n  type: NodePort # service类型\n  ports:\n  - port: 6379\n    nodePort: 30079 # 指定绑定的node的端口(默认的取值范围是：30000-32767),如果不指定，会默认分配\n    targetPort: 6379\n```\n\n部署：\n\n```kubernetes helm\nkubectl create -f note-redis.yaml -n note\n```\n\n## 3. 部署mongodb\n\n创建mongodb文件夹\n\n```shell\nsudo mkdir -p /home/mongodb/data\n```\n\n### 3.1 挂载数据卷\n\nnote-mongodb-pvc.yaml\n\n```yaml\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: note-mongodb-pv\nspec:\n  capacity:\n    storage: 1Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: /home/mongodb/data # 主机上的数据存储路径\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: note-mongodb-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n  storageClassName: \"\"\n  volumeName: note-mongodb-pv\n```\n\n使用\n\n```kubernetes helm\nkubectl create -f note-mongodb-pvc.yaml -n note\n```\n\n查看是否装好：\n\n![mongodb-pvc](../image/k8s部署云笔记系统/2.png)\n\n### 3.2 部署\n\nnote-mongodb.yaml\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: note-mongodb-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: note-mongodb-pod\n  template:\n    metadata:\n      labels:\n        app: note-mongodb-pod\n    spec:\n      containers:\n        - name: note-mongodb\n          image: registry.cn-hangzhou.aliyuncs.com/lucas-njfu/note-mongodb:v1.1.0\n          imagePullPolicy: IfNotPresent\n          ports:\n            - containerPort: 27017\n          env:\n            - name: MONGO_INITDB_ROOT_USERNAME\n              value: admin\n            - name: MONGO_INITDB_ROOT_PASSWORD\n              value: 5c8b18289f7848e9b0af98e81562649d\n          volumeMounts:\n            - name: note-mongodb-persistent-storage\n              mountPath: /data/db\n      volumes:\n        - name: note-mongodb-persistent-storage\n          persistentVolumeClaim:\n            claimName: note-mongodb-pvc\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: note-mongodb-service\nspec:\n  selector:\n    app: note-mongodb-pod\n  type: NodePort # service类型\n  ports:\n  - port: 27017\n    nodePort: 30017 # 指定绑定的node的端口(默认的取值范围是：30000-32767),如果不指定，会默认分配\n    targetPort: 27017\n```\n\n```kubernetes helm\nkubectl create -f note-mongodb.yaml -n note\n```\n\n检查部署情况\n\n![mongodb](../image/k8s部署云笔记系统/3.png)\n\n## 4. 部署服务bert_flask\n\nbert_flask.yaml\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: bert-flask-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: bert-flask-pod\n  template:\n    metadata:\n      labels:\n        app: bert-flask-pod\n    spec:\n      containers:\n      - name: bert-flask\n        image: registry.cn-hangzhou.aliyuncs.com/lucas-njfu/bert_flask:v1.3.0\n        imagePullPolicy: IfNotPresent # Always\n        ports:\n        - containerPort: 5000\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: bert-flask-service\nspec:\n  selector:\n    app: bert-flask-pod\n  type: NodePort # service类型\n  ports:\n  - port: 5000\n    nodePort: 30050 # 指定绑定的node的端口(默认的取值范围是：30000-32767),如果不指定，会默认分配\n    targetPort: 5000\n```\n\n```kubernetes helm\nkubectl create -f bert_flask.yaml -n note\n```\n\n检查部署情况\n![bert_flask](../image/k8s部署云笔记系统/4.png)\n\n## 5. 部署服务note_cloud\n\n### 5.1 配置ConfigMap\n\n   新建application-prod.yml\n\n```yaml\nserver:\n  port: 8080\n  servlet:\n    context-path: /api\nspring:\n  datasource:\n    url: jdbc:mysql://note-mysql-service:3306/db_note\n    username: root\n    password: dfa6f1b032ee42ed95d12647225f2ff4\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    type: com.alibaba.druid.pool.DruidDataSource\n  redis:\n    host: note-redis-service\n    port: 6379\n    password: adcc64a4a9b04324914626590fb52a1a\n    lettuce:\n      pool:\n        max-active: 10\n        max-idle: 10\n        min-idle: 1\n        time-between-eviction-runs: 10s\n    jackson:\n      default-property-inclusion: non_null # JSON处理时忽略非空字段\n  data:\n    mongodb:\n      uri: mongodb://note-user:c88c1b8c2ed94010-8372efbc0879bdcb@note-mongodb-service:27017/mongodb_note\n  servlet:\n    multipart:\n      max-file-size: 10MB\n      max-request-size: 10MB\njwt:\n  base64-encoded-secret-key: lab_of_njust_cloud_computing # jwt的签名密码\nbert-base-chinese-service:\n  host: bert-flask-service\n  port: 5000\n```\n\n```kubernetes helm\nkubectl create configmap note-cloud-config -n note --fromfile=application-prod.yml\n```\n\n   查看部署状态\n   ![部署效果](../image/k8s部署云笔记系统/4.png)\n\n### 5.2 部署服务\n\nnote-cloud.yaml\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: note-cloud-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: note-cloud-pod\n  template:\n    metadata:\n      labels:\n        app: note-cloud-pod\n    spec:\n      containers:\n      - name: note-cloud\n        image: registry.cn-hangzhou.aliyuncs.com/lucas-njfu/note_cloud:v1.3.0\n        imagePullPolicy: IfNotPresent # Always\n        ports:\n        - containerPort: 8080\n        volumeMounts:\n        - name: config-volume\n          mountPath: /app/config # 配置文件将挂载到容器的/app/config目录\n      volumes:\n      - name: config-volume\n        configMap:\n          name: note-cloud-config # 引用之前创建的 ConfigMap\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: note-cloud-service\nspec:\n  selector:\n    app: note-cloud-pod\n  type: NodePort # service类型\n  ports:\n  - port: 8080\n    nodePort: 30080 # 指定绑定的node的端口(默认的取值范围是：30000-32767),如果不指定，会默认分配\n    targetPort: 8080\n```\n\n```kubernetes helm\nkubectl create -f note-cloud.yaml -n note\n```\n\n查看日志\n\n```kubernetes helm\nkubectl get pod -n note\nkubectl logs -f note-cloud-deployment-6687c5cb49-vc7kl -n note\n```\n\n## 6. 部署前端\n\nnote-nginx.yaml\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: note-nginx-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: note-nginx-pod\n  template:\n    metadata:\n      labels:\n        app: note-nginx-pod\n    spec:\n      containers:\n        - name: note-nginx\n          image: registry.cn-hangzhou.aliyuncs.com/lucas-njfu/note-nginx:v2.2.0\n          imagePullPolicy: IfNotPresent\n          ports:\n            - containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: note-nginx-service\nspec:\n  selector:\n    app: note-nginx-pod\n  type: NodePort # service类型\n  ports:\n  - port: 80\n    nodePort: 30088 # 指定绑定的node的端口(默认的取值范围是：30000-32767),如果不指定，会默认分配\n    targetPort: 80\n```\n\n```kubernetes helm\nkubectl create -f note-nginx.yaml -n note\n```\n\n## 最终部署pod查看\n\n![pod](../image/k8s部署云笔记系统/5.png)\n\n访问（连校园网，关梯子）：\n\nhttp://192.10.84.209:33395/cloudNote/\n账号：姓名小写拼音\n密码：123456\n\n\n最终效果：\n![6](../image/k8s部署云笔记系统/6.png)\n","source":"_posts/k8s部署云笔记系统.md","raw":"---\ntitle: k8s部署云笔记系统\ntags:\n  - k8s\n  - Kubernetes\n  - 教程\ncategories:\n  - Kubernetes\ndescription: 在k8s服务器上部署云笔记系统\ntop_img: ../image/k8s部署云笔记系统/可莉.png\nabbrlink: 16330\ndate: 2023-09-19 22:35:00\nupdated: 2023-09-20 13:35:00\nkeywords:\ncomments:\ncover:\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n---\n\n> 起因是导师之前让两个研一的学弟学妹写了个前后端的云笔记系统，然后后面让我部署到服务器中，因此记录一下。\n\n## 创建namespace\n\n```kubernetes helm\n# 创建namespace\nkubectl create namespace note\n```\n\n## 1. 部署MySQL\n\n创建mysql文件夹\n\n```shell\nsudo mkdir -p /home/mysql/data\n```\n\n### 1.1 挂载数据卷\n\nnote-mysql-pvc.yaml\n\n```yaml\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: note-mysql-pv\nspec:\n  capacity:\n\tstorage: 1Gi\n  accessModes:\n\t- ReadWriteOnce\n  hostPath:\n\tpath: /home/mysql/data # 主机上的数据存储路径\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: note-mysql-pvc\nspec:\n  accessModes:\n\t- ReadWriteOnce\n  resources:\n\trequests:\n\t  storage: 1Gi\n  storageClassName: \"\"\n\tvolumeName: note-mysql-pv\n```\n\n部署\n\n```kubernetes helm\nkubectl create -f note-mysql-pvc.yaml -n note\n```\n\n查看是否部署成功：\n\n![mysql是否部署成功](../image/k8s部署云笔记系统/1.png)\n\n### 1.2 部署mysql\n\nnote-mysql.yaml\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: note-mysql-deployment\nspec:\n  replicas: 1\n  selector:\n\tmatchLabels:\n\t  app: note-mysql-pod\n  template:\n\tmetadata:\n\t  labels:\n\t\tapp: note-mysql-pod\n\tspec:\n\t  containers:\n\t\t- name: note-mysql\n\t\t  image: registry.cn-hangzhou.aliyuncs.com/lucas-njfu/note_mysql:v1.1.0\n\t\t  imagePullPolicy: IfNotPresent\n\t\t  env:\n\t\t\t- name: MYSQL_ROOT_PASSWORD\n\t\t\t  value: dfa6f1b032ee42ed95d12647225f2ff4\n\t\t  ports:\n\t\t\t- containerPort: 3306\n\t\t  volumeMounts:\n\t\t\t- name: note-mysql-persistent-storage\n\t\t\t  mountPath: /var/lib/mysql\n\tvolumes:\n\t  - name: note-mysql-persistent-storage\n\t\tpersistentVolumeClaim:\n\t\t  claimName: note-mysql-pvc # 使用之前创建的持久卷声明\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: note-mysql-service\nspec:\n  selector:\n\tapp: note-mysql-pod\n  type: NodePort # service类型\n  ports:\n  - port: 3306\n\tnodePort: 30006 # 指定绑定的node的端口(默认的取值范围是：30000-32767), 如果不指定，会默认分配\n\ttargetPort: 3306\n```\n\n部署：\n\n```kubernetes helm\nkubectl create -f note-mysql.yaml -n note\n```\n\n## 2. 部署redis\n\nnote-redis.yaml\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: note-redis-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: note-redis-pod\n  template:\n    metadata:\n      labels:\n        app: note-redis-pod\n    spec:\n      containers:\n        - name: note-redis\n          image: redis:latest\n          imagePullPolicy: IfNotPresent\n          env:\n            - name: REDIS_PASSWORD\n              value: adcc64a4a9b04324914626590fb52a1a\n          ports:\n            - containerPort: 6379\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: note-redis-service\nspec:\n  selector:\n    app: note-redis-pod\n  type: NodePort # service类型\n  ports:\n  - port: 6379\n    nodePort: 30079 # 指定绑定的node的端口(默认的取值范围是：30000-32767),如果不指定，会默认分配\n    targetPort: 6379\n```\n\n部署：\n\n```kubernetes helm\nkubectl create -f note-redis.yaml -n note\n```\n\n## 3. 部署mongodb\n\n创建mongodb文件夹\n\n```shell\nsudo mkdir -p /home/mongodb/data\n```\n\n### 3.1 挂载数据卷\n\nnote-mongodb-pvc.yaml\n\n```yaml\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: note-mongodb-pv\nspec:\n  capacity:\n    storage: 1Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: /home/mongodb/data # 主机上的数据存储路径\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: note-mongodb-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 1Gi\n  storageClassName: \"\"\n  volumeName: note-mongodb-pv\n```\n\n使用\n\n```kubernetes helm\nkubectl create -f note-mongodb-pvc.yaml -n note\n```\n\n查看是否装好：\n\n![mongodb-pvc](../image/k8s部署云笔记系统/2.png)\n\n### 3.2 部署\n\nnote-mongodb.yaml\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: note-mongodb-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: note-mongodb-pod\n  template:\n    metadata:\n      labels:\n        app: note-mongodb-pod\n    spec:\n      containers:\n        - name: note-mongodb\n          image: registry.cn-hangzhou.aliyuncs.com/lucas-njfu/note-mongodb:v1.1.0\n          imagePullPolicy: IfNotPresent\n          ports:\n            - containerPort: 27017\n          env:\n            - name: MONGO_INITDB_ROOT_USERNAME\n              value: admin\n            - name: MONGO_INITDB_ROOT_PASSWORD\n              value: 5c8b18289f7848e9b0af98e81562649d\n          volumeMounts:\n            - name: note-mongodb-persistent-storage\n              mountPath: /data/db\n      volumes:\n        - name: note-mongodb-persistent-storage\n          persistentVolumeClaim:\n            claimName: note-mongodb-pvc\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: note-mongodb-service\nspec:\n  selector:\n    app: note-mongodb-pod\n  type: NodePort # service类型\n  ports:\n  - port: 27017\n    nodePort: 30017 # 指定绑定的node的端口(默认的取值范围是：30000-32767),如果不指定，会默认分配\n    targetPort: 27017\n```\n\n```kubernetes helm\nkubectl create -f note-mongodb.yaml -n note\n```\n\n检查部署情况\n\n![mongodb](../image/k8s部署云笔记系统/3.png)\n\n## 4. 部署服务bert_flask\n\nbert_flask.yaml\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: bert-flask-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: bert-flask-pod\n  template:\n    metadata:\n      labels:\n        app: bert-flask-pod\n    spec:\n      containers:\n      - name: bert-flask\n        image: registry.cn-hangzhou.aliyuncs.com/lucas-njfu/bert_flask:v1.3.0\n        imagePullPolicy: IfNotPresent # Always\n        ports:\n        - containerPort: 5000\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: bert-flask-service\nspec:\n  selector:\n    app: bert-flask-pod\n  type: NodePort # service类型\n  ports:\n  - port: 5000\n    nodePort: 30050 # 指定绑定的node的端口(默认的取值范围是：30000-32767),如果不指定，会默认分配\n    targetPort: 5000\n```\n\n```kubernetes helm\nkubectl create -f bert_flask.yaml -n note\n```\n\n检查部署情况\n![bert_flask](../image/k8s部署云笔记系统/4.png)\n\n## 5. 部署服务note_cloud\n\n### 5.1 配置ConfigMap\n\n   新建application-prod.yml\n\n```yaml\nserver:\n  port: 8080\n  servlet:\n    context-path: /api\nspring:\n  datasource:\n    url: jdbc:mysql://note-mysql-service:3306/db_note\n    username: root\n    password: dfa6f1b032ee42ed95d12647225f2ff4\n    driver-class-name: com.mysql.cj.jdbc.Driver\n    type: com.alibaba.druid.pool.DruidDataSource\n  redis:\n    host: note-redis-service\n    port: 6379\n    password: adcc64a4a9b04324914626590fb52a1a\n    lettuce:\n      pool:\n        max-active: 10\n        max-idle: 10\n        min-idle: 1\n        time-between-eviction-runs: 10s\n    jackson:\n      default-property-inclusion: non_null # JSON处理时忽略非空字段\n  data:\n    mongodb:\n      uri: mongodb://note-user:c88c1b8c2ed94010-8372efbc0879bdcb@note-mongodb-service:27017/mongodb_note\n  servlet:\n    multipart:\n      max-file-size: 10MB\n      max-request-size: 10MB\njwt:\n  base64-encoded-secret-key: lab_of_njust_cloud_computing # jwt的签名密码\nbert-base-chinese-service:\n  host: bert-flask-service\n  port: 5000\n```\n\n```kubernetes helm\nkubectl create configmap note-cloud-config -n note --fromfile=application-prod.yml\n```\n\n   查看部署状态\n   ![部署效果](../image/k8s部署云笔记系统/4.png)\n\n### 5.2 部署服务\n\nnote-cloud.yaml\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: note-cloud-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: note-cloud-pod\n  template:\n    metadata:\n      labels:\n        app: note-cloud-pod\n    spec:\n      containers:\n      - name: note-cloud\n        image: registry.cn-hangzhou.aliyuncs.com/lucas-njfu/note_cloud:v1.3.0\n        imagePullPolicy: IfNotPresent # Always\n        ports:\n        - containerPort: 8080\n        volumeMounts:\n        - name: config-volume\n          mountPath: /app/config # 配置文件将挂载到容器的/app/config目录\n      volumes:\n      - name: config-volume\n        configMap:\n          name: note-cloud-config # 引用之前创建的 ConfigMap\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: note-cloud-service\nspec:\n  selector:\n    app: note-cloud-pod\n  type: NodePort # service类型\n  ports:\n  - port: 8080\n    nodePort: 30080 # 指定绑定的node的端口(默认的取值范围是：30000-32767),如果不指定，会默认分配\n    targetPort: 8080\n```\n\n```kubernetes helm\nkubectl create -f note-cloud.yaml -n note\n```\n\n查看日志\n\n```kubernetes helm\nkubectl get pod -n note\nkubectl logs -f note-cloud-deployment-6687c5cb49-vc7kl -n note\n```\n\n## 6. 部署前端\n\nnote-nginx.yaml\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: note-nginx-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: note-nginx-pod\n  template:\n    metadata:\n      labels:\n        app: note-nginx-pod\n    spec:\n      containers:\n        - name: note-nginx\n          image: registry.cn-hangzhou.aliyuncs.com/lucas-njfu/note-nginx:v2.2.0\n          imagePullPolicy: IfNotPresent\n          ports:\n            - containerPort: 80\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: note-nginx-service\nspec:\n  selector:\n    app: note-nginx-pod\n  type: NodePort # service类型\n  ports:\n  - port: 80\n    nodePort: 30088 # 指定绑定的node的端口(默认的取值范围是：30000-32767),如果不指定，会默认分配\n    targetPort: 80\n```\n\n```kubernetes helm\nkubectl create -f note-nginx.yaml -n note\n```\n\n## 最终部署pod查看\n\n![pod](../image/k8s部署云笔记系统/5.png)\n\n访问（连校园网，关梯子）：\n\nhttp://192.10.84.209:33395/cloudNote/\n账号：姓名小写拼音\n密码：123456\n\n\n最终效果：\n![6](../image/k8s部署云笔记系统/6.png)\n","slug":"k8s部署云笔记系统","published":1,"layout":"post","photos":[],"link":"","_id":"clx1l2pdw000rnfgn97wbd0g9","content":"<blockquote>\n<p>起因是导师之前让两个研一的学弟学妹写了个前后端的云笔记系统，然后后面让我部署到服务器中，因此记录一下。</p>\n</blockquote>\n<h2 id=\"创建namespace\"><a href=\"#创建namespace\" class=\"headerlink\" title=\"创建namespace\"></a>创建namespace</h2><figure class=\"highlight plaintext\"><figcaption><span>helm</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建namespace</span><br><span class=\"line\">kubectl create namespace note</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-部署MySQL\"><a href=\"#1-部署MySQL\" class=\"headerlink\" title=\"1. 部署MySQL\"></a>1. 部署MySQL</h2><p>创建mysql文件夹</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /home/mysql/data</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-1-挂载数据卷\"><a href=\"#1-1-挂载数据卷\" class=\"headerlink\" title=\"1.1 挂载数据卷\"></a>1.1 挂载数据卷</h3><p>note-mysql-pvc.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-pv</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">\t<span class=\"attr\">storage:</span> <span class=\"string\">1Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">\t<span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">\t<span class=\"attr\">path:</span> <span class=\"string\">/home/mysql/data</span> <span class=\"comment\"># 主机上的数据存储路径</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-pvc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">\t<span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">\t<span class=\"attr\">requests:</span></span><br><span class=\"line\">\t  <span class=\"attr\">storage:</span> <span class=\"string\">1Gi</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">\t<span class=\"attr\">volumeName:</span> <span class=\"string\">note-mysql-pv</span></span><br></pre></td></tr></table></figure>\n\n<p>部署</p>\n<figure class=\"highlight plaintext\"><figcaption><span>helm</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create -f note-mysql-pvc.yaml -n note</span><br></pre></td></tr></table></figure>\n\n<p>查看是否部署成功：</p>\n<p><img src=\"/../image/k8s%E9%83%A8%E7%BD%B2%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/1.png\" alt=\"mysql是否部署成功\"></p>\n<h3 id=\"1-2-部署mysql\"><a href=\"#1-2-部署mysql\" class=\"headerlink\" title=\"1.2 部署mysql\"></a>1.2 部署mysql</h3><p>note-mysql.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">\t<span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">\t  <span class=\"attr\">app:</span> <span class=\"string\">note-mysql-pod</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">\t<span class=\"attr\">metadata:</span></span><br><span class=\"line\">\t  <span class=\"attr\">labels:</span></span><br><span class=\"line\">\t\t<span class=\"attr\">app:</span> <span class=\"string\">note-mysql-pod</span></span><br><span class=\"line\">\t<span class=\"attr\">spec:</span></span><br><span class=\"line\">\t  <span class=\"attr\">containers:</span></span><br><span class=\"line\">\t\t<span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-mysql</span></span><br><span class=\"line\">\t\t  <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lucas-njfu/note_mysql:v1.1.0</span></span><br><span class=\"line\">\t\t  <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">\t\t  <span class=\"attr\">env:</span></span><br><span class=\"line\">\t\t\t<span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_ROOT_PASSWORD</span></span><br><span class=\"line\">\t\t\t  <span class=\"attr\">value:</span> <span class=\"string\">dfa6f1b032ee42ed95d12647225f2ff4</span></span><br><span class=\"line\">\t\t  <span class=\"attr\">ports:</span></span><br><span class=\"line\">\t\t\t<span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">\t\t  <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">\t\t\t<span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-persistent-storage</span></span><br><span class=\"line\">\t\t\t  <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/mysql</span></span><br><span class=\"line\">\t<span class=\"attr\">volumes:</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-persistent-storage</span></span><br><span class=\"line\">\t\t<span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">\t\t  <span class=\"attr\">claimName:</span> <span class=\"string\">note-mysql-pvc</span> <span class=\"comment\"># 使用之前创建的持久卷声明</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-service</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">\t<span class=\"attr\">app:</span> <span class=\"string\">note-mysql-pod</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span> <span class=\"comment\"># service类型</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">\t<span class=\"attr\">nodePort:</span> <span class=\"number\">30006</span> <span class=\"comment\"># 指定绑定的node的端口(默认的取值范围是：30000-32767), 如果不指定，会默认分配</span></span><br><span class=\"line\">\t<span class=\"attr\">targetPort:</span> <span class=\"number\">3306</span></span><br></pre></td></tr></table></figure>\n\n<p>部署：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>helm</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create -f note-mysql.yaml -n note</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-部署redis\"><a href=\"#2-部署redis\" class=\"headerlink\" title=\"2. 部署redis\"></a>2. 部署redis</h2><p>note-redis.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-redis-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">note-redis-pod</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">note-redis-pod</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-redis</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">redis:latest</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">REDIS_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">adcc64a4a9b04324914626590fb52a1a</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">6379</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-redis-service</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">note-redis-pod</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span> <span class=\"comment\"># service类型</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">30079</span> <span class=\"comment\"># 指定绑定的node的端口(默认的取值范围是：30000-32767),如果不指定，会默认分配</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">6379</span></span><br></pre></td></tr></table></figure>\n\n<p>部署：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>helm</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create -f note-redis.yaml -n note</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-部署mongodb\"><a href=\"#3-部署mongodb\" class=\"headerlink\" title=\"3. 部署mongodb\"></a>3. 部署mongodb</h2><p>创建mongodb文件夹</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /home/mongodb/data</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-1-挂载数据卷\"><a href=\"#3-1-挂载数据卷\" class=\"headerlink\" title=\"3.1 挂载数据卷\"></a>3.1 挂载数据卷</h3><p>note-mongodb-pvc.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-pv</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">1Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/home/mongodb/data</span> <span class=\"comment\"># 主机上的数据存储路径</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-pvc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">1Gi</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">volumeName:</span> <span class=\"string\">note-mongodb-pv</span></span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight plaintext\"><figcaption><span>helm</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create -f note-mongodb-pvc.yaml -n note</span><br></pre></td></tr></table></figure>\n\n<p>查看是否装好：</p>\n<p><img src=\"/../image/k8s%E9%83%A8%E7%BD%B2%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/2.png\" alt=\"mongodb-pvc\"></p>\n<h3 id=\"3-2-部署\"><a href=\"#3-2-部署\" class=\"headerlink\" title=\"3.2 部署\"></a>3.2 部署</h3><p>note-mongodb.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">note-mongodb-pod</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">note-mongodb-pod</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lucas-njfu/note-mongodb:v1.1.0</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">27017</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MONGO_INITDB_ROOT_USERNAME</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">admin</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MONGO_INITDB_ROOT_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">5c8b18289f7848e9b0af98e81562649d</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-persistent-storage</span></span><br><span class=\"line\">              <span class=\"attr\">mountPath:</span> <span class=\"string\">/data/db</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-persistent-storage</span></span><br><span class=\"line\">          <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">            <span class=\"attr\">claimName:</span> <span class=\"string\">note-mongodb-pvc</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-service</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">note-mongodb-pod</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span> <span class=\"comment\"># service类型</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">27017</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">30017</span> <span class=\"comment\"># 指定绑定的node的端口(默认的取值范围是：30000-32767),如果不指定，会默认分配</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">27017</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><figcaption><span>helm</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create -f note-mongodb.yaml -n note</span><br></pre></td></tr></table></figure>\n\n<p>检查部署情况</p>\n<p><img src=\"/../image/k8s%E9%83%A8%E7%BD%B2%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/3.png\" alt=\"mongodb\"></p>\n<h2 id=\"4-部署服务bert-flask\"><a href=\"#4-部署服务bert-flask\" class=\"headerlink\" title=\"4. 部署服务bert_flask\"></a>4. 部署服务bert_flask</h2><p>bert_flask.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">bert-flask-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">bert-flask-pod</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">bert-flask-pod</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">bert-flask</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lucas-njfu/bert_flask:v1.3.0</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span> <span class=\"comment\"># Always</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">bert-flask-service</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">bert-flask-pod</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span> <span class=\"comment\"># service类型</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">5000</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">30050</span> <span class=\"comment\"># 指定绑定的node的端口(默认的取值范围是：30000-32767),如果不指定，会默认分配</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">5000</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><figcaption><span>helm</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create -f bert_flask.yaml -n note</span><br></pre></td></tr></table></figure>\n\n<p>检查部署情况<br><img src=\"/../image/k8s%E9%83%A8%E7%BD%B2%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/4.png\" alt=\"bert_flask\"></p>\n<h2 id=\"5-部署服务note-cloud\"><a href=\"#5-部署服务note-cloud\" class=\"headerlink\" title=\"5. 部署服务note_cloud\"></a>5. 部署服务note_cloud</h2><h3 id=\"5-1-配置ConfigMap\"><a href=\"#5-1-配置ConfigMap\" class=\"headerlink\" title=\"5.1 配置ConfigMap\"></a>5.1 配置ConfigMap</h3><p>   新建application-prod.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">  <span class=\"attr\">servlet:</span></span><br><span class=\"line\">    <span class=\"attr\">context-path:</span> <span class=\"string\">/api</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://note-mysql-service:3306/db_note</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">dfa6f1b032ee42ed95d12647225f2ff4</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"string\">note-redis-service</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">adcc64a4a9b04324914626590fb52a1a</span></span><br><span class=\"line\">    <span class=\"attr\">lettuce:</span></span><br><span class=\"line\">      <span class=\"attr\">pool:</span></span><br><span class=\"line\">        <span class=\"attr\">max-active:</span> <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"attr\">max-idle:</span> <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"attr\">min-idle:</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"attr\">time-between-eviction-runs:</span> <span class=\"string\">10s</span></span><br><span class=\"line\">    <span class=\"attr\">jackson:</span></span><br><span class=\"line\">      <span class=\"attr\">default-property-inclusion:</span> <span class=\"string\">non_null</span> <span class=\"comment\"># JSON处理时忽略非空字段</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">mongodb:</span></span><br><span class=\"line\">      <span class=\"attr\">uri:</span> <span class=\"string\">mongodb://note-user:c88c1b8c2ed94010-8372efbc0879bdcb@note-mongodb-service:27017/mongodb_note</span></span><br><span class=\"line\">  <span class=\"attr\">servlet:</span></span><br><span class=\"line\">    <span class=\"attr\">multipart:</span></span><br><span class=\"line\">      <span class=\"attr\">max-file-size:</span> <span class=\"string\">10MB</span></span><br><span class=\"line\">      <span class=\"attr\">max-request-size:</span> <span class=\"string\">10MB</span></span><br><span class=\"line\"><span class=\"attr\">jwt:</span></span><br><span class=\"line\">  <span class=\"attr\">base64-encoded-secret-key:</span> <span class=\"string\">lab_of_njust_cloud_computing</span> <span class=\"comment\"># jwt的签名密码</span></span><br><span class=\"line\"><span class=\"attr\">bert-base-chinese-service:</span></span><br><span class=\"line\">  <span class=\"attr\">host:</span> <span class=\"string\">bert-flask-service</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">5000</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><figcaption><span>helm</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create configmap note-cloud-config -n note --fromfile=application-prod.yml</span><br></pre></td></tr></table></figure>\n\n<p>   查看部署状态<br>   <img src=\"/../image/k8s%E9%83%A8%E7%BD%B2%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/4.png\" alt=\"部署效果\"></p>\n<h3 id=\"5-2-部署服务\"><a href=\"#5-2-部署服务\" class=\"headerlink\" title=\"5.2 部署服务\"></a>5.2 部署服务</h3><p>note-cloud.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-cloud-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">note-cloud-pod</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">note-cloud-pod</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-cloud</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lucas-njfu/note_cloud:v1.3.0</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span> <span class=\"comment\"># Always</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config-volume</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/app/config</span> <span class=\"comment\"># 配置文件将挂载到容器的/app/config目录</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config-volume</span></span><br><span class=\"line\">        <span class=\"attr\">configMap:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">note-cloud-config</span> <span class=\"comment\"># 引用之前创建的 ConfigMap</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-cloud-service</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">note-cloud-pod</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span> <span class=\"comment\"># service类型</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">30080</span> <span class=\"comment\"># 指定绑定的node的端口(默认的取值范围是：30000-32767),如果不指定，会默认分配</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><figcaption><span>helm</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create -f note-cloud.yaml -n note</span><br></pre></td></tr></table></figure>\n\n<p>查看日志</p>\n<figure class=\"highlight plaintext\"><figcaption><span>helm</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod -n note</span><br><span class=\"line\">kubectl logs -f note-cloud-deployment-6687c5cb49-vc7kl -n note</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-部署前端\"><a href=\"#6-部署前端\" class=\"headerlink\" title=\"6. 部署前端\"></a>6. 部署前端</h2><p>note-nginx.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-nginx-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">note-nginx-pod</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">note-nginx-pod</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-nginx</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lucas-njfu/note-nginx:v2.2.0</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-nginx-service</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">note-nginx-pod</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span> <span class=\"comment\"># service类型</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">30088</span> <span class=\"comment\"># 指定绑定的node的端口(默认的取值范围是：30000-32767),如果不指定，会默认分配</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><figcaption><span>helm</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create -f note-nginx.yaml -n note</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最终部署pod查看\"><a href=\"#最终部署pod查看\" class=\"headerlink\" title=\"最终部署pod查看\"></a>最终部署pod查看</h2><p><img src=\"/../image/k8s%E9%83%A8%E7%BD%B2%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/5.png\" alt=\"pod\"></p>\n<p>访问（连校园网，关梯子）：</p>\n<p><a href=\"http://192.10.84.209:33395/cloudNote/\">http://192.10.84.209:33395/cloudNote/</a><br>账号：姓名小写拼音<br>密码：123456</p>\n<p>最终效果：<br><img src=\"/../image/k8s%E9%83%A8%E7%BD%B2%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/6.png\" alt=\"6\"></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<blockquote>\n<p>起因是导师之前让两个研一的学弟学妹写了个前后端的云笔记系统，然后后面让我部署到服务器中，因此记录一下。</p>\n</blockquote>\n<h2 id=\"创建namespace\"><a href=\"#创建namespace\" class=\"headerlink\" title=\"创建namespace\"></a>创建namespace</h2><figure class=\"highlight plaintext\"><figcaption><span>helm</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 创建namespace</span><br><span class=\"line\">kubectl create namespace note</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-部署MySQL\"><a href=\"#1-部署MySQL\" class=\"headerlink\" title=\"1. 部署MySQL\"></a>1. 部署MySQL</h2><p>创建mysql文件夹</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /home/mysql/data</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-1-挂载数据卷\"><a href=\"#1-1-挂载数据卷\" class=\"headerlink\" title=\"1.1 挂载数据卷\"></a>1.1 挂载数据卷</h3><p>note-mysql-pvc.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-pv</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">\t<span class=\"attr\">storage:</span> <span class=\"string\">1Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">\t<span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">\t<span class=\"attr\">path:</span> <span class=\"string\">/home/mysql/data</span> <span class=\"comment\"># 主机上的数据存储路径</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-pvc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">\t<span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">\t<span class=\"attr\">requests:</span></span><br><span class=\"line\">\t  <span class=\"attr\">storage:</span> <span class=\"string\">1Gi</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">\t<span class=\"attr\">volumeName:</span> <span class=\"string\">note-mysql-pv</span></span><br></pre></td></tr></table></figure>\n\n<p>部署</p>\n<figure class=\"highlight plaintext\"><figcaption><span>helm</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create -f note-mysql-pvc.yaml -n note</span><br></pre></td></tr></table></figure>\n\n<p>查看是否部署成功：</p>\n<p><img src=\"/../image/k8s%E9%83%A8%E7%BD%B2%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/1.png\" alt=\"mysql是否部署成功\"></p>\n<h3 id=\"1-2-部署mysql\"><a href=\"#1-2-部署mysql\" class=\"headerlink\" title=\"1.2 部署mysql\"></a>1.2 部署mysql</h3><p>note-mysql.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">\t<span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">\t  <span class=\"attr\">app:</span> <span class=\"string\">note-mysql-pod</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">\t<span class=\"attr\">metadata:</span></span><br><span class=\"line\">\t  <span class=\"attr\">labels:</span></span><br><span class=\"line\">\t\t<span class=\"attr\">app:</span> <span class=\"string\">note-mysql-pod</span></span><br><span class=\"line\">\t<span class=\"attr\">spec:</span></span><br><span class=\"line\">\t  <span class=\"attr\">containers:</span></span><br><span class=\"line\">\t\t<span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-mysql</span></span><br><span class=\"line\">\t\t  <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lucas-njfu/note_mysql:v1.1.0</span></span><br><span class=\"line\">\t\t  <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">\t\t  <span class=\"attr\">env:</span></span><br><span class=\"line\">\t\t\t<span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_ROOT_PASSWORD</span></span><br><span class=\"line\">\t\t\t  <span class=\"attr\">value:</span> <span class=\"string\">dfa6f1b032ee42ed95d12647225f2ff4</span></span><br><span class=\"line\">\t\t  <span class=\"attr\">ports:</span></span><br><span class=\"line\">\t\t\t<span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">\t\t  <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">\t\t\t<span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-persistent-storage</span></span><br><span class=\"line\">\t\t\t  <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/mysql</span></span><br><span class=\"line\">\t<span class=\"attr\">volumes:</span></span><br><span class=\"line\">\t  <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-persistent-storage</span></span><br><span class=\"line\">\t\t<span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">\t\t  <span class=\"attr\">claimName:</span> <span class=\"string\">note-mysql-pvc</span> <span class=\"comment\"># 使用之前创建的持久卷声明</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-service</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">\t<span class=\"attr\">app:</span> <span class=\"string\">note-mysql-pod</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span> <span class=\"comment\"># service类型</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">\t<span class=\"attr\">nodePort:</span> <span class=\"number\">30006</span> <span class=\"comment\"># 指定绑定的node的端口(默认的取值范围是：30000-32767), 如果不指定，会默认分配</span></span><br><span class=\"line\">\t<span class=\"attr\">targetPort:</span> <span class=\"number\">3306</span></span><br></pre></td></tr></table></figure>\n\n<p>部署：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>helm</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create -f note-mysql.yaml -n note</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-部署redis\"><a href=\"#2-部署redis\" class=\"headerlink\" title=\"2. 部署redis\"></a>2. 部署redis</h2><p>note-redis.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-redis-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">note-redis-pod</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">note-redis-pod</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-redis</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">redis:latest</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">REDIS_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">adcc64a4a9b04324914626590fb52a1a</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">6379</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-redis-service</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">note-redis-pod</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span> <span class=\"comment\"># service类型</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">30079</span> <span class=\"comment\"># 指定绑定的node的端口(默认的取值范围是：30000-32767),如果不指定，会默认分配</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">6379</span></span><br></pre></td></tr></table></figure>\n\n<p>部署：</p>\n<figure class=\"highlight plaintext\"><figcaption><span>helm</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create -f note-redis.yaml -n note</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-部署mongodb\"><a href=\"#3-部署mongodb\" class=\"headerlink\" title=\"3. 部署mongodb\"></a>3. 部署mongodb</h2><p>创建mongodb文件夹</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /home/mongodb/data</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-1-挂载数据卷\"><a href=\"#3-1-挂载数据卷\" class=\"headerlink\" title=\"3.1 挂载数据卷\"></a>3.1 挂载数据卷</h3><p>note-mongodb-pvc.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-pv</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">1Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/home/mongodb/data</span> <span class=\"comment\"># 主机上的数据存储路径</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-pvc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">1Gi</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">volumeName:</span> <span class=\"string\">note-mongodb-pv</span></span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight plaintext\"><figcaption><span>helm</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create -f note-mongodb-pvc.yaml -n note</span><br></pre></td></tr></table></figure>\n\n<p>查看是否装好：</p>\n<p><img src=\"/../image/k8s%E9%83%A8%E7%BD%B2%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/2.png\" alt=\"mongodb-pvc\"></p>\n<h3 id=\"3-2-部署\"><a href=\"#3-2-部署\" class=\"headerlink\" title=\"3.2 部署\"></a>3.2 部署</h3><p>note-mongodb.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">note-mongodb-pod</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">note-mongodb-pod</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lucas-njfu/note-mongodb:v1.1.0</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">27017</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MONGO_INITDB_ROOT_USERNAME</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">admin</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MONGO_INITDB_ROOT_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">5c8b18289f7848e9b0af98e81562649d</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-persistent-storage</span></span><br><span class=\"line\">              <span class=\"attr\">mountPath:</span> <span class=\"string\">/data/db</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-persistent-storage</span></span><br><span class=\"line\">          <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">            <span class=\"attr\">claimName:</span> <span class=\"string\">note-mongodb-pvc</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-service</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">note-mongodb-pod</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span> <span class=\"comment\"># service类型</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">27017</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">30017</span> <span class=\"comment\"># 指定绑定的node的端口(默认的取值范围是：30000-32767),如果不指定，会默认分配</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">27017</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><figcaption><span>helm</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create -f note-mongodb.yaml -n note</span><br></pre></td></tr></table></figure>\n\n<p>检查部署情况</p>\n<p><img src=\"/../image/k8s%E9%83%A8%E7%BD%B2%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/3.png\" alt=\"mongodb\"></p>\n<h2 id=\"4-部署服务bert-flask\"><a href=\"#4-部署服务bert-flask\" class=\"headerlink\" title=\"4. 部署服务bert_flask\"></a>4. 部署服务bert_flask</h2><p>bert_flask.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">bert-flask-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">bert-flask-pod</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">bert-flask-pod</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">bert-flask</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lucas-njfu/bert_flask:v1.3.0</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span> <span class=\"comment\"># Always</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">5000</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">bert-flask-service</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">bert-flask-pod</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span> <span class=\"comment\"># service类型</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">5000</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">30050</span> <span class=\"comment\"># 指定绑定的node的端口(默认的取值范围是：30000-32767),如果不指定，会默认分配</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">5000</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><figcaption><span>helm</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create -f bert_flask.yaml -n note</span><br></pre></td></tr></table></figure>\n\n<p>检查部署情况<br><img src=\"/../image/k8s%E9%83%A8%E7%BD%B2%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/4.png\" alt=\"bert_flask\"></p>\n<h2 id=\"5-部署服务note-cloud\"><a href=\"#5-部署服务note-cloud\" class=\"headerlink\" title=\"5. 部署服务note_cloud\"></a>5. 部署服务note_cloud</h2><h3 id=\"5-1-配置ConfigMap\"><a href=\"#5-1-配置ConfigMap\" class=\"headerlink\" title=\"5.1 配置ConfigMap\"></a>5.1 配置ConfigMap</h3><p>   新建application-prod.yml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">  <span class=\"attr\">servlet:</span></span><br><span class=\"line\">    <span class=\"attr\">context-path:</span> <span class=\"string\">/api</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://note-mysql-service:3306/db_note</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">dfa6f1b032ee42ed95d12647225f2ff4</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class=\"line\">  <span class=\"attr\">redis:</span></span><br><span class=\"line\">    <span class=\"attr\">host:</span> <span class=\"string\">note-redis-service</span></span><br><span class=\"line\">    <span class=\"attr\">port:</span> <span class=\"number\">6379</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">adcc64a4a9b04324914626590fb52a1a</span></span><br><span class=\"line\">    <span class=\"attr\">lettuce:</span></span><br><span class=\"line\">      <span class=\"attr\">pool:</span></span><br><span class=\"line\">        <span class=\"attr\">max-active:</span> <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"attr\">max-idle:</span> <span class=\"number\">10</span></span><br><span class=\"line\">        <span class=\"attr\">min-idle:</span> <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"attr\">time-between-eviction-runs:</span> <span class=\"string\">10s</span></span><br><span class=\"line\">    <span class=\"attr\">jackson:</span></span><br><span class=\"line\">      <span class=\"attr\">default-property-inclusion:</span> <span class=\"string\">non_null</span> <span class=\"comment\"># JSON处理时忽略非空字段</span></span><br><span class=\"line\">  <span class=\"attr\">data:</span></span><br><span class=\"line\">    <span class=\"attr\">mongodb:</span></span><br><span class=\"line\">      <span class=\"attr\">uri:</span> <span class=\"string\">mongodb://note-user:c88c1b8c2ed94010-8372efbc0879bdcb@note-mongodb-service:27017/mongodb_note</span></span><br><span class=\"line\">  <span class=\"attr\">servlet:</span></span><br><span class=\"line\">    <span class=\"attr\">multipart:</span></span><br><span class=\"line\">      <span class=\"attr\">max-file-size:</span> <span class=\"string\">10MB</span></span><br><span class=\"line\">      <span class=\"attr\">max-request-size:</span> <span class=\"string\">10MB</span></span><br><span class=\"line\"><span class=\"attr\">jwt:</span></span><br><span class=\"line\">  <span class=\"attr\">base64-encoded-secret-key:</span> <span class=\"string\">lab_of_njust_cloud_computing</span> <span class=\"comment\"># jwt的签名密码</span></span><br><span class=\"line\"><span class=\"attr\">bert-base-chinese-service:</span></span><br><span class=\"line\">  <span class=\"attr\">host:</span> <span class=\"string\">bert-flask-service</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">5000</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><figcaption><span>helm</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create configmap note-cloud-config -n note --fromfile=application-prod.yml</span><br></pre></td></tr></table></figure>\n\n<p>   查看部署状态<br>   <img src=\"/../image/k8s%E9%83%A8%E7%BD%B2%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/4.png\" alt=\"部署效果\"></p>\n<h3 id=\"5-2-部署服务\"><a href=\"#5-2-部署服务\" class=\"headerlink\" title=\"5.2 部署服务\"></a>5.2 部署服务</h3><p>note-cloud.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-cloud-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">note-cloud-pod</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">note-cloud-pod</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-cloud</span></span><br><span class=\"line\">        <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lucas-njfu/note_cloud:v1.3.0</span></span><br><span class=\"line\">        <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span> <span class=\"comment\"># Always</span></span><br><span class=\"line\">        <span class=\"attr\">ports:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">        <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config-volume</span></span><br><span class=\"line\">          <span class=\"attr\">mountPath:</span> <span class=\"string\">/app/config</span> <span class=\"comment\"># 配置文件将挂载到容器的/app/config目录</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">config-volume</span></span><br><span class=\"line\">        <span class=\"attr\">configMap:</span></span><br><span class=\"line\">          <span class=\"attr\">name:</span> <span class=\"string\">note-cloud-config</span> <span class=\"comment\"># 引用之前创建的 ConfigMap</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-cloud-service</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">note-cloud-pod</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span> <span class=\"comment\"># service类型</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">8080</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">30080</span> <span class=\"comment\"># 指定绑定的node的端口(默认的取值范围是：30000-32767),如果不指定，会默认分配</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">8080</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><figcaption><span>helm</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create -f note-cloud.yaml -n note</span><br></pre></td></tr></table></figure>\n\n<p>查看日志</p>\n<figure class=\"highlight plaintext\"><figcaption><span>helm</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod -n note</span><br><span class=\"line\">kubectl logs -f note-cloud-deployment-6687c5cb49-vc7kl -n note</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-部署前端\"><a href=\"#6-部署前端\" class=\"headerlink\" title=\"6. 部署前端\"></a>6. 部署前端</h2><p>note-nginx.yaml</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-nginx-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">note-nginx-pod</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">note-nginx-pod</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-nginx</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lucas-njfu/note-nginx:v2.2.0</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-nginx-service</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">note-nginx-pod</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span> <span class=\"comment\"># service类型</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">80</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">30088</span> <span class=\"comment\"># 指定绑定的node的端口(默认的取值范围是：30000-32767),如果不指定，会默认分配</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">80</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><figcaption><span>helm</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl create -f note-nginx.yaml -n note</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"最终部署pod查看\"><a href=\"#最终部署pod查看\" class=\"headerlink\" title=\"最终部署pod查看\"></a>最终部署pod查看</h2><p><img src=\"/../image/k8s%E9%83%A8%E7%BD%B2%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/5.png\" alt=\"pod\"></p>\n<p>访问（连校园网，关梯子）：</p>\n<p><a href=\"http://192.10.84.209:33395/cloudNote/\">http://192.10.84.209:33395/cloudNote/</a><br>账号：姓名小写拼音<br>密码：123456</p>\n<p>最终效果：<br><img src=\"/../image/k8s%E9%83%A8%E7%BD%B2%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F/6.png\" alt=\"6\"></p>\n"},{"title":"云笔记系统扩容","keywords":["k8s"],"description":"对k8s服务器上部署的云笔记系统进行扩容","abbrlink":36313,"date":"2023-09-20T06:50:58.000Z","updated":"2023-09-20T07:00:00.000Z","top_img":"https://s2.loli.net/2024/02/06/MemxlCZb8nKTBXp.png","comments":1,"cover":"https://s2.loli.net/2024/02/06/ENM4lTRwfKyOtJB.png","toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"\n### 起因\n\n之前部署的云笔记系统的存储卷太小了，当用户数量增加的时候，笔记及用户信息会增大，这有可能会引起内存爆掉的情况。存储用户信息的 `mysql`和存储笔记信息的 `mongodb`在部署的时候我都设置了 `1G`的存储卷，这是远远不够的，因此需对其进行扩容。\n\n根据老师要求，需将内存从 `1G`扩展到  `50G`，这是针对存笔记系统的 `mongodb`，为了更加稳妥，跟学弟协商后决定将存用户数据的 `mysql`也扩充到 `10G`。\n\n### 大体思路：\n\n1. 确定 `mongodb`和 `mysql`的 `pod`所在的 `node`节点。\n2. 备份数据\n3. 删除旧的 `pod`\n4. 分别修改 `mongodb`和 `mysql`的 `pv`、 `pvc`为 `50Gi`、 `10Gi`。\n5. 指定 `mongodb`和 `mysql`的 `pv`、 `pvc`及 `mongodb`、 `mysql`部署的亲和性，让其部署在指定 `node`节点，便于扩容。\n6. 重新部署相应 `pod`\n7. 扩容指定的 `mongodb`、 `mysql`部署的节点的虚拟机。\n\n> 注：本笔记图片里的 `deployment`的编号等信息可能会不一样，因为自己操作的时候可能会删了pod在重建导致其编号及时间等不一样，图片仅用于描述过程及结果。\n\n## 1. 确定pod所在的node节点\n\n首先远程连接 `131`服务器。\n\n云笔记系统有 `6`个 `pod`，在 `note`空间里，如下所示：\n\n```bash\nkubectl get pod -n note\n```\n\n![pod](../image/云笔记系统扩容/pod.png)\n\n需确定 `mongodb`、 `mysql`所在的 `node`节点，命令如下：\n\n```bash\nkubectl get pod -n note -o wide\n```\n\n![pod-node](../image/云笔记系统扩容/pod-node.png)\n\n由上图可知， `mongodb`和 `mysql`的 `pod`分别被部署到了 `k8s-node6`、 `k8s-node7`节点。\n\n## 2. 备份数据\n\n问学长得知， `k8s-node6`、 `k8s-node7`节点位于 `122`服务器\n\n远程连接 `122`服务器后，打开 `VMWare Workstation Pro`，登录 `node6`节点：\n\n![vmware](../image/云笔记系统扩容/vmware.png)\n\n账号密码为 `root 123456`，登陆后如下：\n\n![login](../image/云笔记系统扩容/login.png)\n\n按下面命令将数据拷贝到 `tmp/backup`文件夹下进行备份：\n\n![backup](../image/云笔记系统扩容/backup.png)\n\n对 `node7`下的 `mysql`进行同样操作，不再赘述。\n\n为了保险起见，使用 `xShell`中的 `xftp`将备份的文件再备份到桌面一份：\n\n![xftp](../image/云笔记系统扩容/xftp.png)\n\n打开 `xshell`点击新建文件传输，将 `/home`下的 `mongodb`文件夹拖动到桌面。\n\n![backup-desktop](../image/云笔记系统扩容/backup-desktop.png)\n\n对 `node7`下的 `mysql`进行同样操作，不再赘述。\n\n## 3. 删除旧的pod\n\n删除旧的 `pod`：\n\n```yaml\nkubectl delete -f note-mysql-pvc.yaml -n note\nkubectl delete -f note-mysql.yaml -n note\nkubectl delete -f note-mongodb-pvc.yaml -n note\nkubectl delete -f note-mongodb.yaml -n note\n```\n\n![delete-pod](../image/云笔记系统扩容/delete-pod.png)\n\n此时查看 `pod`结果：\n\n```yaml\nkubectl get pod -n note\n```\n\n![pod-after-deleted](../image/云笔记系统扩容/pod-after-deleted.png)\n\n`mongodb`和 `mysql`的 `pod`已经被删掉。\n\n## 4. 修改pv、pvc\n\n将相关的 `yaml`文件修改为如下内容：\n\n`note-mongodb-pvc.yaml`\n\n```yaml\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: note-mongodb-pv\nspec:\n  capacity:\n    storage: 50Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: /home/mongodb/data # 主机上的数据存储路径\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: note-mongodb-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 50Gi\n  storageClassName: \"\"\n  volumeName: note-mongodb-pv\n```\n\n`note-mysql-pvc.yaml`\n\n```yaml\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: note-mysql-pv\nspec:\n  capacity:\n    storage: 10Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: /home/mysql/data # 主机上的数据存储路径\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: note-mysql-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi\n  storageClassName: \"\"\n  volumeName: note-mysql-pv\n```\n\n`yaml`文件里已经将内存修改为目标内存。\n\n## 5. 指定亲和性\n\n这里的亲和性是 `Affinity`，指定了这个后会让其部署在指定标签的 `node`节点上。这样仅需将指定的 `node`节点的虚拟机扩容即可。\n\n首先需要为 `node`节点添加标签。如下所示：\n\n```bash\nkubectl get nodes --show-labels\n\n# 为节点6和7添加label\nkubectl label nodes k8s-node6 notelabel=mongodb\nkubectl label nodes k8s-node7 notelabel=mysql\n```\n\n![add-labels](../image/云笔记系统扩容/add-labels.png)\n\n指定完标签就可以添加亲和性了，如下：\n\n`note-mongodb-pvc.yaml`\n\n```yaml\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: note-mongodb-pv\nspec:\n  capacity:\n    storage: 50Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: /home/mongodb/data # 主机上的数据存储路径\n  nodeAffinity:\n    required:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: notelabel\n          operator: In\n          values:\n          - mongodb\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: note-mongodb-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 50Gi\n  storageClassName: \"\"\n  volumeName: note-mongodb-pv\n```\n\n`note-mysql-pvc.yaml`\n\n```yaml\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: note-mysql-pv\nspec:\n  capacity:\n    storage: 10Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: /home/mysql/data # 主机上的数据存储路径\n  nodeAffinity:\n    required:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: notelabel\n          operator: In\n          values:\n          - mysql\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: note-mysql-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi\n  storageClassName: \"\"\n  volumeName: note-mysql-pv\n```\n\n`note-mongodb.yaml`\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: note-mongodb-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: note-mongodb-pod\n  template:\n    metadata:\n      labels:\n        app: note-mongodb-pod\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n            - matchExpressions:\n              - key: notelabel\n                operator: In\n                values:\n                - mongodb\n      containers:\n        - name: note-mongodb\n          image: registry.cn-hangzhou.aliyuncs.com/lucas-njfu/note-mongodb:v1.1.0\n          imagePullPolicy: IfNotPresent\n          ports:\n            - containerPort: 27017\n          env:\n            - name: MONGO_INITDB_ROOT_USERNAME\n              value: admin\n            - name: MONGO_INITDB_ROOT_PASSWORD\n              value: 5c8b18289f7848e9b0af98e81562649d\n          volumeMounts:\n            - name: note-mongodb-persistent-storage\n              mountPath: /data/db\n      volumes:\n        - name: note-mongodb-persistent-storage\n          persistentVolumeClaim:\n            claimName: note-mongodb-pvc\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: note-mongodb-service\nspec:\n  selector:\n    app: note-mongodb-pod\n  type: NodePort # service类型\n  ports:\n  - port: 27017\n    nodePort: 30017 # 指定绑定的node的端口(默认的取值范围是：30000-32767),如果不指定，会默认分配\n    targetPort: 27017\n```\n\n`note-mysql.yaml`\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: note-mysql-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: note-mysql-pod\n  template:\n    metadata:\n      labels:\n        app: note-mysql-pod\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n            - matchExpressions:\n              - key: notelabel\n                operator: In\n                values:\n                - mysql\n      containers:\n        - name: note-mysql\n          image: registry.cn-hangzhou.aliyuncs.com/lucas-njfu/note_mysql:v1.1.0\n          imagePullPolicy: IfNotPresent\n          env:\n            - name: MYSQL_ROOT_PASSWORD\n              value: dfa6f1b032ee42ed95d12647225f2ff4\n          ports:\n            - containerPort: 3306\n          volumeMounts:\n            - name: note-mysql-persistent-storage\n              mountPath: /var/lib/mysql\n      volumes:\n        - name: note-mysql-persistent-storage\n          persistentVolumeClaim:\n            claimName: note-mysql-pvc # 使用之前创建的持久卷声明\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: note-mysql-service\nspec:\n  selector:\n    app: note-mysql-pod\n  type: NodePort # service类型\n  ports:\n  - port: 3306\n    nodePort: 30006 # 指定绑定的node的端口(默认的取值范围是：30000-32767), 如果不指定，会默认分配\n    targetPort: 3306\n```\n\n这样，亲和性就修改完毕了。\n\n## 6. 重新部署相应的pod\n\n接下来按 `5. 指定亲和性` 所修改的 `yaml`重新进行 `pod`部署：\n\n```yaml\nkubectl create -f note-mysql-pvc.yaml -n note\nkubectl create -f note-mysql.yaml -n note\nkubectl create -f note-mongodb-pvc.yaml -n note\nkubectl create -f note-mongodb.yaml -n note\n```\n\n![pod-deploy](../image/云笔记系统扩容/pod-deploy.png)\n\n查看部署的结果：\n\n```yaml\nkubectl get pod -n note -o wide\n```\n\n![pod-after-deploy](../image/云笔记系统扩容/pod-after-deploy.png)\n\n可以看到已经将 `mongodb`和 `mysql`分别部署到了节点 `6`和 `7`上。\n\n## 7. 扩容节点的虚拟机\n\n远程连接 `122`服务器后，打开 `VMWare Workstation Pro`，如下：\n\n![vmware](../image/云笔记系统扩容/vmware.png)\n\n对于 `sx-k8s-node6`，先双击，然后点击上面的橙色运行按钮右边的下拉倒三角，关机。\n\n![shutdown](../image/云笔记系统扩容/shutdown.png)\n\n然后右键 `sx-k8s-node6`，点设置\n\n![setting](../image/云笔记系统扩容/setting.png)\n\n点击硬盘后点击右下角扩展\n\n![expand](../image/云笔记系统扩容/expand.png)\n\n对硬盘容量进行修改。\n\n这里原本是 `40G`，我增加了 `50G`后变为了 `90G`。\n\n`sx-k8s-node7`的操作类似，不再赘述。\n\n此时打开网址，访问成功！扩容成功！\n\n## 访问\n访问（连校园网，关梯子）：\n\nhttp://192.10.84.209:33395/cloudNote/\n\n账号：姓名小写拼音\n\n密码：123456\n\n效果：\n\n![6](../image/云笔记系统扩容/6.png)\n","source":"_posts/云笔记系统扩容.md","raw":"---\ntitle: 云笔记系统扩容\ntags:\n  - k8s\n  - Kubernetes\n  - 教程\ncategories:\n  - Kubernetes\nkeywords:\n  - k8s\ndescription: 对k8s服务器上部署的云笔记系统进行扩容\nabbrlink: 36313\ndate: 2023-09-20 14:50:58\nupdated: 2023-09-20 15:00:00\ntop_img: https://s2.loli.net/2024/02/06/MemxlCZb8nKTBXp.png\ncomments:\ncover: https://s2.loli.net/2024/02/06/ENM4lTRwfKyOtJB.png\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n---\n\n### 起因\n\n之前部署的云笔记系统的存储卷太小了，当用户数量增加的时候，笔记及用户信息会增大，这有可能会引起内存爆掉的情况。存储用户信息的 `mysql`和存储笔记信息的 `mongodb`在部署的时候我都设置了 `1G`的存储卷，这是远远不够的，因此需对其进行扩容。\n\n根据老师要求，需将内存从 `1G`扩展到  `50G`，这是针对存笔记系统的 `mongodb`，为了更加稳妥，跟学弟协商后决定将存用户数据的 `mysql`也扩充到 `10G`。\n\n### 大体思路：\n\n1. 确定 `mongodb`和 `mysql`的 `pod`所在的 `node`节点。\n2. 备份数据\n3. 删除旧的 `pod`\n4. 分别修改 `mongodb`和 `mysql`的 `pv`、 `pvc`为 `50Gi`、 `10Gi`。\n5. 指定 `mongodb`和 `mysql`的 `pv`、 `pvc`及 `mongodb`、 `mysql`部署的亲和性，让其部署在指定 `node`节点，便于扩容。\n6. 重新部署相应 `pod`\n7. 扩容指定的 `mongodb`、 `mysql`部署的节点的虚拟机。\n\n> 注：本笔记图片里的 `deployment`的编号等信息可能会不一样，因为自己操作的时候可能会删了pod在重建导致其编号及时间等不一样，图片仅用于描述过程及结果。\n\n## 1. 确定pod所在的node节点\n\n首先远程连接 `131`服务器。\n\n云笔记系统有 `6`个 `pod`，在 `note`空间里，如下所示：\n\n```bash\nkubectl get pod -n note\n```\n\n![pod](../image/云笔记系统扩容/pod.png)\n\n需确定 `mongodb`、 `mysql`所在的 `node`节点，命令如下：\n\n```bash\nkubectl get pod -n note -o wide\n```\n\n![pod-node](../image/云笔记系统扩容/pod-node.png)\n\n由上图可知， `mongodb`和 `mysql`的 `pod`分别被部署到了 `k8s-node6`、 `k8s-node7`节点。\n\n## 2. 备份数据\n\n问学长得知， `k8s-node6`、 `k8s-node7`节点位于 `122`服务器\n\n远程连接 `122`服务器后，打开 `VMWare Workstation Pro`，登录 `node6`节点：\n\n![vmware](../image/云笔记系统扩容/vmware.png)\n\n账号密码为 `root 123456`，登陆后如下：\n\n![login](../image/云笔记系统扩容/login.png)\n\n按下面命令将数据拷贝到 `tmp/backup`文件夹下进行备份：\n\n![backup](../image/云笔记系统扩容/backup.png)\n\n对 `node7`下的 `mysql`进行同样操作，不再赘述。\n\n为了保险起见，使用 `xShell`中的 `xftp`将备份的文件再备份到桌面一份：\n\n![xftp](../image/云笔记系统扩容/xftp.png)\n\n打开 `xshell`点击新建文件传输，将 `/home`下的 `mongodb`文件夹拖动到桌面。\n\n![backup-desktop](../image/云笔记系统扩容/backup-desktop.png)\n\n对 `node7`下的 `mysql`进行同样操作，不再赘述。\n\n## 3. 删除旧的pod\n\n删除旧的 `pod`：\n\n```yaml\nkubectl delete -f note-mysql-pvc.yaml -n note\nkubectl delete -f note-mysql.yaml -n note\nkubectl delete -f note-mongodb-pvc.yaml -n note\nkubectl delete -f note-mongodb.yaml -n note\n```\n\n![delete-pod](../image/云笔记系统扩容/delete-pod.png)\n\n此时查看 `pod`结果：\n\n```yaml\nkubectl get pod -n note\n```\n\n![pod-after-deleted](../image/云笔记系统扩容/pod-after-deleted.png)\n\n`mongodb`和 `mysql`的 `pod`已经被删掉。\n\n## 4. 修改pv、pvc\n\n将相关的 `yaml`文件修改为如下内容：\n\n`note-mongodb-pvc.yaml`\n\n```yaml\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: note-mongodb-pv\nspec:\n  capacity:\n    storage: 50Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: /home/mongodb/data # 主机上的数据存储路径\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: note-mongodb-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 50Gi\n  storageClassName: \"\"\n  volumeName: note-mongodb-pv\n```\n\n`note-mysql-pvc.yaml`\n\n```yaml\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: note-mysql-pv\nspec:\n  capacity:\n    storage: 10Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: /home/mysql/data # 主机上的数据存储路径\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: note-mysql-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi\n  storageClassName: \"\"\n  volumeName: note-mysql-pv\n```\n\n`yaml`文件里已经将内存修改为目标内存。\n\n## 5. 指定亲和性\n\n这里的亲和性是 `Affinity`，指定了这个后会让其部署在指定标签的 `node`节点上。这样仅需将指定的 `node`节点的虚拟机扩容即可。\n\n首先需要为 `node`节点添加标签。如下所示：\n\n```bash\nkubectl get nodes --show-labels\n\n# 为节点6和7添加label\nkubectl label nodes k8s-node6 notelabel=mongodb\nkubectl label nodes k8s-node7 notelabel=mysql\n```\n\n![add-labels](../image/云笔记系统扩容/add-labels.png)\n\n指定完标签就可以添加亲和性了，如下：\n\n`note-mongodb-pvc.yaml`\n\n```yaml\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: note-mongodb-pv\nspec:\n  capacity:\n    storage: 50Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: /home/mongodb/data # 主机上的数据存储路径\n  nodeAffinity:\n    required:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: notelabel\n          operator: In\n          values:\n          - mongodb\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: note-mongodb-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 50Gi\n  storageClassName: \"\"\n  volumeName: note-mongodb-pv\n```\n\n`note-mysql-pvc.yaml`\n\n```yaml\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: note-mysql-pv\nspec:\n  capacity:\n    storage: 10Gi\n  accessModes:\n    - ReadWriteOnce\n  hostPath:\n    path: /home/mysql/data # 主机上的数据存储路径\n  nodeAffinity:\n    required:\n      nodeSelectorTerms:\n      - matchExpressions:\n        - key: notelabel\n          operator: In\n          values:\n          - mysql\n---\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: note-mysql-pvc\nspec:\n  accessModes:\n    - ReadWriteOnce\n  resources:\n    requests:\n      storage: 10Gi\n  storageClassName: \"\"\n  volumeName: note-mysql-pv\n```\n\n`note-mongodb.yaml`\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: note-mongodb-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: note-mongodb-pod\n  template:\n    metadata:\n      labels:\n        app: note-mongodb-pod\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n            - matchExpressions:\n              - key: notelabel\n                operator: In\n                values:\n                - mongodb\n      containers:\n        - name: note-mongodb\n          image: registry.cn-hangzhou.aliyuncs.com/lucas-njfu/note-mongodb:v1.1.0\n          imagePullPolicy: IfNotPresent\n          ports:\n            - containerPort: 27017\n          env:\n            - name: MONGO_INITDB_ROOT_USERNAME\n              value: admin\n            - name: MONGO_INITDB_ROOT_PASSWORD\n              value: 5c8b18289f7848e9b0af98e81562649d\n          volumeMounts:\n            - name: note-mongodb-persistent-storage\n              mountPath: /data/db\n      volumes:\n        - name: note-mongodb-persistent-storage\n          persistentVolumeClaim:\n            claimName: note-mongodb-pvc\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: note-mongodb-service\nspec:\n  selector:\n    app: note-mongodb-pod\n  type: NodePort # service类型\n  ports:\n  - port: 27017\n    nodePort: 30017 # 指定绑定的node的端口(默认的取值范围是：30000-32767),如果不指定，会默认分配\n    targetPort: 27017\n```\n\n`note-mysql.yaml`\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: note-mysql-deployment\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: note-mysql-pod\n  template:\n    metadata:\n      labels:\n        app: note-mysql-pod\n    spec:\n      affinity:\n        nodeAffinity:\n          requiredDuringSchedulingIgnoredDuringExecution:\n            nodeSelectorTerms:\n            - matchExpressions:\n              - key: notelabel\n                operator: In\n                values:\n                - mysql\n      containers:\n        - name: note-mysql\n          image: registry.cn-hangzhou.aliyuncs.com/lucas-njfu/note_mysql:v1.1.0\n          imagePullPolicy: IfNotPresent\n          env:\n            - name: MYSQL_ROOT_PASSWORD\n              value: dfa6f1b032ee42ed95d12647225f2ff4\n          ports:\n            - containerPort: 3306\n          volumeMounts:\n            - name: note-mysql-persistent-storage\n              mountPath: /var/lib/mysql\n      volumes:\n        - name: note-mysql-persistent-storage\n          persistentVolumeClaim:\n            claimName: note-mysql-pvc # 使用之前创建的持久卷声明\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: note-mysql-service\nspec:\n  selector:\n    app: note-mysql-pod\n  type: NodePort # service类型\n  ports:\n  - port: 3306\n    nodePort: 30006 # 指定绑定的node的端口(默认的取值范围是：30000-32767), 如果不指定，会默认分配\n    targetPort: 3306\n```\n\n这样，亲和性就修改完毕了。\n\n## 6. 重新部署相应的pod\n\n接下来按 `5. 指定亲和性` 所修改的 `yaml`重新进行 `pod`部署：\n\n```yaml\nkubectl create -f note-mysql-pvc.yaml -n note\nkubectl create -f note-mysql.yaml -n note\nkubectl create -f note-mongodb-pvc.yaml -n note\nkubectl create -f note-mongodb.yaml -n note\n```\n\n![pod-deploy](../image/云笔记系统扩容/pod-deploy.png)\n\n查看部署的结果：\n\n```yaml\nkubectl get pod -n note -o wide\n```\n\n![pod-after-deploy](../image/云笔记系统扩容/pod-after-deploy.png)\n\n可以看到已经将 `mongodb`和 `mysql`分别部署到了节点 `6`和 `7`上。\n\n## 7. 扩容节点的虚拟机\n\n远程连接 `122`服务器后，打开 `VMWare Workstation Pro`，如下：\n\n![vmware](../image/云笔记系统扩容/vmware.png)\n\n对于 `sx-k8s-node6`，先双击，然后点击上面的橙色运行按钮右边的下拉倒三角，关机。\n\n![shutdown](../image/云笔记系统扩容/shutdown.png)\n\n然后右键 `sx-k8s-node6`，点设置\n\n![setting](../image/云笔记系统扩容/setting.png)\n\n点击硬盘后点击右下角扩展\n\n![expand](../image/云笔记系统扩容/expand.png)\n\n对硬盘容量进行修改。\n\n这里原本是 `40G`，我增加了 `50G`后变为了 `90G`。\n\n`sx-k8s-node7`的操作类似，不再赘述。\n\n此时打开网址，访问成功！扩容成功！\n\n## 访问\n访问（连校园网，关梯子）：\n\nhttp://192.10.84.209:33395/cloudNote/\n\n账号：姓名小写拼音\n\n密码：123456\n\n效果：\n\n![6](../image/云笔记系统扩容/6.png)\n","slug":"云笔记系统扩容","published":1,"layout":"post","photos":[],"link":"","_id":"clx1l2pdw000snfgnh0us03ks","content":"<h3 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h3><p>之前部署的云笔记系统的存储卷太小了，当用户数量增加的时候，笔记及用户信息会增大，这有可能会引起内存爆掉的情况。存储用户信息的 <code>mysql</code>和存储笔记信息的 <code>mongodb</code>在部署的时候我都设置了 <code>1G</code>的存储卷，这是远远不够的，因此需对其进行扩容。</p>\n<p>根据老师要求，需将内存从 <code>1G</code>扩展到  <code>50G</code>，这是针对存笔记系统的 <code>mongodb</code>，为了更加稳妥，跟学弟协商后决定将存用户数据的 <code>mysql</code>也扩充到 <code>10G</code>。</p>\n<h3 id=\"大体思路：\"><a href=\"#大体思路：\" class=\"headerlink\" title=\"大体思路：\"></a>大体思路：</h3><ol>\n<li>确定 <code>mongodb</code>和 <code>mysql</code>的 <code>pod</code>所在的 <code>node</code>节点。</li>\n<li>备份数据</li>\n<li>删除旧的 <code>pod</code></li>\n<li>分别修改 <code>mongodb</code>和 <code>mysql</code>的 <code>pv</code>、 <code>pvc</code>为 <code>50Gi</code>、 <code>10Gi</code>。</li>\n<li>指定 <code>mongodb</code>和 <code>mysql</code>的 <code>pv</code>、 <code>pvc</code>及 <code>mongodb</code>、 <code>mysql</code>部署的亲和性，让其部署在指定 <code>node</code>节点，便于扩容。</li>\n<li>重新部署相应 <code>pod</code></li>\n<li>扩容指定的 <code>mongodb</code>、 <code>mysql</code>部署的节点的虚拟机。</li>\n</ol>\n<blockquote>\n<p>注：本笔记图片里的 <code>deployment</code>的编号等信息可能会不一样，因为自己操作的时候可能会删了pod在重建导致其编号及时间等不一样，图片仅用于描述过程及结果。</p>\n</blockquote>\n<h2 id=\"1-确定pod所在的node节点\"><a href=\"#1-确定pod所在的node节点\" class=\"headerlink\" title=\"1. 确定pod所在的node节点\"></a>1. 确定pod所在的node节点</h2><p>首先远程连接 <code>131</code>服务器。</p>\n<p>云笔记系统有 <code>6</code>个 <code>pod</code>，在 <code>note</code>空间里，如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod -n note</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/pod.png\" alt=\"pod\"></p>\n<p>需确定 <code>mongodb</code>、 <code>mysql</code>所在的 <code>node</code>节点，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod -n note -o wide</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/pod-node.png\" alt=\"pod-node\"></p>\n<p>由上图可知， <code>mongodb</code>和 <code>mysql</code>的 <code>pod</code>分别被部署到了 <code>k8s-node6</code>、 <code>k8s-node7</code>节点。</p>\n<h2 id=\"2-备份数据\"><a href=\"#2-备份数据\" class=\"headerlink\" title=\"2. 备份数据\"></a>2. 备份数据</h2><p>问学长得知， <code>k8s-node6</code>、 <code>k8s-node7</code>节点位于 <code>122</code>服务器</p>\n<p>远程连接 <code>122</code>服务器后，打开 <code>VMWare Workstation Pro</code>，登录 <code>node6</code>节点：</p>\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/vmware.png\" alt=\"vmware\"></p>\n<p>账号密码为 <code>root 123456</code>，登陆后如下：</p>\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/login.png\" alt=\"login\"></p>\n<p>按下面命令将数据拷贝到 <code>tmp/backup</code>文件夹下进行备份：</p>\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/backup.png\" alt=\"backup\"></p>\n<p>对 <code>node7</code>下的 <code>mysql</code>进行同样操作，不再赘述。</p>\n<p>为了保险起见，使用 <code>xShell</code>中的 <code>xftp</code>将备份的文件再备份到桌面一份：</p>\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/xftp.png\" alt=\"xftp\"></p>\n<p>打开 <code>xshell</code>点击新建文件传输，将 <code>/home</code>下的 <code>mongodb</code>文件夹拖动到桌面。</p>\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/backup-desktop.png\" alt=\"backup-desktop\"></p>\n<p>对 <code>node7</code>下的 <code>mysql</code>进行同样操作，不再赘述。</p>\n<h2 id=\"3-删除旧的pod\"><a href=\"#3-删除旧的pod\" class=\"headerlink\" title=\"3. 删除旧的pod\"></a>3. 删除旧的pod</h2><p>删除旧的 <code>pod</code>：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">delete</span> <span class=\"string\">-f</span> <span class=\"string\">note-mysql-pvc.yaml</span> <span class=\"string\">-n</span> <span class=\"string\">note</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">delete</span> <span class=\"string\">-f</span> <span class=\"string\">note-mysql.yaml</span> <span class=\"string\">-n</span> <span class=\"string\">note</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">delete</span> <span class=\"string\">-f</span> <span class=\"string\">note-mongodb-pvc.yaml</span> <span class=\"string\">-n</span> <span class=\"string\">note</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">delete</span> <span class=\"string\">-f</span> <span class=\"string\">note-mongodb.yaml</span> <span class=\"string\">-n</span> <span class=\"string\">note</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/delete-pod.png\" alt=\"delete-pod\"></p>\n<p>此时查看 <code>pod</code>结果：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">get</span> <span class=\"string\">pod</span> <span class=\"string\">-n</span> <span class=\"string\">note</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/pod-after-deleted.png\" alt=\"pod-after-deleted\"></p>\n<p><code>mongodb</code>和 <code>mysql</code>的 <code>pod</code>已经被删掉。</p>\n<h2 id=\"4-修改pv、pvc\"><a href=\"#4-修改pv、pvc\" class=\"headerlink\" title=\"4. 修改pv、pvc\"></a>4. 修改pv、pvc</h2><p>将相关的 <code>yaml</code>文件修改为如下内容：</p>\n<p><code>note-mongodb-pvc.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-pv</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/home/mongodb/data</span> <span class=\"comment\"># 主机上的数据存储路径</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-pvc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">volumeName:</span> <span class=\"string\">note-mongodb-pv</span></span><br></pre></td></tr></table></figure>\n\n<p><code>note-mysql-pvc.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-pv</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">10Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/home/mysql/data</span> <span class=\"comment\"># 主机上的数据存储路径</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-pvc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">10Gi</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">volumeName:</span> <span class=\"string\">note-mysql-pv</span></span><br></pre></td></tr></table></figure>\n\n<p><code>yaml</code>文件里已经将内存修改为目标内存。</p>\n<h2 id=\"5-指定亲和性\"><a href=\"#5-指定亲和性\" class=\"headerlink\" title=\"5. 指定亲和性\"></a>5. 指定亲和性</h2><p>这里的亲和性是 <code>Affinity</code>，指定了这个后会让其部署在指定标签的 <code>node</code>节点上。这样仅需将指定的 <code>node</code>节点的虚拟机扩容即可。</p>\n<p>首先需要为 <code>node</code>节点添加标签。如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get nodes --show-labels</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 为节点6和7添加label</span></span><br><span class=\"line\">kubectl label nodes k8s-node6 notelabel=mongodb</span><br><span class=\"line\">kubectl label nodes k8s-node7 notelabel=mysql</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/add-labels.png\" alt=\"add-labels\"></p>\n<p>指定完标签就可以添加亲和性了，如下：</p>\n<p><code>note-mongodb-pvc.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-pv</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/home/mongodb/data</span> <span class=\"comment\"># 主机上的数据存储路径</span></span><br><span class=\"line\">  <span class=\"attr\">nodeAffinity:</span></span><br><span class=\"line\">    <span class=\"attr\">required:</span></span><br><span class=\"line\">      <span class=\"attr\">nodeSelectorTerms:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">notelabel</span></span><br><span class=\"line\">          <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">          <span class=\"attr\">values:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">mongodb</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-pvc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">volumeName:</span> <span class=\"string\">note-mongodb-pv</span></span><br></pre></td></tr></table></figure>\n\n<p><code>note-mysql-pvc.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-pv</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">10Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/home/mysql/data</span> <span class=\"comment\"># 主机上的数据存储路径</span></span><br><span class=\"line\">  <span class=\"attr\">nodeAffinity:</span></span><br><span class=\"line\">    <span class=\"attr\">required:</span></span><br><span class=\"line\">      <span class=\"attr\">nodeSelectorTerms:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">notelabel</span></span><br><span class=\"line\">          <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">          <span class=\"attr\">values:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-pvc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">10Gi</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">volumeName:</span> <span class=\"string\">note-mysql-pv</span></span><br></pre></td></tr></table></figure>\n\n<p><code>note-mongodb.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">note-mongodb-pod</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">note-mongodb-pod</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">affinity:</span></span><br><span class=\"line\">        <span class=\"attr\">nodeAffinity:</span></span><br><span class=\"line\">          <span class=\"attr\">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">            <span class=\"attr\">nodeSelectorTerms:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">notelabel</span></span><br><span class=\"line\">                <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">                <span class=\"attr\">values:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">mongodb</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lucas-njfu/note-mongodb:v1.1.0</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">27017</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MONGO_INITDB_ROOT_USERNAME</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">admin</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MONGO_INITDB_ROOT_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">5c8b18289f7848e9b0af98e81562649d</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-persistent-storage</span></span><br><span class=\"line\">              <span class=\"attr\">mountPath:</span> <span class=\"string\">/data/db</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-persistent-storage</span></span><br><span class=\"line\">          <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">            <span class=\"attr\">claimName:</span> <span class=\"string\">note-mongodb-pvc</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-service</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">note-mongodb-pod</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span> <span class=\"comment\"># service类型</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">27017</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">30017</span> <span class=\"comment\"># 指定绑定的node的端口(默认的取值范围是：30000-32767),如果不指定，会默认分配</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">27017</span></span><br></pre></td></tr></table></figure>\n\n<p><code>note-mysql.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">note-mysql-pod</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">note-mysql-pod</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">affinity:</span></span><br><span class=\"line\">        <span class=\"attr\">nodeAffinity:</span></span><br><span class=\"line\">          <span class=\"attr\">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">            <span class=\"attr\">nodeSelectorTerms:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">notelabel</span></span><br><span class=\"line\">                <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">                <span class=\"attr\">values:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-mysql</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lucas-njfu/note_mysql:v1.1.0</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_ROOT_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">dfa6f1b032ee42ed95d12647225f2ff4</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-persistent-storage</span></span><br><span class=\"line\">              <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/mysql</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-persistent-storage</span></span><br><span class=\"line\">          <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">            <span class=\"attr\">claimName:</span> <span class=\"string\">note-mysql-pvc</span> <span class=\"comment\"># 使用之前创建的持久卷声明</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-service</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">note-mysql-pod</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span> <span class=\"comment\"># service类型</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">30006</span> <span class=\"comment\"># 指定绑定的node的端口(默认的取值范围是：30000-32767), 如果不指定，会默认分配</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">3306</span></span><br></pre></td></tr></table></figure>\n\n<p>这样，亲和性就修改完毕了。</p>\n<h2 id=\"6-重新部署相应的pod\"><a href=\"#6-重新部署相应的pod\" class=\"headerlink\" title=\"6. 重新部署相应的pod\"></a>6. 重新部署相应的pod</h2><p>接下来按 <code>5. 指定亲和性</code> 所修改的 <code>yaml</code>重新进行 <code>pod</code>部署：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">create</span> <span class=\"string\">-f</span> <span class=\"string\">note-mysql-pvc.yaml</span> <span class=\"string\">-n</span> <span class=\"string\">note</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">create</span> <span class=\"string\">-f</span> <span class=\"string\">note-mysql.yaml</span> <span class=\"string\">-n</span> <span class=\"string\">note</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">create</span> <span class=\"string\">-f</span> <span class=\"string\">note-mongodb-pvc.yaml</span> <span class=\"string\">-n</span> <span class=\"string\">note</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">create</span> <span class=\"string\">-f</span> <span class=\"string\">note-mongodb.yaml</span> <span class=\"string\">-n</span> <span class=\"string\">note</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/pod-deploy.png\" alt=\"pod-deploy\"></p>\n<p>查看部署的结果：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">get</span> <span class=\"string\">pod</span> <span class=\"string\">-n</span> <span class=\"string\">note</span> <span class=\"string\">-o</span> <span class=\"string\">wide</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/pod-after-deploy.png\" alt=\"pod-after-deploy\"></p>\n<p>可以看到已经将 <code>mongodb</code>和 <code>mysql</code>分别部署到了节点 <code>6</code>和 <code>7</code>上。</p>\n<h2 id=\"7-扩容节点的虚拟机\"><a href=\"#7-扩容节点的虚拟机\" class=\"headerlink\" title=\"7. 扩容节点的虚拟机\"></a>7. 扩容节点的虚拟机</h2><p>远程连接 <code>122</code>服务器后，打开 <code>VMWare Workstation Pro</code>，如下：</p>\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/vmware.png\" alt=\"vmware\"></p>\n<p>对于 <code>sx-k8s-node6</code>，先双击，然后点击上面的橙色运行按钮右边的下拉倒三角，关机。</p>\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/shutdown.png\" alt=\"shutdown\"></p>\n<p>然后右键 <code>sx-k8s-node6</code>，点设置</p>\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/setting.png\" alt=\"setting\"></p>\n<p>点击硬盘后点击右下角扩展</p>\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/expand.png\" alt=\"expand\"></p>\n<p>对硬盘容量进行修改。</p>\n<p>这里原本是 <code>40G</code>，我增加了 <code>50G</code>后变为了 <code>90G</code>。</p>\n<p><code>sx-k8s-node7</code>的操作类似，不再赘述。</p>\n<p>此时打开网址，访问成功！扩容成功！</p>\n<h2 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h2><p>访问（连校园网，关梯子）：</p>\n<p><a href=\"http://192.10.84.209:33395/cloudNote/\">http://192.10.84.209:33395/cloudNote/</a></p>\n<p>账号：姓名小写拼音</p>\n<p>密码：123456</p>\n<p>效果：</p>\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/6.png\" alt=\"6\"></p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<h3 id=\"起因\"><a href=\"#起因\" class=\"headerlink\" title=\"起因\"></a>起因</h3><p>之前部署的云笔记系统的存储卷太小了，当用户数量增加的时候，笔记及用户信息会增大，这有可能会引起内存爆掉的情况。存储用户信息的 <code>mysql</code>和存储笔记信息的 <code>mongodb</code>在部署的时候我都设置了 <code>1G</code>的存储卷，这是远远不够的，因此需对其进行扩容。</p>\n<p>根据老师要求，需将内存从 <code>1G</code>扩展到  <code>50G</code>，这是针对存笔记系统的 <code>mongodb</code>，为了更加稳妥，跟学弟协商后决定将存用户数据的 <code>mysql</code>也扩充到 <code>10G</code>。</p>\n<h3 id=\"大体思路：\"><a href=\"#大体思路：\" class=\"headerlink\" title=\"大体思路：\"></a>大体思路：</h3><ol>\n<li>确定 <code>mongodb</code>和 <code>mysql</code>的 <code>pod</code>所在的 <code>node</code>节点。</li>\n<li>备份数据</li>\n<li>删除旧的 <code>pod</code></li>\n<li>分别修改 <code>mongodb</code>和 <code>mysql</code>的 <code>pv</code>、 <code>pvc</code>为 <code>50Gi</code>、 <code>10Gi</code>。</li>\n<li>指定 <code>mongodb</code>和 <code>mysql</code>的 <code>pv</code>、 <code>pvc</code>及 <code>mongodb</code>、 <code>mysql</code>部署的亲和性，让其部署在指定 <code>node</code>节点，便于扩容。</li>\n<li>重新部署相应 <code>pod</code></li>\n<li>扩容指定的 <code>mongodb</code>、 <code>mysql</code>部署的节点的虚拟机。</li>\n</ol>\n<blockquote>\n<p>注：本笔记图片里的 <code>deployment</code>的编号等信息可能会不一样，因为自己操作的时候可能会删了pod在重建导致其编号及时间等不一样，图片仅用于描述过程及结果。</p>\n</blockquote>\n<h2 id=\"1-确定pod所在的node节点\"><a href=\"#1-确定pod所在的node节点\" class=\"headerlink\" title=\"1. 确定pod所在的node节点\"></a>1. 确定pod所在的node节点</h2><p>首先远程连接 <code>131</code>服务器。</p>\n<p>云笔记系统有 <code>6</code>个 <code>pod</code>，在 <code>note</code>空间里，如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod -n note</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/pod.png\" alt=\"pod\"></p>\n<p>需确定 <code>mongodb</code>、 <code>mysql</code>所在的 <code>node</code>节点，命令如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get pod -n note -o wide</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/pod-node.png\" alt=\"pod-node\"></p>\n<p>由上图可知， <code>mongodb</code>和 <code>mysql</code>的 <code>pod</code>分别被部署到了 <code>k8s-node6</code>、 <code>k8s-node7</code>节点。</p>\n<h2 id=\"2-备份数据\"><a href=\"#2-备份数据\" class=\"headerlink\" title=\"2. 备份数据\"></a>2. 备份数据</h2><p>问学长得知， <code>k8s-node6</code>、 <code>k8s-node7</code>节点位于 <code>122</code>服务器</p>\n<p>远程连接 <code>122</code>服务器后，打开 <code>VMWare Workstation Pro</code>，登录 <code>node6</code>节点：</p>\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/vmware.png\" alt=\"vmware\"></p>\n<p>账号密码为 <code>root 123456</code>，登陆后如下：</p>\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/login.png\" alt=\"login\"></p>\n<p>按下面命令将数据拷贝到 <code>tmp/backup</code>文件夹下进行备份：</p>\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/backup.png\" alt=\"backup\"></p>\n<p>对 <code>node7</code>下的 <code>mysql</code>进行同样操作，不再赘述。</p>\n<p>为了保险起见，使用 <code>xShell</code>中的 <code>xftp</code>将备份的文件再备份到桌面一份：</p>\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/xftp.png\" alt=\"xftp\"></p>\n<p>打开 <code>xshell</code>点击新建文件传输，将 <code>/home</code>下的 <code>mongodb</code>文件夹拖动到桌面。</p>\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/backup-desktop.png\" alt=\"backup-desktop\"></p>\n<p>对 <code>node7</code>下的 <code>mysql</code>进行同样操作，不再赘述。</p>\n<h2 id=\"3-删除旧的pod\"><a href=\"#3-删除旧的pod\" class=\"headerlink\" title=\"3. 删除旧的pod\"></a>3. 删除旧的pod</h2><p>删除旧的 <code>pod</code>：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">delete</span> <span class=\"string\">-f</span> <span class=\"string\">note-mysql-pvc.yaml</span> <span class=\"string\">-n</span> <span class=\"string\">note</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">delete</span> <span class=\"string\">-f</span> <span class=\"string\">note-mysql.yaml</span> <span class=\"string\">-n</span> <span class=\"string\">note</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">delete</span> <span class=\"string\">-f</span> <span class=\"string\">note-mongodb-pvc.yaml</span> <span class=\"string\">-n</span> <span class=\"string\">note</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">delete</span> <span class=\"string\">-f</span> <span class=\"string\">note-mongodb.yaml</span> <span class=\"string\">-n</span> <span class=\"string\">note</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/delete-pod.png\" alt=\"delete-pod\"></p>\n<p>此时查看 <code>pod</code>结果：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">get</span> <span class=\"string\">pod</span> <span class=\"string\">-n</span> <span class=\"string\">note</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/pod-after-deleted.png\" alt=\"pod-after-deleted\"></p>\n<p><code>mongodb</code>和 <code>mysql</code>的 <code>pod</code>已经被删掉。</p>\n<h2 id=\"4-修改pv、pvc\"><a href=\"#4-修改pv、pvc\" class=\"headerlink\" title=\"4. 修改pv、pvc\"></a>4. 修改pv、pvc</h2><p>将相关的 <code>yaml</code>文件修改为如下内容：</p>\n<p><code>note-mongodb-pvc.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-pv</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/home/mongodb/data</span> <span class=\"comment\"># 主机上的数据存储路径</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-pvc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">volumeName:</span> <span class=\"string\">note-mongodb-pv</span></span><br></pre></td></tr></table></figure>\n\n<p><code>note-mysql-pvc.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-pv</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">10Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/home/mysql/data</span> <span class=\"comment\"># 主机上的数据存储路径</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-pvc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">10Gi</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">volumeName:</span> <span class=\"string\">note-mysql-pv</span></span><br></pre></td></tr></table></figure>\n\n<p><code>yaml</code>文件里已经将内存修改为目标内存。</p>\n<h2 id=\"5-指定亲和性\"><a href=\"#5-指定亲和性\" class=\"headerlink\" title=\"5. 指定亲和性\"></a>5. 指定亲和性</h2><p>这里的亲和性是 <code>Affinity</code>，指定了这个后会让其部署在指定标签的 <code>node</code>节点上。这样仅需将指定的 <code>node</code>节点的虚拟机扩容即可。</p>\n<p>首先需要为 <code>node</code>节点添加标签。如下所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">kubectl get nodes --show-labels</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 为节点6和7添加label</span></span><br><span class=\"line\">kubectl label nodes k8s-node6 notelabel=mongodb</span><br><span class=\"line\">kubectl label nodes k8s-node7 notelabel=mysql</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/add-labels.png\" alt=\"add-labels\"></p>\n<p>指定完标签就可以添加亲和性了，如下：</p>\n<p><code>note-mongodb-pvc.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-pv</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/home/mongodb/data</span> <span class=\"comment\"># 主机上的数据存储路径</span></span><br><span class=\"line\">  <span class=\"attr\">nodeAffinity:</span></span><br><span class=\"line\">    <span class=\"attr\">required:</span></span><br><span class=\"line\">      <span class=\"attr\">nodeSelectorTerms:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">notelabel</span></span><br><span class=\"line\">          <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">          <span class=\"attr\">values:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">mongodb</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-pvc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">50Gi</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">volumeName:</span> <span class=\"string\">note-mongodb-pv</span></span><br></pre></td></tr></table></figure>\n\n<p><code>note-mysql-pvc.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolume</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-pv</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">capacity:</span></span><br><span class=\"line\">    <span class=\"attr\">storage:</span> <span class=\"string\">10Gi</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">hostPath:</span></span><br><span class=\"line\">    <span class=\"attr\">path:</span> <span class=\"string\">/home/mysql/data</span> <span class=\"comment\"># 主机上的数据存储路径</span></span><br><span class=\"line\">  <span class=\"attr\">nodeAffinity:</span></span><br><span class=\"line\">    <span class=\"attr\">required:</span></span><br><span class=\"line\">      <span class=\"attr\">nodeSelectorTerms:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">notelabel</span></span><br><span class=\"line\">          <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">          <span class=\"attr\">values:</span></span><br><span class=\"line\">          <span class=\"bullet\">-</span> <span class=\"string\">mysql</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">PersistentVolumeClaim</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-pvc</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">accessModes:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ReadWriteOnce</span></span><br><span class=\"line\">  <span class=\"attr\">resources:</span></span><br><span class=\"line\">    <span class=\"attr\">requests:</span></span><br><span class=\"line\">      <span class=\"attr\">storage:</span> <span class=\"string\">10Gi</span></span><br><span class=\"line\">  <span class=\"attr\">storageClassName:</span> <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">volumeName:</span> <span class=\"string\">note-mysql-pv</span></span><br></pre></td></tr></table></figure>\n\n<p><code>note-mongodb.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">note-mongodb-pod</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">note-mongodb-pod</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">affinity:</span></span><br><span class=\"line\">        <span class=\"attr\">nodeAffinity:</span></span><br><span class=\"line\">          <span class=\"attr\">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">            <span class=\"attr\">nodeSelectorTerms:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">notelabel</span></span><br><span class=\"line\">                <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">                <span class=\"attr\">values:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">mongodb</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lucas-njfu/note-mongodb:v1.1.0</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">27017</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MONGO_INITDB_ROOT_USERNAME</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">admin</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MONGO_INITDB_ROOT_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">5c8b18289f7848e9b0af98e81562649d</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-persistent-storage</span></span><br><span class=\"line\">              <span class=\"attr\">mountPath:</span> <span class=\"string\">/data/db</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-persistent-storage</span></span><br><span class=\"line\">          <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">            <span class=\"attr\">claimName:</span> <span class=\"string\">note-mongodb-pvc</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mongodb-service</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">note-mongodb-pod</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span> <span class=\"comment\"># service类型</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">27017</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">30017</span> <span class=\"comment\"># 指定绑定的node的端口(默认的取值范围是：30000-32767),如果不指定，会默认分配</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">27017</span></span><br></pre></td></tr></table></figure>\n\n<p><code>note-mysql.yaml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">apps/v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Deployment</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-deployment</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">replicas:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">matchLabels:</span></span><br><span class=\"line\">      <span class=\"attr\">app:</span> <span class=\"string\">note-mysql-pod</span></span><br><span class=\"line\">  <span class=\"attr\">template:</span></span><br><span class=\"line\">    <span class=\"attr\">metadata:</span></span><br><span class=\"line\">      <span class=\"attr\">labels:</span></span><br><span class=\"line\">        <span class=\"attr\">app:</span> <span class=\"string\">note-mysql-pod</span></span><br><span class=\"line\">    <span class=\"attr\">spec:</span></span><br><span class=\"line\">      <span class=\"attr\">affinity:</span></span><br><span class=\"line\">        <span class=\"attr\">nodeAffinity:</span></span><br><span class=\"line\">          <span class=\"attr\">requiredDuringSchedulingIgnoredDuringExecution:</span></span><br><span class=\"line\">            <span class=\"attr\">nodeSelectorTerms:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">matchExpressions:</span></span><br><span class=\"line\">              <span class=\"bullet\">-</span> <span class=\"attr\">key:</span> <span class=\"string\">notelabel</span></span><br><span class=\"line\">                <span class=\"attr\">operator:</span> <span class=\"string\">In</span></span><br><span class=\"line\">                <span class=\"attr\">values:</span></span><br><span class=\"line\">                <span class=\"bullet\">-</span> <span class=\"string\">mysql</span></span><br><span class=\"line\">      <span class=\"attr\">containers:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-mysql</span></span><br><span class=\"line\">          <span class=\"attr\">image:</span> <span class=\"string\">registry.cn-hangzhou.aliyuncs.com/lucas-njfu/note_mysql:v1.1.0</span></span><br><span class=\"line\">          <span class=\"attr\">imagePullPolicy:</span> <span class=\"string\">IfNotPresent</span></span><br><span class=\"line\">          <span class=\"attr\">env:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">MYSQL_ROOT_PASSWORD</span></span><br><span class=\"line\">              <span class=\"attr\">value:</span> <span class=\"string\">dfa6f1b032ee42ed95d12647225f2ff4</span></span><br><span class=\"line\">          <span class=\"attr\">ports:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">containerPort:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">          <span class=\"attr\">volumeMounts:</span></span><br><span class=\"line\">            <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-persistent-storage</span></span><br><span class=\"line\">              <span class=\"attr\">mountPath:</span> <span class=\"string\">/var/lib/mysql</span></span><br><span class=\"line\">      <span class=\"attr\">volumes:</span></span><br><span class=\"line\">        <span class=\"bullet\">-</span> <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-persistent-storage</span></span><br><span class=\"line\">          <span class=\"attr\">persistentVolumeClaim:</span></span><br><span class=\"line\">            <span class=\"attr\">claimName:</span> <span class=\"string\">note-mysql-pvc</span> <span class=\"comment\"># 使用之前创建的持久卷声明</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">apiVersion:</span> <span class=\"string\">v1</span></span><br><span class=\"line\"><span class=\"attr\">kind:</span> <span class=\"string\">Service</span></span><br><span class=\"line\"><span class=\"attr\">metadata:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">note-mysql-service</span></span><br><span class=\"line\"><span class=\"attr\">spec:</span></span><br><span class=\"line\">  <span class=\"attr\">selector:</span></span><br><span class=\"line\">    <span class=\"attr\">app:</span> <span class=\"string\">note-mysql-pod</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">NodePort</span> <span class=\"comment\"># service类型</span></span><br><span class=\"line\">  <span class=\"attr\">ports:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">port:</span> <span class=\"number\">3306</span></span><br><span class=\"line\">    <span class=\"attr\">nodePort:</span> <span class=\"number\">30006</span> <span class=\"comment\"># 指定绑定的node的端口(默认的取值范围是：30000-32767), 如果不指定，会默认分配</span></span><br><span class=\"line\">    <span class=\"attr\">targetPort:</span> <span class=\"number\">3306</span></span><br></pre></td></tr></table></figure>\n\n<p>这样，亲和性就修改完毕了。</p>\n<h2 id=\"6-重新部署相应的pod\"><a href=\"#6-重新部署相应的pod\" class=\"headerlink\" title=\"6. 重新部署相应的pod\"></a>6. 重新部署相应的pod</h2><p>接下来按 <code>5. 指定亲和性</code> 所修改的 <code>yaml</code>重新进行 <code>pod</code>部署：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">create</span> <span class=\"string\">-f</span> <span class=\"string\">note-mysql-pvc.yaml</span> <span class=\"string\">-n</span> <span class=\"string\">note</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">create</span> <span class=\"string\">-f</span> <span class=\"string\">note-mysql.yaml</span> <span class=\"string\">-n</span> <span class=\"string\">note</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">create</span> <span class=\"string\">-f</span> <span class=\"string\">note-mongodb-pvc.yaml</span> <span class=\"string\">-n</span> <span class=\"string\">note</span></span><br><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">create</span> <span class=\"string\">-f</span> <span class=\"string\">note-mongodb.yaml</span> <span class=\"string\">-n</span> <span class=\"string\">note</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/pod-deploy.png\" alt=\"pod-deploy\"></p>\n<p>查看部署的结果：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">kubectl</span> <span class=\"string\">get</span> <span class=\"string\">pod</span> <span class=\"string\">-n</span> <span class=\"string\">note</span> <span class=\"string\">-o</span> <span class=\"string\">wide</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/pod-after-deploy.png\" alt=\"pod-after-deploy\"></p>\n<p>可以看到已经将 <code>mongodb</code>和 <code>mysql</code>分别部署到了节点 <code>6</code>和 <code>7</code>上。</p>\n<h2 id=\"7-扩容节点的虚拟机\"><a href=\"#7-扩容节点的虚拟机\" class=\"headerlink\" title=\"7. 扩容节点的虚拟机\"></a>7. 扩容节点的虚拟机</h2><p>远程连接 <code>122</code>服务器后，打开 <code>VMWare Workstation Pro</code>，如下：</p>\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/vmware.png\" alt=\"vmware\"></p>\n<p>对于 <code>sx-k8s-node6</code>，先双击，然后点击上面的橙色运行按钮右边的下拉倒三角，关机。</p>\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/shutdown.png\" alt=\"shutdown\"></p>\n<p>然后右键 <code>sx-k8s-node6</code>，点设置</p>\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/setting.png\" alt=\"setting\"></p>\n<p>点击硬盘后点击右下角扩展</p>\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/expand.png\" alt=\"expand\"></p>\n<p>对硬盘容量进行修改。</p>\n<p>这里原本是 <code>40G</code>，我增加了 <code>50G</code>后变为了 <code>90G</code>。</p>\n<p><code>sx-k8s-node7</code>的操作类似，不再赘述。</p>\n<p>此时打开网址，访问成功！扩容成功！</p>\n<h2 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h2><p>访问（连校园网，关梯子）：</p>\n<p><a href=\"http://192.10.84.209:33395/cloudNote/\">http://192.10.84.209:33395/cloudNote/</a></p>\n<p>账号：姓名小写拼音</p>\n<p>密码：123456</p>\n<p>效果：</p>\n<p><img src=\"/../image/%E4%BA%91%E7%AC%94%E8%AE%B0%E7%B3%BB%E7%BB%9F%E6%89%A9%E5%AE%B9/6.png\" alt=\"6\"></p>\n"},{"title":"MARL","keywords":["多智能体强化学习"],"description":"多智能体强化学习的算法和思路总结","abbrlink":17763,"date":"2023-10-30T09:04:41.000Z","updated":"2023-11-09T09:37:56.000Z","top_img":"https://s2.loli.net/2024/02/06/GAfLl3XPUJgH4ec.png","comments":1,"cover":"https://s2.loli.net/2024/02/06/FCKdzqG2wJ8RmcS.png","toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"\n> 由于我的科研方向是`多智能体强化学习`，且由于研一忙于课程和一些开源项目，导致我对一些科研方面的算法理解不够充分。刚好，最近一次和东大的联合组会轮到我讲了，借此深度理解一下这些算法。\n\n> 在这篇笔记中，我会总结我的直系学长推荐我先看的多智能体强化学习知乎专栏内容，然后如果有时间，再总结我导师之前发给我让我看的论文。相关链接我会放在下面。\n\n知乎专栏：https://www.zhihu.com/column/c_1061939147282915328\n\n## 基础知识与博弈\n\n### 引言\n在多智能体系统中，每个智能体通过与环境进行交互获取奖励值（reward）来学习改善自己的策略，从而获得该环境下最优策略的过程就多智能体强化学习。\n\n在单智能体强化学习中，智能体所在的环境是稳定不变的，但是在多智能体强化学习中，环境是复杂的、动态的，因此给学习过程带来很大的困难。\n\n1. 维度爆炸：在单体强化学习中，需要存储状态值函数或动作-状态值函数。在多体强化学习中，状态空间变大，联结动作空间随智能体数量指数增长，维度非常大，计算复杂。\n2. 目标奖励确定困难：多智能体系统中每个智能体的任务可能不同，但是彼此之间又相互耦合影响。奖励设计的优劣直接影响学习到的策略的好坏。\n3. 不稳定性：在多智能体系统中，多个智能体是同时学习的。当同伴的策略改变时，每个智能体自身的最优策略也可能会变化，这将对算法的收敛性带来影响。\n4. 探索-利用：探索不光要考虑自身对环境的探索，也要对同伴的策略变化进行探索，可能打破同伴策略的平衡状态。每个智能体的探索都可能对同伴智能体的策略产生影响，这将使算法很难稳定，学习速度慢。\n\n多智能体系统中智能体之间可能涉及到合作与竞争等关系，引入博弈的概念，将博弈论与强化学习相结合可以很好的处理这些问题。\n\n### 纳什均衡\n\n![img_1.png](..%2Fimage%2FMARL%2Fimg_1.png)\n\n### 完全混合策略\n若一个策略对于智能体动作集中的所有动作的概率都大于0，则这个策略为一个完全混合策略。\n\n### 纯策略\n\n若智能体的策略对一个动作的概率分布为1，对其余的动作的概率分布为0，则这个策略为一个纯策略。\n\n### 零和博弈\n零和博弈中，两个智能体是完全竞争对抗关系，则 `R1 = - R2` 。在零和博弈中只有一个纳什均衡值，即使可能有很多纳什均衡策略，但是期望的奖励是相同的。\n\n### 一般和博弈\n一般和博弈是指任何类型的矩阵博弈，包括完全对抗博弈、完全合作博弈以及二者的混合博弈。在一般和博弈中可能存在多个纳什均衡点。\n\n> 矩阵博弈和线性规划求双智能体矩阵博弈的纳什均衡策略可以看这篇：https://zhuanlan.zhihu.com/p/53474965\n\n## Minimax-Q\n论文：[Markov games as a framework for multi-agent reinforcement learning](https://courses.cs.duke.edu/spring07/cps296.3/littman94markov.pdf)\n\nMinimax-Q算法应用于`两个玩家的零和随机博弈中`。`Minimax-Q中的Minimax指的是使用minimax方法构建线性规划来求解每个特定状态s的阶段博弈的纳什均衡策略。Q指的是借用Q-learning中的TD方法来迭代学习状态值函数或动作-状态值函数。`\n\n在两玩家零和随机博弈中，给定一个状态s，则定义第i个智能体的状态值函数如下：意义为，`每个智能体最大化在与对手博弈中最差情况下的期望奖励值`。\n\n![img_2.png](..%2Fimage%2FMARL%2Fimg_2.png)\n\n理想情况，如果算法能够对每一个状态-动作对访问无限次，那么该算法能够收敛到纳什均衡策略。但是在上述算法中存在几个缺点：\n\n1. 在第5步中需要不断求解一个线性规划，这将造成学习速度的降低，增加计算时间。\n2. 为了求解第5步，智能体i需要知道所有智能体的动作空间，这个在分布式系统中将无法满足。\n3. 只满足收敛性，不满足合理性。Minimax-Q算法能够找到多智能体强化学习的纳什均衡策略，但是假设对手使用的不是纳什均衡策略，而是一个较差的策略，则当前智能体并不能根据对手的策略学习到一个更优的策略。该算法无法让智能体根据对手的策略来调节优化自己的策略，而只能找到随机博弈的纳什均衡策略。这是由于Minimax-Q算法是一个对手独立算法（opponent-independent algorithm），不论对手策略是怎么样的，都收敛到该博弈的纳什均衡策略。就算对手采用一个非常弱的策略，当前智能体也不能学习到一个比纳什均衡策略更好的策略。\n\n## Nash Q-Learning\n论文：[Nash Q-learning for general-sum stochastic games](https://www.jmlr.org/papers/volume4/temp/hu03a.pdf)\n\nNash Q-Learning算法是将Minimax-Q算法`从零和博弈扩展到多人一般和博弈`的算法。在Minimax-Q算法中需要通过Minimax线性规划求解阶段博弈的纳什均衡点，拓展到`Nash Q-Learning算法就是使用二次规划求解纳什均衡点`。Nash Q-Learning算法在合作性均衡或对抗性均衡的环境中能够收敛到纳什均衡点，其收敛性条件是，在每一个状态s的阶段博弈中，都能够找到一个全局最优点或者鞍点，只有满足这个条件，Nash Q-Learning算法才能够收敛。与Minimax-Q算法相同，Nash Q-Learning算法求解二次规划的过程也非常耗时，降低了算法的学习速度。\n\n其算法流程如下：\n\n![img_3.png](..%2Fimage%2FMARL%2Fimg_3.png)\n\n该算法需要观测其他所有智能体的动作ai与奖励值ri。并且与Minimax-Q算法一样，只满足收敛性，不满足合理性。只能收敛到纳什均衡策略，不能根据其他智能体的策略来优化调剂自身的策略。\n\n## Friend-or-Foe Q-Learning\n论文：[Friend-or-foe Q-learning in general-sum games](https://www.researchgate.net/profile/Michael-Littman/publication/2933305_Friend-or-Foe_Q-learning_in_General-Sum_Games/links/54b66cb80cf24eb34f6d19dc/Friend-or-Foe-Q-learning-in-General-Sum-Games.pdf)\n\nFriend-or-Foe Q-Learning（FFQ）算法也是从Minimax-Q算法拓展而来。为了能够处理一般和博弈，FFQ算法对一个智能体i，将其他所有智能体分为两组，一组为i的friend帮助i一起最大化其奖励回报，另一组为i的foe对抗i并降低i的奖励回报，因此对每个智能体而言都有两组。这样一个n智能体的一般和博弈就转化为了一个两智能体的零和博弈。\n\n其纳什均衡策略求解方法如下所示：\n\n![img_4.png](..%2Fimage%2FMARL%2Fimg_4.png)\n\n算法流程如下：\n\n![img_5.png](..%2Fimage%2FMARL%2Fimg_5.png)\n\n有一种利用Minimax-Q算法进行多人博弈方法为，两队零和博弈，将所有智能体分成两个小组进行零和博弈。两队零和博弈中每一组有一个leader才控制这一队智能体的所有策略，获取的奖励值也是这一个小组的整体奖励值。\n\nFFQ算法没有team learder，每个人选择自己动作学习自己的策略获得自己的奖励值，但是为了更新值，每个智能体需要在每一步观测其他所有friend与foe的执行动作。\n\nFFQ与Minimax-Q算法一样都需要利用线性规划，因此算法整体学习速度会变慢。\n\n## WoLF Policy Hill-Climbing\n论文：[Multiagent learning using a variable learning rate](https://pdf.sciencedirectassets.com/271585/1-s2.0-S0004370200X00872/1-s2.0-S0004370202001212/main.pdf?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEGUaCXVzLWVhc3QtMSJHMEUCIQC83rDT43qYROWb01kvyuybyC5EMghziFRQfbzKh2phkAIgDDv7TwK%2Bil2pEyYMJNLreVUvpkwWBgC41FYPaJ1i06cqvAUInf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAFGgwwNTkwMDM1NDY4NjUiDDwT6ryaWf366e7YEyqQBSV%2Bk4Sy0RKqs%2FFblDXiW14ORHDzZeMEKYZ5LfWZdVYpVxwo4vTYmKH2nercH63Et4tIjK0e9nL%2FzjvPpjmkrFWHn6hO0F8KjMsnwlmzVepHF0btXh7AkZ3e5t%2F2bnTZ7qTDIfyIUlvNHlEKL%2F9K5mHZexxj3w3tRoxmqUu8NYM6l2eVAv%2BcEGunXeil0OTm%2FSRkYiIlKRNiuZikU2EPu3h9Psh00bAXL07iFhI5W4y3QkVAmyWJ9ZRz3XtitHSz%2BTVlNngLHNqDlo4LosRLqb7IYbTMz8mTRt%2Bupsy1T6e%2Bt1k0PCXzBrMR4xqRuv006eN8HG7%2FOHDEpmrKu7kne4KeuWyh1qyIHWZOtG2cqhDN%2F%2Bt8okdIhgmNbKIikDVOUqNwejq1Mnka%2B0qSkQ1BabTqjK1RKv1gFNC3vkHeEheIYU8%2B1kJIT3NWLWHfETSWvpuS6cVQSBNvCJ4CkXUMq3tQFOkc1B36oBuNEDLMvBXbjpYWp9DgKJ3yAeyqO8juXKnp5J%2F3NM7Uom6qpwgK4XNNxbXWrpzjYQpeahoFc2F9qyOzBHnX3mb%2B2%2BMdRq1fUwZ0fxzmF0HwBL8VcOWdbgiPhK6qDQmufFdZsMowZirITlDpFdg0pa5F4PkH%2BOpYXYXQA%2BusAbQ%2FJLnUibNKgBd8Ssk2Fj7%2BAj1H1%2B7hEDC%2BKVib31jzGP9aBwfa76WjOdwk%2B%2FVtOJmEMkw2novRj1vcWCAOB3rfg5xFumwxuEK0uDT1R0He0KxhDRKGErfMTRXnb%2FyzBt5MLsmAz5g8wUFQtqhEq3QhLmuGTVdOVFkX6vG2qiPJMQFrehup1kL1jEGqTSK7K9pcr%2BMh%2F%2F5bt5%2FspmxqMvOBRUAeZCYaEAYlMMnvpqoGOrEBjuaNrgG15OoT%2BQiARadKSKYw5yb49jYpL5ODDxgi370KIIs7mCTNedup3876q1Q1OH4IMlTPYRONhLrYVCCr%2Fop8JfLOur2Kx4cAbHsxPmwrtlKhbwv%2FByOhbxlQf%2BUKhNjDXNuR1tSn0DNiTsUyHtUoHD5Pp7unY1PXGDGbYbrnCR7ByWapCYxFzQ1IqYENVSoMPhKfMoOaVw3CEXofL7EIi2a840t%2Fp1COhmawkApQ&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20231107T051949Z&X-Amz-SignedHeaders=host&X-Amz-Expires=300&X-Amz-Credential=ASIAQ3PHCVTYYPNOQKWR%2F20231107%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=3d4d8f4e51351b7226cd8bc38cbc9fa5109884a7636050217642770bc18913c9&hash=c607cf9fed0bd128c473b32bef56a596967a6b23b8e4d2b87884f7626c46df4c&host=68042c943591013ac2b2430a89b270f6af2c76d8dfd086a07176afe7c76c2c61&pii=S0004370202001212&tid=spdf-d5458afb-6fde-4cc5-bd92-4518991575a2&sid=8008b1c63c486948dc7b9aa27c1ce9ec5b7fgxrqa&type=client&tsoh=d3d3LnNjaWVuY2VkaXJlY3QuY29t&ua=120e5c515d53530157&rr=82231f9f7f2904c0&cc=hk)\n\n![img_6.png](..%2Fimage%2FMARL%2Fimg_6.png)\n\nWolF是指，当智能体做的比期望值好的时候小心缓慢的调整参数，当智能体做的比期望值差的时候，加快步伐调整参数。\n\nPHC是一种单智能体在稳定环境下的一种学习算法。该算法的核心就是通常强化学习的思想，增大能够得到最大累积期望的动作的选取概率。该算法具有合理性，能够收敛到最优策略。\n\n其算法流程如下：\n\n![img_7.png](..%2Fimage%2FMARL%2Fimg_7.png)\n\n为了将PHC应用于动态环境中，将WoLF与PHC算法结合，使得智能体获得的奖励在比预期差时，能够快速调整适应其他智能体策略变化，当比预期好时谨慎学习，给其他智能体适应策略变化的时间。并且WoLF-PHC算法能够收敛到纳什均衡策略，并且具备合理性，当其他智能体采用某个固定策略使，其也能收敛到一个目前状况下的最优策略而不是收敛到一个可能效果不好的纳什均衡策略处。在WoLF-PHC算法中，使用一个可变的学习速率 `δ` 来实现WoLF效果，当策略效果较差时使用 `δl` ，策略效果较好时使用 `δw` ，并且满足 `δl > δw` 。还有一个优势是，WoLF-PHC算法不用观测其他智能体的策略、动作及奖励值，需要更少的空间去记录Q值，并且WoLF-PHC算法是通过PHC算法进行学习改进策略的，所以不需要使用线性规划或者二次规划求解纳什均衡，算法速度得到了提高。虽然WoLF-PHC算法在实际应用中取得了非常好的效果，并且能够收敛到最优策略。但是其收敛性在理论上一直没有得到证明。\n\n其算法流程如下所示：\n\n![img_8.png](..%2Fimage%2FMARL%2Fimg_8.png)\n\n> 关于MiniMax-Q、Nash Q-Learning、Friend-or-Foe Q-Learning、WoLF Policy Hill-Climbing算法的详细介绍可以看这篇：https://www.cnblogs.com/zuti666/p/16909220.html 和 https://zhuanlan.zhihu.com/p/53563792\n\n\n## MADDPG\n论文：[Multi-Agent Actor-Critic for Mixed Cooperative-Competitive Environments](https://arxiv.org/abs/1706.02275)\n\nOpenAI 2017发表在NIPS 上的一篇文章。主要是将AC算法进行了一系列改进，使其能够适用于传统RL算法无法处理的复杂多智能体场景。\n\n传统RL算法面临的一个主要问题是由于每个智能体都是在不断学习改进其策略，因此从每一个智能体的角度看，环境是一个动态不稳定的，这不符合传统RL收敛条件。并且在一定程度上，无法通过仅仅改变智能体自身的策略来适应动态不稳定的环境。由于环境的不稳定，将无法直接使用之前的经验回放等DQN的关键技巧。policy gradient算法会由于智能体数量的变多使得本就有的方差大的问题加剧。\n\nMADDPG算法具有以下三点特征： \n1. 通过学习得到的最优策略，在应用时只利用局部信息就能给出最优动作。 \n2. 不需要知道环境的动力学模型以及特殊的通信需求。 \n3. 该算法不仅能用于合作环境，也能用于竞争环境。\n\nMADDPG算法具有以下三点技巧：\n1. 集中式训练，分布式执行：训练时采用集中式学习训练critic与actor，使用时actor只用知道局部信息就能运行。critic需要其他智能体的策略信息，本文给了一种估计其他智能体策略的方法，能够只用知道其他智能体的观测与动作。\n2. 改进了经验回放记录的数据。为了能够适用于动态环境，每一条信息由(x, x', a1,..., an, r1,..., rn)组成，X = (o1,..., on)。表示每个智能体的观测。\n3. 利用策略集合效果优化（policy ensemble）：对每个智能体学习多个策略，改进时利用所有策略的整体效果进行优化。以提高算法的稳定性以及鲁棒性。\n\n### 背景知识\n\n#### DQN\n深度Q网络（deep Q-network）\n![img_9.png](..%2Fimage%2FMARL%2Fimg_9.png)\n\n#### SPG\n随机策略梯度（stochastic policy gradient）\n\n![img_10.png](..%2Fimage%2FMARL%2Fimg_10.png)\n\n#### DPG\n确定性策略梯度（deterministic policy gradient）\n\n![img_11.png](..%2Fimage%2FMARL%2Fimg_11.png)\n\n### MADDPG\n\n#### 多智能体AC设计\n\nMADDPG集中式的学习，分布式的应用。因此允许使用一些额外的信息（全局信息）进行学习，只要在应用的时候使用局部信息进行决策就行。这点就是Q-learning的一个不足之处，Q-learning在学习与应用时必须采用相同的信息。所以这里MADDPG对传统的AC算法进行了一个改进，Critic扩展为可以利用其他智能体的策略进行学习，这点的进一步改进就是每个智能体对其他智能体的策略进行一个函数逼近。\n![img_12.png](..%2Fimage%2FMARL%2Fimg_12.png)\n![img_13.png](..%2Fimage%2FMARL%2Fimg_13.png)\n\n#### 估计其他智能体策略\n\n![img_14.png](..%2Fimage%2FMARL%2Fimg_14.png)\n\n#### 策略集合优化\n\n![img_15.png](..%2Fimage%2FMARL%2Fimg_15.png)\n\n### 相关PPT\n\n![img_16.png](..%2Fimage%2FMARL%2Fimg_16.png)\n![img_17.png](..%2Fimage%2FMARL%2Fimg_17.png)\n![img_18.png](..%2Fimage%2FMARL%2Fimg_18.png)\n![img_19.png](..%2Fimage%2FMARL%2Fimg_19.png)\n![img_20.png](..%2Fimage%2FMARL%2Fimg_20.png)\n\n\n## IQL\n论文：[Multiagent Cooperation and Competition with Deep Reinforcement Learning](https://arxiv.org/abs/1511.08779)\n\nIndependent Q-Learning\n\n本文讲的是介绍如何将DQN用到Multi-agent问题中，并表示最直接的方法就是，智能体把其他智能体喝环境看作整体，每个智能体之间的决策相互独立（用原文的话说就是each agent is controlled by an independent Deep Q-Network）。\n\nIQL发现，两个智能体都独立采用DQN，在不修改除了reward外的任何参数、细节，agent都能取得不错的成绩。这说明IQL可以作为多智能体强化学习的baseline。\n\nIQL（independent Q-learning）算法非常简单暴力地给每个智能体执行一个Deep-Q-learning算法。IQL把单智能体Deep-Q-learning算法直接应用在多智能体学习领域，各个智能体是各自为政的。`这是此类算法的一个极端。`\n\n其他没啥要讲的。。。\n\n![img_21.png](..%2Fimage%2FMARL%2Fimg_21.png)\n\n## COMA\n论文：[Counterfactual Multi-Agent Policy Gradients](https://arxiv.org/abs/1705.08926)\n\nCOMA (counterfactual multi-agent) 使用一个集中式的critic网络计算优势函数A，统一给Agenti计算对应的actioni分别去执行。所谓CTDE（central training decentralize execution）。COMA是把Actor-critic单智能体算法直接应用在多智能体学习领域，各个智能体按照集中的critic网络指令行事，它们是完全协作关系。`这是此类算法的另一个极端。`\n![img_23.png](..%2Fimage%2FMARL%2Fimg_23.png)\n\n多智能体强化学习算法必然都是在IQL和COMA两个算法之间做平衡。Agent既不能完全独立行事，也不能完全按中心节点指令行事。\n\n那么这些算法都在解决什么问题呢？\n\n只要模型共享Qtot值函数，团队奖励值ri有可能仅仅是某几个智能体获得的，其它智能体并没有做贡献但缺获得了奖励值ri。这就是所谓多智能体信用分配（credit assignment）问题。\n\n在COMA算法中，为了解决多智能体信用分配问题，提出了优势函数A（遍历Agenti动作空间μi里的所有动作，而保持其它Agent的动作空间μ–不变，计算每个Agenti的参数值），用来计算反事实基线（counterfactual baseline）。\n\n![img_24.png](..%2Fimage%2FMARL%2Fimg_24.png)\n\n这个思想来自difference reward。difference reward的思想是：保持其他智能体的联合动作不动，把当前智能体的action替换为一个default action，检查值函数Q是否有变化，如果没有，代表当前智能体的action是无贡献的action，因为奖励r不是当前智能体的action获得的。但是difference reward思想有个问题，default action选谁？？？无法选择！！！为了解决这个问题，COMA定义了优势函数A，解决了多智能体信用分配问题。如果仔细看算法的A函数公式，它其实就是AC算法中常用的优势函数A在多智能体领域的扩展而已。\n\n![img_25.png](..%2Fimage%2FMARL%2Fimg_25.png)\n\nCOMA 与 MADDPG 在 actor network 上的不同之处在于前者使用的是 GRU 网络，为了更好的处理局部观察问题，但是后者使用的则是普通的 DNN。\n\nCOMA算法具体框架如下图所示：\n![img_22.png](..%2Fimage%2FMARL%2Fimg_22.png)\n\n网络架构：\n![img_26.png](..%2Fimage%2FMARL%2Fimg_26.png)\n\n\n## VDN\n论文：[Value-Decomposition Networks For Cooperative Multi-Agent Learning](https://arxiv.org/abs/1706.05296)\n\nVDN（Value-Decomposition Networks）算法是一种用于多智能体强化学习（MARL）的算法。它旨在解决多智能体系统中合作与竞争的问题，其中各个智能体需要同时考虑个体利益与整体目标。\n\nVDN算是大名鼎鼎的QMIX算法的前身。VDN算法假定：`Qtot是每个智能体的Qi的算术加和。对于智能体Agenti来说，它只用最大化Qtot函数的子项Qi函数即可。`如下图：\n左边是IQL，右边是VDN\n![img_27.png](..%2Fimage%2FMARL%2Fimg_27.png)\n\n作者假定如下等式成立：\n![img_29.png](..%2Fimage%2FMARL%2Fimg_29.png)\n\nh表示序列观察，a表示序列动作。 注意到，上述分解满足一个很好的性质，即对左边的联合 Q function 进行 操作，等价于对右边每一个局部 Q function 分别进行 。这样可以保证训练完毕后去中心化执行时，即使整个系统只基于局部观察进行决策，其策略也是与基于全局观察进行决策是一致的。\n\n推导上式：\n假定整个多智能体系统中包含两个智能体，并且全局回报函数是每个智能体的局部回报函数的加和：\n![img_30.png](..%2Fimage%2FMARL%2Fimg_30.png)\n这样分解后的 Q 函数是基于全局观察的。由于使用的网络结构是 LSTM，那么估计误差是可以缩小的，并且还可以通过智能体之间的通信来进一步减小误差，所以本文假设：\n![img_31.png](..%2Fimage%2FMARL%2Fimg_31.png)\n\n网络架构：\n![img_28.png](..%2Fimage%2FMARL%2Fimg_28.png)\n\n\nVDN算法强调的是把总的Q相信分解为多个Q之和，每个Q对应每个智能体的动作价值，这种会导致一个结果，那就是这样累计求和的Q可能没有具体的意义、吃大锅饭导致有agent划水之类的结果。这些问题在QMIX中得到了比较好的解决。\n\n## QMIX\n论文：[QMIX: Monotonic Value Function Factorisation for Deep Multi-Agent Reinforcement Learning](https://arxiv.org/abs/1803.11485)\n\n深度多智能体强化学习的单调值函数分解\n\nQMIX是一个多智能体强化学习算法，具有如下特点： \n1. 学习得到分布式策略。 \n2. 本质是一个值函数逼近算法。 \n3. 由于对一个联合动作-状态只有一个总奖励值，而不是每个智能体得到一个自己的奖励值，因此只能用于合作环境，而不能用于竞争对抗环境。 \n4. QMIX算法采用集中式学习，分布式执行应用的框架。通过集中式的信息学习，得到每个智能体的分布式策略。 \n5. 训练时借用全局状态信息来提高算法效果。是后文提到的VDN方法的改进。 \n6. 接上一条，QMIX设计一个神经网络来整合每个智能体的局部值函数而得到联合动作值函数，VDN是直接求和。 \n7. 每个智能体的局部值函数只需要自己的局部观测，因此整个系统在执行时是一个分布式的，通过局部值函数，选出累积期望奖励最大的动作执行。 \n8. 算法使联合动作值函数与每个局部值函数的单调性相同，因此对局部值函数取最大动作也就是使联合动作值函数最大。 \n9. 算法针对的模型是一个分布式多智能体部分可观马尔可夫决策过程（Dec-POMDP）。\n\n### 背景知识\n\n#### MARL核心问题\n\n在多智能体强化学习中一个关键的问题就是如何学习联合动作值函数，因为该函数的参数会随着智能体数量的增多而成指数增长，`如果动作值函数的输入空间过大，则很难拟合出一个合适函数来表示真实的联合动作值函数`。另一个问题就是学得了联合动作值函数后，`如何通过联合值函数提取出一个优秀的分布式的策略`。这其实是单智能体强化学习拓展到MARL的核心问题。\n\n#### Dec-POMDP\nDec-POMDP指的是分布式部分可观察马尔可夫决策过程（Decentralized Partially Observable Markov Decision Process）。在 Dec-POMDP 中，有多个智能体同时存在，并且每个智能体只能观察到局部的环境信息，而不能直接获取全局状态。此外，每个智能体的动作会影响整个系统的演变。\n![img_32.png](..%2Fimage%2FMARL%2Fimg_32.png)\n\n#### IQL\n\nIQL（independent Q-learning）就是非常暴力的给每个智能体执行一个Q-learning算法，因为共享环境，并且环境随着每个智能体策略、状态发生改变，对每个智能体来说，环境是动态不稳定的，因此这个算法也无法收敛，但是在部分应用中也具有较好的效果。\n\n#### VDN\n\n如前介绍：\n![img_33.png](..%2Fimage%2FMARL%2Fimg_33.png)\n\n#### DRQN\n\nDRQN是一个用来处理POMDP（部分可观马尔可夫决策过程）的一个算法，其采用LSTM替换DQN卷基层后的一个全连接层，来达到能够记忆历史状态的作用，因此可以在部分可观的情况下提高算法性能。由于QMIX解决的是多智能体的POMDP问题，因此每个智能体采用的是DRQN算法。\n\n\n### QMIX\n\nQMIX是在VDN上的一种拓展，由于VDN只是将每个智能体的局部动作值函数求和相加得到联合动作值函数，虽然满足联合值函数与局部值函数单调性相同的可以进行分布化策略的条件，但是其没有在学习时利用状态信息以及没有采用非线性方式对单智能体局部值函数进行整合，使得VDN算法还有很大的提升空间。QMIX就是采用一个混合网络对单智能体局部值函数进行合并，并在训练学习过程中加入全局状态信息辅助，来提高算法性能。\n\nQMIX约束条件：\n![img_34.png](..%2Fimage%2FMARL%2Fimg_34.png)\n也就是总Q关于每个agent的偏导都必须是正的。也就是，对于每个agent来说，追求自身收益的最大化是没有错误的（都对全局有不小于0的贡献）。\n\n具体网络结构如下：\n![img_35.png](..%2Fimage%2FMARL%2Fimg_35.png)\n\n图(c)表示每个智能体采用一个DRQN来拟合自身的Q值函数得到Qi(τi,ai; θi)，DRQN循环输入当前的观测oi,t，以及上一时刻的动作ai,t-1来得到Q值。\n\n图(b)表示混合网络的结构。其输入为每个DRQN网络的输出。为了满足上述的单调性约束，混合网络的所有权值都是非负数，对偏移量不做限制，这样就可以确保满足单调性约束。\n\n为了能够更多的利用到系统的状态信息st ，采用一种超网络（hypernetwork），将状态st作为输入，输出为混合网络的权值及偏移量。为了保证权值的非负性，采用一个线性网络以及绝对值激活函数保证输出不为负数。对偏移量采用同样方式但没有非负性的约束，混合网络最后一层的偏移量通过两层网络以及ReLU激活函数得到非线性映射网络。由于状态信息st是通过超网络混合到Qtot中的，而不是仅仅作为混合网络的输入项，这样带来的一个好处是，如果作为输入项则st的系数均为正，这样则无法充分利用状态信息来提高系统性能，相当于舍弃了一半的信息量。\n\nQMIX的Loss：\n![img_36.png](..%2Fimage%2FMARL%2Fimg_36.png)\n\n更新用到了传统的DQN的思想，其中b表示从经验记忆中采样的样本数量，\n![img_37.png](..%2Fimage%2FMARL%2Fimg_37.png)\n\n由于满足上文的单调性约束，对Qtot进行argmax 操作的计算量就不在是随智能体数量呈指数增长了，而是随智能体数量线性增长，极大的提高了算法效率。\n\n\n## QTRAN\n论文：[QTRAN: Learning to Factorize with Transformation for Cooperative Multi-Agent Reinforcement Learning](https://arxiv.org/abs/1905.05408)\n\n学习因式分解以实现协作多智能体强化学习 Q-Tran\n\nQMIX 在近似𝑄𝑡𝑜𝑡𝑎𝑙(𝒔, 𝒖)时额外使用了全局状态𝒔，这样就可以基于全局状态𝒔进行训练。但是如果直接将𝒔和[𝑄1, … , 𝑄𝑁]一起输入到神经网络𝑓去得到𝑄𝑡𝑜𝑡𝑎𝑙， 由于前面限制了𝑓中的参数是非负的， 但这会对𝑄𝑡𝑜𝑡𝑎𝑙和𝒔的关系进行不必要的限制，因为只希望局部最优动作就是全局最优动作。QTRAN 聚焦于释放累加性和单调性的限制， 去分解所有可分解的任务。 其思想在于只要保证个体最优动作𝑢̅和联合最优动作𝑢∗是相同的。\n\nQTRAN 认为既然 VDN 和 QMIX 是通过累加或者单调近似得到的𝑄𝑡𝑜𝑡𝑎𝑙， 那么𝑄𝑡𝑜𝑡𝑎𝑙就很有可能与真实的𝑄𝑡𝑜𝑡𝑎𝑙 ∗ 相差很远， 那我不如直接去学习一个真实的𝑄𝑡𝑜𝑡𝑎𝑙 ∗ 。\n\n![img_38.png](..%2Fimage%2FMARL%2Fimg_38.png)\n\n这里的Qjt就是学习得到的，介于各个agent的收益Q之和和实际局面价值之间的联合补偿,建立了局部Q和全局Q之间的联系。\n\n为了满足上述定理，QTRAN 提出了两个算法 QTRAN-base 以及 QTRAN-alt:\n![img_41.png](..%2Fimage%2FMARL%2Fimg_41.png)\n\n### TRAN-base\n分为三部分：\n1. 独立 Q 网络\n2. 联合 Q 网络\n3. 联合 V 网络\n\n整体的Loss如下：\n![img_39.png](..%2Fimage%2FMARL%2Fimg_39.png)\n![img_40.png](..%2Fimage%2FMARL%2Fimg_40.png)\n\n### TRAN-alt\nQTRAN-alt 是针对 QTRAN（Q-function Transfer）算法的一个改进版本，旨在解决原始 QTRAN 在处理非零约束时的问题。\n\n作者认为约束：\n![img_42.png](..%2Fimage%2FMARL%2Fimg_42.png)\n\n在原始 QTRAN 算法中，对于非零动作的约束（对应公式中的第二个约束），可能会过于松弛，导致算法难以准确地拟合联合 Q 函数。这是因为在训练数据中的数据很少，大部分的数据都可能满足第二个约束。\n\n为了解决这个问题，QTRAN-alt 提出了一个新的定理，将原始约束中的第二个约束替换为一个更强的约束。这个新的约束使得算法能够更准确地拟合联合 Q 函数，从而提升了算法的性能和训练效果。\n![img_43.png](..%2Fimage%2FMARL%2Fimg_43.png)\n这个约束更多的聚焦于非0的训练数据（这一部分数据占训练初期训练集的大部分）。为了满足这一约束，需要把上面列出的第三个损失函数替换为：\n\n![img_44.png](..%2Fimage%2FMARL%2Fimg_44.png)\n\n具体来说，QTRAN-alt 对于非零动作的约束更加严格，以提高算法的性能。这种改进使得 QTRAN-alt 在处理合作问题中的分工与协作时表现更为优越。\n\n算法流程：\n![img.png](..%2Fimage%2FMARL%2Fimg.png)\n\n## MFMARL\n论文：[Mean Field Multi-Agent Reinforcement Learning](https://arxiv.org/abs/1802.05438v4)\n\n平均场多智能体强化学习\n\n`MFMARL主要致力于极大规模的多智能体强化学习问题，解决大规模智能体之间的交互及计算困难。`由于多智能体强化学习问题不仅有环境交互问题，还有智能体之间的动态影响，因此为了得到最优策略，每个智能体都需要考察其他智能体的动作及状态得到联合动作值函数。由于状态空间跟动作空间随着智能体数量的增多而迅速扩大，这给计算以及探索带来了非常大的困难。\n\nMFMARL算法借用了平均场论（Mean Field Theory，MFT）的思想，其对多智能体系统给出了一个近似假设：对某个智能体，其他所有智能体对其产生的作用可以用一个均值替代。这样就就将一个智能体与其邻居智能体之间的相互作用简化为两个智能体之间的相互作用（该智能体与其所有邻居的均值）。这样极大地简化了智能体数量带来的模型空间的增大。应用平均场论后，学习在两个智能体之间是相互促进的：单个智能体的最优策略的学习是基于智能体群体的动态；同时，集体的动态也根据个体的策略进行更新。\n\n下面具体介绍算法细节，其结合平均场论得出两个主要算法MF-Q与MF-AC，是对Q-learning以及AC算法的改进，并且在理论上给出了收敛性证明，能够收敛到纳什均衡点。该算法可以应用于竞争环境或合作环境，并且每个智能体不知道环境的模型以及奖励模型，但是能够观察邻居智能体的动作及奖励。每个智能体有自己的奖励值。\n\n### 背景知识\n\n#### 随机博弈\n\n![img_45.png](..%2Fimage%2FMARL%2Fimg_45.png)\n\n#### Nash-Q\n\n![img_46.png](..%2Fimage%2FMARL%2Fimg_46.png)\n\n### Mean Field MARL\n\n\n![img_50.png](..%2Fimage%2FMARL%2Fimg_50.png)\n#### 平均场近似\n\n![img_47.png](..%2Fimage%2FMARL%2Fimg_47.png)\n\n![img_48.png](..%2Fimage%2FMARL%2Fimg_48.png)\n\n![img_49.png](..%2Fimage%2FMARL%2Fimg_49.png)\n\n### 算法设计\n\n原文中将(7)通过参数化用神经网络进行拟合逼近，与DQN以及AC算法结合，分别给出了MF-Q与MF-AC算法。\n\n#### MF-Q\n\n通过神经网络拟合(7)式中的Q函数，使用如下所示的代价函数，与DQN中相同，为了减小拟合的Q值与真实Q值之间的误差\n![img_51.png](..%2Fimage%2FMARL%2Fimg_51.png)\n\n对上式求导可以得出参数梯度方向如下:\n![img_52.png](..%2Fimage%2FMARL%2Fimg_52.png)\n\n通过梯度下降法可以得到参数更新公式。\n\n算法流程：\n![img_53.png](..%2Fimage%2FMARL%2Fimg_53.png)\n\n#### MF-AC\n\n类似DPG，使用神经网络拟合一个策略替换玻尔兹曼机通过Q的到的策略，则得到了MF-AC算法。\n\n类似SPG，actor策略梯度公式可以写为：\n![img_54.png](..%2Fimage%2FMARL%2Fimg_54.png)\n\ncritic类似于MF-Q的更新方式(9)\n\n![img_55.png](..%2Fimage%2FMARL%2Fimg_55.png)\n\n### 总结\n\n![img_56.png](..%2Fimage%2FMARL%2Fimg_56.png)\n\n> 至此，MARL的入门已结束，后面会结合科研方向看论文想点子。\n\n\n\n\n\n","source":"_posts/MARL.md","raw":"---\ntitle: MARL\ntags:\n    - 强化学习\n    - 多智能体强化学习\n    - 算法\ncategories:\n    - 强化学习\n    - 多智能体强化学习\nkeywords:\n    - 多智能体强化学习\ndescription: 多智能体强化学习的算法和思路总结\nabbrlink: 17763\ndate: 2023-10-30 17:04:41\nupdated: 2023-11-09 17:37:56\ntop_img: https://s2.loli.net/2024/02/06/GAfLl3XPUJgH4ec.png\ncomments:\ncover: https://s2.loli.net/2024/02/06/FCKdzqG2wJ8RmcS.png\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n---\n\n> 由于我的科研方向是`多智能体强化学习`，且由于研一忙于课程和一些开源项目，导致我对一些科研方面的算法理解不够充分。刚好，最近一次和东大的联合组会轮到我讲了，借此深度理解一下这些算法。\n\n> 在这篇笔记中，我会总结我的直系学长推荐我先看的多智能体强化学习知乎专栏内容，然后如果有时间，再总结我导师之前发给我让我看的论文。相关链接我会放在下面。\n\n知乎专栏：https://www.zhihu.com/column/c_1061939147282915328\n\n## 基础知识与博弈\n\n### 引言\n在多智能体系统中，每个智能体通过与环境进行交互获取奖励值（reward）来学习改善自己的策略，从而获得该环境下最优策略的过程就多智能体强化学习。\n\n在单智能体强化学习中，智能体所在的环境是稳定不变的，但是在多智能体强化学习中，环境是复杂的、动态的，因此给学习过程带来很大的困难。\n\n1. 维度爆炸：在单体强化学习中，需要存储状态值函数或动作-状态值函数。在多体强化学习中，状态空间变大，联结动作空间随智能体数量指数增长，维度非常大，计算复杂。\n2. 目标奖励确定困难：多智能体系统中每个智能体的任务可能不同，但是彼此之间又相互耦合影响。奖励设计的优劣直接影响学习到的策略的好坏。\n3. 不稳定性：在多智能体系统中，多个智能体是同时学习的。当同伴的策略改变时，每个智能体自身的最优策略也可能会变化，这将对算法的收敛性带来影响。\n4. 探索-利用：探索不光要考虑自身对环境的探索，也要对同伴的策略变化进行探索，可能打破同伴策略的平衡状态。每个智能体的探索都可能对同伴智能体的策略产生影响，这将使算法很难稳定，学习速度慢。\n\n多智能体系统中智能体之间可能涉及到合作与竞争等关系，引入博弈的概念，将博弈论与强化学习相结合可以很好的处理这些问题。\n\n### 纳什均衡\n\n![img_1.png](..%2Fimage%2FMARL%2Fimg_1.png)\n\n### 完全混合策略\n若一个策略对于智能体动作集中的所有动作的概率都大于0，则这个策略为一个完全混合策略。\n\n### 纯策略\n\n若智能体的策略对一个动作的概率分布为1，对其余的动作的概率分布为0，则这个策略为一个纯策略。\n\n### 零和博弈\n零和博弈中，两个智能体是完全竞争对抗关系，则 `R1 = - R2` 。在零和博弈中只有一个纳什均衡值，即使可能有很多纳什均衡策略，但是期望的奖励是相同的。\n\n### 一般和博弈\n一般和博弈是指任何类型的矩阵博弈，包括完全对抗博弈、完全合作博弈以及二者的混合博弈。在一般和博弈中可能存在多个纳什均衡点。\n\n> 矩阵博弈和线性规划求双智能体矩阵博弈的纳什均衡策略可以看这篇：https://zhuanlan.zhihu.com/p/53474965\n\n## Minimax-Q\n论文：[Markov games as a framework for multi-agent reinforcement learning](https://courses.cs.duke.edu/spring07/cps296.3/littman94markov.pdf)\n\nMinimax-Q算法应用于`两个玩家的零和随机博弈中`。`Minimax-Q中的Minimax指的是使用minimax方法构建线性规划来求解每个特定状态s的阶段博弈的纳什均衡策略。Q指的是借用Q-learning中的TD方法来迭代学习状态值函数或动作-状态值函数。`\n\n在两玩家零和随机博弈中，给定一个状态s，则定义第i个智能体的状态值函数如下：意义为，`每个智能体最大化在与对手博弈中最差情况下的期望奖励值`。\n\n![img_2.png](..%2Fimage%2FMARL%2Fimg_2.png)\n\n理想情况，如果算法能够对每一个状态-动作对访问无限次，那么该算法能够收敛到纳什均衡策略。但是在上述算法中存在几个缺点：\n\n1. 在第5步中需要不断求解一个线性规划，这将造成学习速度的降低，增加计算时间。\n2. 为了求解第5步，智能体i需要知道所有智能体的动作空间，这个在分布式系统中将无法满足。\n3. 只满足收敛性，不满足合理性。Minimax-Q算法能够找到多智能体强化学习的纳什均衡策略，但是假设对手使用的不是纳什均衡策略，而是一个较差的策略，则当前智能体并不能根据对手的策略学习到一个更优的策略。该算法无法让智能体根据对手的策略来调节优化自己的策略，而只能找到随机博弈的纳什均衡策略。这是由于Minimax-Q算法是一个对手独立算法（opponent-independent algorithm），不论对手策略是怎么样的，都收敛到该博弈的纳什均衡策略。就算对手采用一个非常弱的策略，当前智能体也不能学习到一个比纳什均衡策略更好的策略。\n\n## Nash Q-Learning\n论文：[Nash Q-learning for general-sum stochastic games](https://www.jmlr.org/papers/volume4/temp/hu03a.pdf)\n\nNash Q-Learning算法是将Minimax-Q算法`从零和博弈扩展到多人一般和博弈`的算法。在Minimax-Q算法中需要通过Minimax线性规划求解阶段博弈的纳什均衡点，拓展到`Nash Q-Learning算法就是使用二次规划求解纳什均衡点`。Nash Q-Learning算法在合作性均衡或对抗性均衡的环境中能够收敛到纳什均衡点，其收敛性条件是，在每一个状态s的阶段博弈中，都能够找到一个全局最优点或者鞍点，只有满足这个条件，Nash Q-Learning算法才能够收敛。与Minimax-Q算法相同，Nash Q-Learning算法求解二次规划的过程也非常耗时，降低了算法的学习速度。\n\n其算法流程如下：\n\n![img_3.png](..%2Fimage%2FMARL%2Fimg_3.png)\n\n该算法需要观测其他所有智能体的动作ai与奖励值ri。并且与Minimax-Q算法一样，只满足收敛性，不满足合理性。只能收敛到纳什均衡策略，不能根据其他智能体的策略来优化调剂自身的策略。\n\n## Friend-or-Foe Q-Learning\n论文：[Friend-or-foe Q-learning in general-sum games](https://www.researchgate.net/profile/Michael-Littman/publication/2933305_Friend-or-Foe_Q-learning_in_General-Sum_Games/links/54b66cb80cf24eb34f6d19dc/Friend-or-Foe-Q-learning-in-General-Sum-Games.pdf)\n\nFriend-or-Foe Q-Learning（FFQ）算法也是从Minimax-Q算法拓展而来。为了能够处理一般和博弈，FFQ算法对一个智能体i，将其他所有智能体分为两组，一组为i的friend帮助i一起最大化其奖励回报，另一组为i的foe对抗i并降低i的奖励回报，因此对每个智能体而言都有两组。这样一个n智能体的一般和博弈就转化为了一个两智能体的零和博弈。\n\n其纳什均衡策略求解方法如下所示：\n\n![img_4.png](..%2Fimage%2FMARL%2Fimg_4.png)\n\n算法流程如下：\n\n![img_5.png](..%2Fimage%2FMARL%2Fimg_5.png)\n\n有一种利用Minimax-Q算法进行多人博弈方法为，两队零和博弈，将所有智能体分成两个小组进行零和博弈。两队零和博弈中每一组有一个leader才控制这一队智能体的所有策略，获取的奖励值也是这一个小组的整体奖励值。\n\nFFQ算法没有team learder，每个人选择自己动作学习自己的策略获得自己的奖励值，但是为了更新值，每个智能体需要在每一步观测其他所有friend与foe的执行动作。\n\nFFQ与Minimax-Q算法一样都需要利用线性规划，因此算法整体学习速度会变慢。\n\n## WoLF Policy Hill-Climbing\n论文：[Multiagent learning using a variable learning rate](https://pdf.sciencedirectassets.com/271585/1-s2.0-S0004370200X00872/1-s2.0-S0004370202001212/main.pdf?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEGUaCXVzLWVhc3QtMSJHMEUCIQC83rDT43qYROWb01kvyuybyC5EMghziFRQfbzKh2phkAIgDDv7TwK%2Bil2pEyYMJNLreVUvpkwWBgC41FYPaJ1i06cqvAUInf%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FARAFGgwwNTkwMDM1NDY4NjUiDDwT6ryaWf366e7YEyqQBSV%2Bk4Sy0RKqs%2FFblDXiW14ORHDzZeMEKYZ5LfWZdVYpVxwo4vTYmKH2nercH63Et4tIjK0e9nL%2FzjvPpjmkrFWHn6hO0F8KjMsnwlmzVepHF0btXh7AkZ3e5t%2F2bnTZ7qTDIfyIUlvNHlEKL%2F9K5mHZexxj3w3tRoxmqUu8NYM6l2eVAv%2BcEGunXeil0OTm%2FSRkYiIlKRNiuZikU2EPu3h9Psh00bAXL07iFhI5W4y3QkVAmyWJ9ZRz3XtitHSz%2BTVlNngLHNqDlo4LosRLqb7IYbTMz8mTRt%2Bupsy1T6e%2Bt1k0PCXzBrMR4xqRuv006eN8HG7%2FOHDEpmrKu7kne4KeuWyh1qyIHWZOtG2cqhDN%2F%2Bt8okdIhgmNbKIikDVOUqNwejq1Mnka%2B0qSkQ1BabTqjK1RKv1gFNC3vkHeEheIYU8%2B1kJIT3NWLWHfETSWvpuS6cVQSBNvCJ4CkXUMq3tQFOkc1B36oBuNEDLMvBXbjpYWp9DgKJ3yAeyqO8juXKnp5J%2F3NM7Uom6qpwgK4XNNxbXWrpzjYQpeahoFc2F9qyOzBHnX3mb%2B2%2BMdRq1fUwZ0fxzmF0HwBL8VcOWdbgiPhK6qDQmufFdZsMowZirITlDpFdg0pa5F4PkH%2BOpYXYXQA%2BusAbQ%2FJLnUibNKgBd8Ssk2Fj7%2BAj1H1%2B7hEDC%2BKVib31jzGP9aBwfa76WjOdwk%2B%2FVtOJmEMkw2novRj1vcWCAOB3rfg5xFumwxuEK0uDT1R0He0KxhDRKGErfMTRXnb%2FyzBt5MLsmAz5g8wUFQtqhEq3QhLmuGTVdOVFkX6vG2qiPJMQFrehup1kL1jEGqTSK7K9pcr%2BMh%2F%2F5bt5%2FspmxqMvOBRUAeZCYaEAYlMMnvpqoGOrEBjuaNrgG15OoT%2BQiARadKSKYw5yb49jYpL5ODDxgi370KIIs7mCTNedup3876q1Q1OH4IMlTPYRONhLrYVCCr%2Fop8JfLOur2Kx4cAbHsxPmwrtlKhbwv%2FByOhbxlQf%2BUKhNjDXNuR1tSn0DNiTsUyHtUoHD5Pp7unY1PXGDGbYbrnCR7ByWapCYxFzQ1IqYENVSoMPhKfMoOaVw3CEXofL7EIi2a840t%2Fp1COhmawkApQ&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20231107T051949Z&X-Amz-SignedHeaders=host&X-Amz-Expires=300&X-Amz-Credential=ASIAQ3PHCVTYYPNOQKWR%2F20231107%2Fus-east-1%2Fs3%2Faws4_request&X-Amz-Signature=3d4d8f4e51351b7226cd8bc38cbc9fa5109884a7636050217642770bc18913c9&hash=c607cf9fed0bd128c473b32bef56a596967a6b23b8e4d2b87884f7626c46df4c&host=68042c943591013ac2b2430a89b270f6af2c76d8dfd086a07176afe7c76c2c61&pii=S0004370202001212&tid=spdf-d5458afb-6fde-4cc5-bd92-4518991575a2&sid=8008b1c63c486948dc7b9aa27c1ce9ec5b7fgxrqa&type=client&tsoh=d3d3LnNjaWVuY2VkaXJlY3QuY29t&ua=120e5c515d53530157&rr=82231f9f7f2904c0&cc=hk)\n\n![img_6.png](..%2Fimage%2FMARL%2Fimg_6.png)\n\nWolF是指，当智能体做的比期望值好的时候小心缓慢的调整参数，当智能体做的比期望值差的时候，加快步伐调整参数。\n\nPHC是一种单智能体在稳定环境下的一种学习算法。该算法的核心就是通常强化学习的思想，增大能够得到最大累积期望的动作的选取概率。该算法具有合理性，能够收敛到最优策略。\n\n其算法流程如下：\n\n![img_7.png](..%2Fimage%2FMARL%2Fimg_7.png)\n\n为了将PHC应用于动态环境中，将WoLF与PHC算法结合，使得智能体获得的奖励在比预期差时，能够快速调整适应其他智能体策略变化，当比预期好时谨慎学习，给其他智能体适应策略变化的时间。并且WoLF-PHC算法能够收敛到纳什均衡策略，并且具备合理性，当其他智能体采用某个固定策略使，其也能收敛到一个目前状况下的最优策略而不是收敛到一个可能效果不好的纳什均衡策略处。在WoLF-PHC算法中，使用一个可变的学习速率 `δ` 来实现WoLF效果，当策略效果较差时使用 `δl` ，策略效果较好时使用 `δw` ，并且满足 `δl > δw` 。还有一个优势是，WoLF-PHC算法不用观测其他智能体的策略、动作及奖励值，需要更少的空间去记录Q值，并且WoLF-PHC算法是通过PHC算法进行学习改进策略的，所以不需要使用线性规划或者二次规划求解纳什均衡，算法速度得到了提高。虽然WoLF-PHC算法在实际应用中取得了非常好的效果，并且能够收敛到最优策略。但是其收敛性在理论上一直没有得到证明。\n\n其算法流程如下所示：\n\n![img_8.png](..%2Fimage%2FMARL%2Fimg_8.png)\n\n> 关于MiniMax-Q、Nash Q-Learning、Friend-or-Foe Q-Learning、WoLF Policy Hill-Climbing算法的详细介绍可以看这篇：https://www.cnblogs.com/zuti666/p/16909220.html 和 https://zhuanlan.zhihu.com/p/53563792\n\n\n## MADDPG\n论文：[Multi-Agent Actor-Critic for Mixed Cooperative-Competitive Environments](https://arxiv.org/abs/1706.02275)\n\nOpenAI 2017发表在NIPS 上的一篇文章。主要是将AC算法进行了一系列改进，使其能够适用于传统RL算法无法处理的复杂多智能体场景。\n\n传统RL算法面临的一个主要问题是由于每个智能体都是在不断学习改进其策略，因此从每一个智能体的角度看，环境是一个动态不稳定的，这不符合传统RL收敛条件。并且在一定程度上，无法通过仅仅改变智能体自身的策略来适应动态不稳定的环境。由于环境的不稳定，将无法直接使用之前的经验回放等DQN的关键技巧。policy gradient算法会由于智能体数量的变多使得本就有的方差大的问题加剧。\n\nMADDPG算法具有以下三点特征： \n1. 通过学习得到的最优策略，在应用时只利用局部信息就能给出最优动作。 \n2. 不需要知道环境的动力学模型以及特殊的通信需求。 \n3. 该算法不仅能用于合作环境，也能用于竞争环境。\n\nMADDPG算法具有以下三点技巧：\n1. 集中式训练，分布式执行：训练时采用集中式学习训练critic与actor，使用时actor只用知道局部信息就能运行。critic需要其他智能体的策略信息，本文给了一种估计其他智能体策略的方法，能够只用知道其他智能体的观测与动作。\n2. 改进了经验回放记录的数据。为了能够适用于动态环境，每一条信息由(x, x', a1,..., an, r1,..., rn)组成，X = (o1,..., on)。表示每个智能体的观测。\n3. 利用策略集合效果优化（policy ensemble）：对每个智能体学习多个策略，改进时利用所有策略的整体效果进行优化。以提高算法的稳定性以及鲁棒性。\n\n### 背景知识\n\n#### DQN\n深度Q网络（deep Q-network）\n![img_9.png](..%2Fimage%2FMARL%2Fimg_9.png)\n\n#### SPG\n随机策略梯度（stochastic policy gradient）\n\n![img_10.png](..%2Fimage%2FMARL%2Fimg_10.png)\n\n#### DPG\n确定性策略梯度（deterministic policy gradient）\n\n![img_11.png](..%2Fimage%2FMARL%2Fimg_11.png)\n\n### MADDPG\n\n#### 多智能体AC设计\n\nMADDPG集中式的学习，分布式的应用。因此允许使用一些额外的信息（全局信息）进行学习，只要在应用的时候使用局部信息进行决策就行。这点就是Q-learning的一个不足之处，Q-learning在学习与应用时必须采用相同的信息。所以这里MADDPG对传统的AC算法进行了一个改进，Critic扩展为可以利用其他智能体的策略进行学习，这点的进一步改进就是每个智能体对其他智能体的策略进行一个函数逼近。\n![img_12.png](..%2Fimage%2FMARL%2Fimg_12.png)\n![img_13.png](..%2Fimage%2FMARL%2Fimg_13.png)\n\n#### 估计其他智能体策略\n\n![img_14.png](..%2Fimage%2FMARL%2Fimg_14.png)\n\n#### 策略集合优化\n\n![img_15.png](..%2Fimage%2FMARL%2Fimg_15.png)\n\n### 相关PPT\n\n![img_16.png](..%2Fimage%2FMARL%2Fimg_16.png)\n![img_17.png](..%2Fimage%2FMARL%2Fimg_17.png)\n![img_18.png](..%2Fimage%2FMARL%2Fimg_18.png)\n![img_19.png](..%2Fimage%2FMARL%2Fimg_19.png)\n![img_20.png](..%2Fimage%2FMARL%2Fimg_20.png)\n\n\n## IQL\n论文：[Multiagent Cooperation and Competition with Deep Reinforcement Learning](https://arxiv.org/abs/1511.08779)\n\nIndependent Q-Learning\n\n本文讲的是介绍如何将DQN用到Multi-agent问题中，并表示最直接的方法就是，智能体把其他智能体喝环境看作整体，每个智能体之间的决策相互独立（用原文的话说就是each agent is controlled by an independent Deep Q-Network）。\n\nIQL发现，两个智能体都独立采用DQN，在不修改除了reward外的任何参数、细节，agent都能取得不错的成绩。这说明IQL可以作为多智能体强化学习的baseline。\n\nIQL（independent Q-learning）算法非常简单暴力地给每个智能体执行一个Deep-Q-learning算法。IQL把单智能体Deep-Q-learning算法直接应用在多智能体学习领域，各个智能体是各自为政的。`这是此类算法的一个极端。`\n\n其他没啥要讲的。。。\n\n![img_21.png](..%2Fimage%2FMARL%2Fimg_21.png)\n\n## COMA\n论文：[Counterfactual Multi-Agent Policy Gradients](https://arxiv.org/abs/1705.08926)\n\nCOMA (counterfactual multi-agent) 使用一个集中式的critic网络计算优势函数A，统一给Agenti计算对应的actioni分别去执行。所谓CTDE（central training decentralize execution）。COMA是把Actor-critic单智能体算法直接应用在多智能体学习领域，各个智能体按照集中的critic网络指令行事，它们是完全协作关系。`这是此类算法的另一个极端。`\n![img_23.png](..%2Fimage%2FMARL%2Fimg_23.png)\n\n多智能体强化学习算法必然都是在IQL和COMA两个算法之间做平衡。Agent既不能完全独立行事，也不能完全按中心节点指令行事。\n\n那么这些算法都在解决什么问题呢？\n\n只要模型共享Qtot值函数，团队奖励值ri有可能仅仅是某几个智能体获得的，其它智能体并没有做贡献但缺获得了奖励值ri。这就是所谓多智能体信用分配（credit assignment）问题。\n\n在COMA算法中，为了解决多智能体信用分配问题，提出了优势函数A（遍历Agenti动作空间μi里的所有动作，而保持其它Agent的动作空间μ–不变，计算每个Agenti的参数值），用来计算反事实基线（counterfactual baseline）。\n\n![img_24.png](..%2Fimage%2FMARL%2Fimg_24.png)\n\n这个思想来自difference reward。difference reward的思想是：保持其他智能体的联合动作不动，把当前智能体的action替换为一个default action，检查值函数Q是否有变化，如果没有，代表当前智能体的action是无贡献的action，因为奖励r不是当前智能体的action获得的。但是difference reward思想有个问题，default action选谁？？？无法选择！！！为了解决这个问题，COMA定义了优势函数A，解决了多智能体信用分配问题。如果仔细看算法的A函数公式，它其实就是AC算法中常用的优势函数A在多智能体领域的扩展而已。\n\n![img_25.png](..%2Fimage%2FMARL%2Fimg_25.png)\n\nCOMA 与 MADDPG 在 actor network 上的不同之处在于前者使用的是 GRU 网络，为了更好的处理局部观察问题，但是后者使用的则是普通的 DNN。\n\nCOMA算法具体框架如下图所示：\n![img_22.png](..%2Fimage%2FMARL%2Fimg_22.png)\n\n网络架构：\n![img_26.png](..%2Fimage%2FMARL%2Fimg_26.png)\n\n\n## VDN\n论文：[Value-Decomposition Networks For Cooperative Multi-Agent Learning](https://arxiv.org/abs/1706.05296)\n\nVDN（Value-Decomposition Networks）算法是一种用于多智能体强化学习（MARL）的算法。它旨在解决多智能体系统中合作与竞争的问题，其中各个智能体需要同时考虑个体利益与整体目标。\n\nVDN算是大名鼎鼎的QMIX算法的前身。VDN算法假定：`Qtot是每个智能体的Qi的算术加和。对于智能体Agenti来说，它只用最大化Qtot函数的子项Qi函数即可。`如下图：\n左边是IQL，右边是VDN\n![img_27.png](..%2Fimage%2FMARL%2Fimg_27.png)\n\n作者假定如下等式成立：\n![img_29.png](..%2Fimage%2FMARL%2Fimg_29.png)\n\nh表示序列观察，a表示序列动作。 注意到，上述分解满足一个很好的性质，即对左边的联合 Q function 进行 操作，等价于对右边每一个局部 Q function 分别进行 。这样可以保证训练完毕后去中心化执行时，即使整个系统只基于局部观察进行决策，其策略也是与基于全局观察进行决策是一致的。\n\n推导上式：\n假定整个多智能体系统中包含两个智能体，并且全局回报函数是每个智能体的局部回报函数的加和：\n![img_30.png](..%2Fimage%2FMARL%2Fimg_30.png)\n这样分解后的 Q 函数是基于全局观察的。由于使用的网络结构是 LSTM，那么估计误差是可以缩小的，并且还可以通过智能体之间的通信来进一步减小误差，所以本文假设：\n![img_31.png](..%2Fimage%2FMARL%2Fimg_31.png)\n\n网络架构：\n![img_28.png](..%2Fimage%2FMARL%2Fimg_28.png)\n\n\nVDN算法强调的是把总的Q相信分解为多个Q之和，每个Q对应每个智能体的动作价值，这种会导致一个结果，那就是这样累计求和的Q可能没有具体的意义、吃大锅饭导致有agent划水之类的结果。这些问题在QMIX中得到了比较好的解决。\n\n## QMIX\n论文：[QMIX: Monotonic Value Function Factorisation for Deep Multi-Agent Reinforcement Learning](https://arxiv.org/abs/1803.11485)\n\n深度多智能体强化学习的单调值函数分解\n\nQMIX是一个多智能体强化学习算法，具有如下特点： \n1. 学习得到分布式策略。 \n2. 本质是一个值函数逼近算法。 \n3. 由于对一个联合动作-状态只有一个总奖励值，而不是每个智能体得到一个自己的奖励值，因此只能用于合作环境，而不能用于竞争对抗环境。 \n4. QMIX算法采用集中式学习，分布式执行应用的框架。通过集中式的信息学习，得到每个智能体的分布式策略。 \n5. 训练时借用全局状态信息来提高算法效果。是后文提到的VDN方法的改进。 \n6. 接上一条，QMIX设计一个神经网络来整合每个智能体的局部值函数而得到联合动作值函数，VDN是直接求和。 \n7. 每个智能体的局部值函数只需要自己的局部观测，因此整个系统在执行时是一个分布式的，通过局部值函数，选出累积期望奖励最大的动作执行。 \n8. 算法使联合动作值函数与每个局部值函数的单调性相同，因此对局部值函数取最大动作也就是使联合动作值函数最大。 \n9. 算法针对的模型是一个分布式多智能体部分可观马尔可夫决策过程（Dec-POMDP）。\n\n### 背景知识\n\n#### MARL核心问题\n\n在多智能体强化学习中一个关键的问题就是如何学习联合动作值函数，因为该函数的参数会随着智能体数量的增多而成指数增长，`如果动作值函数的输入空间过大，则很难拟合出一个合适函数来表示真实的联合动作值函数`。另一个问题就是学得了联合动作值函数后，`如何通过联合值函数提取出一个优秀的分布式的策略`。这其实是单智能体强化学习拓展到MARL的核心问题。\n\n#### Dec-POMDP\nDec-POMDP指的是分布式部分可观察马尔可夫决策过程（Decentralized Partially Observable Markov Decision Process）。在 Dec-POMDP 中，有多个智能体同时存在，并且每个智能体只能观察到局部的环境信息，而不能直接获取全局状态。此外，每个智能体的动作会影响整个系统的演变。\n![img_32.png](..%2Fimage%2FMARL%2Fimg_32.png)\n\n#### IQL\n\nIQL（independent Q-learning）就是非常暴力的给每个智能体执行一个Q-learning算法，因为共享环境，并且环境随着每个智能体策略、状态发生改变，对每个智能体来说，环境是动态不稳定的，因此这个算法也无法收敛，但是在部分应用中也具有较好的效果。\n\n#### VDN\n\n如前介绍：\n![img_33.png](..%2Fimage%2FMARL%2Fimg_33.png)\n\n#### DRQN\n\nDRQN是一个用来处理POMDP（部分可观马尔可夫决策过程）的一个算法，其采用LSTM替换DQN卷基层后的一个全连接层，来达到能够记忆历史状态的作用，因此可以在部分可观的情况下提高算法性能。由于QMIX解决的是多智能体的POMDP问题，因此每个智能体采用的是DRQN算法。\n\n\n### QMIX\n\nQMIX是在VDN上的一种拓展，由于VDN只是将每个智能体的局部动作值函数求和相加得到联合动作值函数，虽然满足联合值函数与局部值函数单调性相同的可以进行分布化策略的条件，但是其没有在学习时利用状态信息以及没有采用非线性方式对单智能体局部值函数进行整合，使得VDN算法还有很大的提升空间。QMIX就是采用一个混合网络对单智能体局部值函数进行合并，并在训练学习过程中加入全局状态信息辅助，来提高算法性能。\n\nQMIX约束条件：\n![img_34.png](..%2Fimage%2FMARL%2Fimg_34.png)\n也就是总Q关于每个agent的偏导都必须是正的。也就是，对于每个agent来说，追求自身收益的最大化是没有错误的（都对全局有不小于0的贡献）。\n\n具体网络结构如下：\n![img_35.png](..%2Fimage%2FMARL%2Fimg_35.png)\n\n图(c)表示每个智能体采用一个DRQN来拟合自身的Q值函数得到Qi(τi,ai; θi)，DRQN循环输入当前的观测oi,t，以及上一时刻的动作ai,t-1来得到Q值。\n\n图(b)表示混合网络的结构。其输入为每个DRQN网络的输出。为了满足上述的单调性约束，混合网络的所有权值都是非负数，对偏移量不做限制，这样就可以确保满足单调性约束。\n\n为了能够更多的利用到系统的状态信息st ，采用一种超网络（hypernetwork），将状态st作为输入，输出为混合网络的权值及偏移量。为了保证权值的非负性，采用一个线性网络以及绝对值激活函数保证输出不为负数。对偏移量采用同样方式但没有非负性的约束，混合网络最后一层的偏移量通过两层网络以及ReLU激活函数得到非线性映射网络。由于状态信息st是通过超网络混合到Qtot中的，而不是仅仅作为混合网络的输入项，这样带来的一个好处是，如果作为输入项则st的系数均为正，这样则无法充分利用状态信息来提高系统性能，相当于舍弃了一半的信息量。\n\nQMIX的Loss：\n![img_36.png](..%2Fimage%2FMARL%2Fimg_36.png)\n\n更新用到了传统的DQN的思想，其中b表示从经验记忆中采样的样本数量，\n![img_37.png](..%2Fimage%2FMARL%2Fimg_37.png)\n\n由于满足上文的单调性约束，对Qtot进行argmax 操作的计算量就不在是随智能体数量呈指数增长了，而是随智能体数量线性增长，极大的提高了算法效率。\n\n\n## QTRAN\n论文：[QTRAN: Learning to Factorize with Transformation for Cooperative Multi-Agent Reinforcement Learning](https://arxiv.org/abs/1905.05408)\n\n学习因式分解以实现协作多智能体强化学习 Q-Tran\n\nQMIX 在近似𝑄𝑡𝑜𝑡𝑎𝑙(𝒔, 𝒖)时额外使用了全局状态𝒔，这样就可以基于全局状态𝒔进行训练。但是如果直接将𝒔和[𝑄1, … , 𝑄𝑁]一起输入到神经网络𝑓去得到𝑄𝑡𝑜𝑡𝑎𝑙， 由于前面限制了𝑓中的参数是非负的， 但这会对𝑄𝑡𝑜𝑡𝑎𝑙和𝒔的关系进行不必要的限制，因为只希望局部最优动作就是全局最优动作。QTRAN 聚焦于释放累加性和单调性的限制， 去分解所有可分解的任务。 其思想在于只要保证个体最优动作𝑢̅和联合最优动作𝑢∗是相同的。\n\nQTRAN 认为既然 VDN 和 QMIX 是通过累加或者单调近似得到的𝑄𝑡𝑜𝑡𝑎𝑙， 那么𝑄𝑡𝑜𝑡𝑎𝑙就很有可能与真实的𝑄𝑡𝑜𝑡𝑎𝑙 ∗ 相差很远， 那我不如直接去学习一个真实的𝑄𝑡𝑜𝑡𝑎𝑙 ∗ 。\n\n![img_38.png](..%2Fimage%2FMARL%2Fimg_38.png)\n\n这里的Qjt就是学习得到的，介于各个agent的收益Q之和和实际局面价值之间的联合补偿,建立了局部Q和全局Q之间的联系。\n\n为了满足上述定理，QTRAN 提出了两个算法 QTRAN-base 以及 QTRAN-alt:\n![img_41.png](..%2Fimage%2FMARL%2Fimg_41.png)\n\n### TRAN-base\n分为三部分：\n1. 独立 Q 网络\n2. 联合 Q 网络\n3. 联合 V 网络\n\n整体的Loss如下：\n![img_39.png](..%2Fimage%2FMARL%2Fimg_39.png)\n![img_40.png](..%2Fimage%2FMARL%2Fimg_40.png)\n\n### TRAN-alt\nQTRAN-alt 是针对 QTRAN（Q-function Transfer）算法的一个改进版本，旨在解决原始 QTRAN 在处理非零约束时的问题。\n\n作者认为约束：\n![img_42.png](..%2Fimage%2FMARL%2Fimg_42.png)\n\n在原始 QTRAN 算法中，对于非零动作的约束（对应公式中的第二个约束），可能会过于松弛，导致算法难以准确地拟合联合 Q 函数。这是因为在训练数据中的数据很少，大部分的数据都可能满足第二个约束。\n\n为了解决这个问题，QTRAN-alt 提出了一个新的定理，将原始约束中的第二个约束替换为一个更强的约束。这个新的约束使得算法能够更准确地拟合联合 Q 函数，从而提升了算法的性能和训练效果。\n![img_43.png](..%2Fimage%2FMARL%2Fimg_43.png)\n这个约束更多的聚焦于非0的训练数据（这一部分数据占训练初期训练集的大部分）。为了满足这一约束，需要把上面列出的第三个损失函数替换为：\n\n![img_44.png](..%2Fimage%2FMARL%2Fimg_44.png)\n\n具体来说，QTRAN-alt 对于非零动作的约束更加严格，以提高算法的性能。这种改进使得 QTRAN-alt 在处理合作问题中的分工与协作时表现更为优越。\n\n算法流程：\n![img.png](..%2Fimage%2FMARL%2Fimg.png)\n\n## MFMARL\n论文：[Mean Field Multi-Agent Reinforcement Learning](https://arxiv.org/abs/1802.05438v4)\n\n平均场多智能体强化学习\n\n`MFMARL主要致力于极大规模的多智能体强化学习问题，解决大规模智能体之间的交互及计算困难。`由于多智能体强化学习问题不仅有环境交互问题，还有智能体之间的动态影响，因此为了得到最优策略，每个智能体都需要考察其他智能体的动作及状态得到联合动作值函数。由于状态空间跟动作空间随着智能体数量的增多而迅速扩大，这给计算以及探索带来了非常大的困难。\n\nMFMARL算法借用了平均场论（Mean Field Theory，MFT）的思想，其对多智能体系统给出了一个近似假设：对某个智能体，其他所有智能体对其产生的作用可以用一个均值替代。这样就就将一个智能体与其邻居智能体之间的相互作用简化为两个智能体之间的相互作用（该智能体与其所有邻居的均值）。这样极大地简化了智能体数量带来的模型空间的增大。应用平均场论后，学习在两个智能体之间是相互促进的：单个智能体的最优策略的学习是基于智能体群体的动态；同时，集体的动态也根据个体的策略进行更新。\n\n下面具体介绍算法细节，其结合平均场论得出两个主要算法MF-Q与MF-AC，是对Q-learning以及AC算法的改进，并且在理论上给出了收敛性证明，能够收敛到纳什均衡点。该算法可以应用于竞争环境或合作环境，并且每个智能体不知道环境的模型以及奖励模型，但是能够观察邻居智能体的动作及奖励。每个智能体有自己的奖励值。\n\n### 背景知识\n\n#### 随机博弈\n\n![img_45.png](..%2Fimage%2FMARL%2Fimg_45.png)\n\n#### Nash-Q\n\n![img_46.png](..%2Fimage%2FMARL%2Fimg_46.png)\n\n### Mean Field MARL\n\n\n![img_50.png](..%2Fimage%2FMARL%2Fimg_50.png)\n#### 平均场近似\n\n![img_47.png](..%2Fimage%2FMARL%2Fimg_47.png)\n\n![img_48.png](..%2Fimage%2FMARL%2Fimg_48.png)\n\n![img_49.png](..%2Fimage%2FMARL%2Fimg_49.png)\n\n### 算法设计\n\n原文中将(7)通过参数化用神经网络进行拟合逼近，与DQN以及AC算法结合，分别给出了MF-Q与MF-AC算法。\n\n#### MF-Q\n\n通过神经网络拟合(7)式中的Q函数，使用如下所示的代价函数，与DQN中相同，为了减小拟合的Q值与真实Q值之间的误差\n![img_51.png](..%2Fimage%2FMARL%2Fimg_51.png)\n\n对上式求导可以得出参数梯度方向如下:\n![img_52.png](..%2Fimage%2FMARL%2Fimg_52.png)\n\n通过梯度下降法可以得到参数更新公式。\n\n算法流程：\n![img_53.png](..%2Fimage%2FMARL%2Fimg_53.png)\n\n#### MF-AC\n\n类似DPG，使用神经网络拟合一个策略替换玻尔兹曼机通过Q的到的策略，则得到了MF-AC算法。\n\n类似SPG，actor策略梯度公式可以写为：\n![img_54.png](..%2Fimage%2FMARL%2Fimg_54.png)\n\ncritic类似于MF-Q的更新方式(9)\n\n![img_55.png](..%2Fimage%2FMARL%2Fimg_55.png)\n\n### 总结\n\n![img_56.png](..%2Fimage%2FMARL%2Fimg_56.png)\n\n> 至此，MARL的入门已结束，后面会结合科研方向看论文想点子。\n\n\n\n\n\n","slug":"MARL","published":1,"layout":"post","photos":[],"link":"","_id":"clx1l2pdw000vnfgncxgh4i55","content":"<blockquote>\n<p>由于我的科研方向是<code>多智能体强化学习</code>，且由于研一忙于课程和一些开源项目，导致我对一些科研方面的算法理解不够充分。刚好，最近一次和东大的联合组会轮到我讲了，借此深度理解一下这些算法。</p>\n</blockquote>\n<blockquote>\n<p>在这篇笔记中，我会总结我的直系学长推荐我先看的多智能体强化学习知乎专栏内容，然后如果有时间，再总结我导师之前发给我让我看的论文。相关链接我会放在下面。</p>\n</blockquote>\n<p>知乎专栏：<a href=\"https://www.zhihu.com/column/c_1061939147282915328\">https://www.zhihu.com/column/c_1061939147282915328</a></p>\n<h2 id=\"基础知识与博弈\"><a href=\"#基础知识与博弈\" class=\"headerlink\" title=\"基础知识与博弈\"></a>基础知识与博弈</h2><h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>在多智能体系统中，每个智能体通过与环境进行交互获取奖励值（reward）来学习改善自己的策略，从而获得该环境下最优策略的过程就多智能体强化学习。</p>\n<p>在单智能体强化学习中，智能体所在的环境是稳定不变的，但是在多智能体强化学习中，环境是复杂的、动态的，因此给学习过程带来很大的困难。</p>\n<ol>\n<li>维度爆炸：在单体强化学习中，需要存储状态值函数或动作-状态值函数。在多体强化学习中，状态空间变大，联结动作空间随智能体数量指数增长，维度非常大，计算复杂。</li>\n<li>目标奖励确定困难：多智能体系统中每个智能体的任务可能不同，但是彼此之间又相互耦合影响。奖励设计的优劣直接影响学习到的策略的好坏。</li>\n<li>不稳定性：在多智能体系统中，多个智能体是同时学习的。当同伴的策略改变时，每个智能体自身的最优策略也可能会变化，这将对算法的收敛性带来影响。</li>\n<li>探索-利用：探索不光要考虑自身对环境的探索，也要对同伴的策略变化进行探索，可能打破同伴策略的平衡状态。每个智能体的探索都可能对同伴智能体的策略产生影响，这将使算法很难稳定，学习速度慢。</li>\n</ol>\n<p>多智能体系统中智能体之间可能涉及到合作与竞争等关系，引入博弈的概念，将博弈论与强化学习相结合可以很好的处理这些问题。</p>\n<h3 id=\"纳什均衡\"><a href=\"#纳什均衡\" class=\"headerlink\" title=\"纳什均衡\"></a>纳什均衡</h3><p><img src=\"/../image/MARL/img_1.png\" alt=\"img_1.png\"></p>\n<h3 id=\"完全混合策略\"><a href=\"#完全混合策略\" class=\"headerlink\" title=\"完全混合策略\"></a>完全混合策略</h3><p>若一个策略对于智能体动作集中的所有动作的概率都大于0，则这个策略为一个完全混合策略。</p>\n<h3 id=\"纯策略\"><a href=\"#纯策略\" class=\"headerlink\" title=\"纯策略\"></a>纯策略</h3><p>若智能体的策略对一个动作的概率分布为1，对其余的动作的概率分布为0，则这个策略为一个纯策略。</p>\n<h3 id=\"零和博弈\"><a href=\"#零和博弈\" class=\"headerlink\" title=\"零和博弈\"></a>零和博弈</h3><p>零和博弈中，两个智能体是完全竞争对抗关系，则 <code>R1 = - R2</code> 。在零和博弈中只有一个纳什均衡值，即使可能有很多纳什均衡策略，但是期望的奖励是相同的。</p>\n<h3 id=\"一般和博弈\"><a href=\"#一般和博弈\" class=\"headerlink\" title=\"一般和博弈\"></a>一般和博弈</h3><p>一般和博弈是指任何类型的矩阵博弈，包括完全对抗博弈、完全合作博弈以及二者的混合博弈。在一般和博弈中可能存在多个纳什均衡点。</p>\n<blockquote>\n<p>矩阵博弈和线性规划求双智能体矩阵博弈的纳什均衡策略可以看这篇：<a href=\"https://zhuanlan.zhihu.com/p/53474965\">https://zhuanlan.zhihu.com/p/53474965</a></p>\n</blockquote>\n<h2 id=\"Minimax-Q\"><a href=\"#Minimax-Q\" class=\"headerlink\" title=\"Minimax-Q\"></a>Minimax-Q</h2><p>论文：<a href=\"https://courses.cs.duke.edu/spring07/cps296.3/littman94markov.pdf\">Markov games as a framework for multi-agent reinforcement learning</a></p>\n<p>Minimax-Q算法应用于<code>两个玩家的零和随机博弈中</code>。<code>Minimax-Q中的Minimax指的是使用minimax方法构建线性规划来求解每个特定状态s的阶段博弈的纳什均衡策略。Q指的是借用Q-learning中的TD方法来迭代学习状态值函数或动作-状态值函数。</code></p>\n<p>在两玩家零和随机博弈中，给定一个状态s，则定义第i个智能体的状态值函数如下：意义为，<code>每个智能体最大化在与对手博弈中最差情况下的期望奖励值</code>。</p>\n<p><img src=\"/../image/MARL/img_2.png\" alt=\"img_2.png\"></p>\n<p>理想情况，如果算法能够对每一个状态-动作对访问无限次，那么该算法能够收敛到纳什均衡策略。但是在上述算法中存在几个缺点：</p>\n<ol>\n<li>在第5步中需要不断求解一个线性规划，这将造成学习速度的降低，增加计算时间。</li>\n<li>为了求解第5步，智能体i需要知道所有智能体的动作空间，这个在分布式系统中将无法满足。</li>\n<li>只满足收敛性，不满足合理性。Minimax-Q算法能够找到多智能体强化学习的纳什均衡策略，但是假设对手使用的不是纳什均衡策略，而是一个较差的策略，则当前智能体并不能根据对手的策略学习到一个更优的策略。该算法无法让智能体根据对手的策略来调节优化自己的策略，而只能找到随机博弈的纳什均衡策略。这是由于Minimax-Q算法是一个对手独立算法（opponent-independent algorithm），不论对手策略是怎么样的，都收敛到该博弈的纳什均衡策略。就算对手采用一个非常弱的策略，当前智能体也不能学习到一个比纳什均衡策略更好的策略。</li>\n</ol>\n<h2 id=\"Nash-Q-Learning\"><a href=\"#Nash-Q-Learning\" class=\"headerlink\" title=\"Nash Q-Learning\"></a>Nash Q-Learning</h2><p>论文：<a href=\"https://www.jmlr.org/papers/volume4/temp/hu03a.pdf\">Nash Q-learning for general-sum stochastic games</a></p>\n<p>Nash Q-Learning算法是将Minimax-Q算法<code>从零和博弈扩展到多人一般和博弈</code>的算法。在Minimax-Q算法中需要通过Minimax线性规划求解阶段博弈的纳什均衡点，拓展到<code>Nash Q-Learning算法就是使用二次规划求解纳什均衡点</code>。Nash Q-Learning算法在合作性均衡或对抗性均衡的环境中能够收敛到纳什均衡点，其收敛性条件是，在每一个状态s的阶段博弈中，都能够找到一个全局最优点或者鞍点，只有满足这个条件，Nash Q-Learning算法才能够收敛。与Minimax-Q算法相同，Nash Q-Learning算法求解二次规划的过程也非常耗时，降低了算法的学习速度。</p>\n<p>其算法流程如下：</p>\n<p><img src=\"/../image/MARL/img_3.png\" alt=\"img_3.png\"></p>\n<p>该算法需要观测其他所有智能体的动作ai与奖励值ri。并且与Minimax-Q算法一样，只满足收敛性，不满足合理性。只能收敛到纳什均衡策略，不能根据其他智能体的策略来优化调剂自身的策略。</p>\n<h2 id=\"Friend-or-Foe-Q-Learning\"><a href=\"#Friend-or-Foe-Q-Learning\" class=\"headerlink\" title=\"Friend-or-Foe Q-Learning\"></a>Friend-or-Foe Q-Learning</h2><p>论文：<a href=\"https://www.researchgate.net/profile/Michael-Littman/publication/2933305_Friend-or-Foe_Q-learning_in_General-Sum_Games/links/54b66cb80cf24eb34f6d19dc/Friend-or-Foe-Q-learning-in-General-Sum-Games.pdf\">Friend-or-foe Q-learning in general-sum games</a></p>\n<p>Friend-or-Foe Q-Learning（FFQ）算法也是从Minimax-Q算法拓展而来。为了能够处理一般和博弈，FFQ算法对一个智能体i，将其他所有智能体分为两组，一组为i的friend帮助i一起最大化其奖励回报，另一组为i的foe对抗i并降低i的奖励回报，因此对每个智能体而言都有两组。这样一个n智能体的一般和博弈就转化为了一个两智能体的零和博弈。</p>\n<p>其纳什均衡策略求解方法如下所示：</p>\n<p><img src=\"/../image/MARL/img_4.png\" alt=\"img_4.png\"></p>\n<p>算法流程如下：</p>\n<p><img src=\"/../image/MARL/img_5.png\" alt=\"img_5.png\"></p>\n<p>有一种利用Minimax-Q算法进行多人博弈方法为，两队零和博弈，将所有智能体分成两个小组进行零和博弈。两队零和博弈中每一组有一个leader才控制这一队智能体的所有策略，获取的奖励值也是这一个小组的整体奖励值。</p>\n<p>FFQ算法没有team learder，每个人选择自己动作学习自己的策略获得自己的奖励值，但是为了更新值，每个智能体需要在每一步观测其他所有friend与foe的执行动作。</p>\n<p>FFQ与Minimax-Q算法一样都需要利用线性规划，因此算法整体学习速度会变慢。</p>\n<h2 id=\"WoLF-Policy-Hill-Climbing\"><a href=\"#WoLF-Policy-Hill-Climbing\" class=\"headerlink\" title=\"WoLF Policy Hill-Climbing\"></a>WoLF Policy Hill-Climbing</h2><p>论文：<a href=\"https://pdf.sciencedirectassets.com/271585/1-s2.0-S0004370200X00872/1-s2.0-S0004370202001212/main.pdf?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEGUaCXVzLWVhc3QtMSJHMEUCIQC83rDT43qYROWb01kvyuybyC5EMghziFRQfbzKh2phkAIgDDv7TwK+il2pEyYMJNLreVUvpkwWBgC41FYPaJ1i06cqvAUInf//////////ARAFGgwwNTkwMDM1NDY4NjUiDDwT6ryaWf366e7YEyqQBSV+k4Sy0RKqs/FblDXiW14ORHDzZeMEKYZ5LfWZdVYpVxwo4vTYmKH2nercH63Et4tIjK0e9nL/zjvPpjmkrFWHn6hO0F8KjMsnwlmzVepHF0btXh7AkZ3e5t/2bnTZ7qTDIfyIUlvNHlEKL/9K5mHZexxj3w3tRoxmqUu8NYM6l2eVAv+cEGunXeil0OTm/SRkYiIlKRNiuZikU2EPu3h9Psh00bAXL07iFhI5W4y3QkVAmyWJ9ZRz3XtitHSz+TVlNngLHNqDlo4LosRLqb7IYbTMz8mTRt+upsy1T6e+t1k0PCXzBrMR4xqRuv006eN8HG7/OHDEpmrKu7kne4KeuWyh1qyIHWZOtG2cqhDN/+t8okdIhgmNbKIikDVOUqNwejq1Mnka+0qSkQ1BabTqjK1RKv1gFNC3vkHeEheIYU8+1kJIT3NWLWHfETSWvpuS6cVQSBNvCJ4CkXUMq3tQFOkc1B36oBuNEDLMvBXbjpYWp9DgKJ3yAeyqO8juXKnp5J/3NM7Uom6qpwgK4XNNxbXWrpzjYQpeahoFc2F9qyOzBHnX3mb+2+MdRq1fUwZ0fxzmF0HwBL8VcOWdbgiPhK6qDQmufFdZsMowZirITlDpFdg0pa5F4PkH+OpYXYXQA+usAbQ/JLnUibNKgBd8Ssk2Fj7+Aj1H1+7hEDC+KVib31jzGP9aBwfa76WjOdwk+/VtOJmEMkw2novRj1vcWCAOB3rfg5xFumwxuEK0uDT1R0He0KxhDRKGErfMTRXnb/yzBt5MLsmAz5g8wUFQtqhEq3QhLmuGTVdOVFkX6vG2qiPJMQFrehup1kL1jEGqTSK7K9pcr+Mh//5bt5/spmxqMvOBRUAeZCYaEAYlMMnvpqoGOrEBjuaNrgG15OoT+QiARadKSKYw5yb49jYpL5ODDxgi370KIIs7mCTNedup3876q1Q1OH4IMlTPYRONhLrYVCCr/op8JfLOur2Kx4cAbHsxPmwrtlKhbwv/ByOhbxlQf+UKhNjDXNuR1tSn0DNiTsUyHtUoHD5Pp7unY1PXGDGbYbrnCR7ByWapCYxFzQ1IqYENVSoMPhKfMoOaVw3CEXofL7EIi2a840t/p1COhmawkApQ&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20231107T051949Z&X-Amz-SignedHeaders=host&X-Amz-Expires=300&X-Amz-Credential=ASIAQ3PHCVTYYPNOQKWR/20231107/us-east-1/s3/aws4_request&X-Amz-Signature=3d4d8f4e51351b7226cd8bc38cbc9fa5109884a7636050217642770bc18913c9&hash=c607cf9fed0bd128c473b32bef56a596967a6b23b8e4d2b87884f7626c46df4c&host=68042c943591013ac2b2430a89b270f6af2c76d8dfd086a07176afe7c76c2c61&pii=S0004370202001212&tid=spdf-d5458afb-6fde-4cc5-bd92-4518991575a2&sid=8008b1c63c486948dc7b9aa27c1ce9ec5b7fgxrqa&type=client&tsoh=d3d3LnNjaWVuY2VkaXJlY3QuY29t&ua=120e5c515d53530157&rr=82231f9f7f2904c0&cc=hk\">Multiagent learning using a variable learning rate</a></p>\n<p><img src=\"/../image/MARL/img_6.png\" alt=\"img_6.png\"></p>\n<p>WolF是指，当智能体做的比期望值好的时候小心缓慢的调整参数，当智能体做的比期望值差的时候，加快步伐调整参数。</p>\n<p>PHC是一种单智能体在稳定环境下的一种学习算法。该算法的核心就是通常强化学习的思想，增大能够得到最大累积期望的动作的选取概率。该算法具有合理性，能够收敛到最优策略。</p>\n<p>其算法流程如下：</p>\n<p><img src=\"/../image/MARL/img_7.png\" alt=\"img_7.png\"></p>\n<p>为了将PHC应用于动态环境中，将WoLF与PHC算法结合，使得智能体获得的奖励在比预期差时，能够快速调整适应其他智能体策略变化，当比预期好时谨慎学习，给其他智能体适应策略变化的时间。并且WoLF-PHC算法能够收敛到纳什均衡策略，并且具备合理性，当其他智能体采用某个固定策略使，其也能收敛到一个目前状况下的最优策略而不是收敛到一个可能效果不好的纳什均衡策略处。在WoLF-PHC算法中，使用一个可变的学习速率 <code>δ</code> 来实现WoLF效果，当策略效果较差时使用 <code>δl</code> ，策略效果较好时使用 <code>δw</code> ，并且满足 <code>δl &gt; δw</code> 。还有一个优势是，WoLF-PHC算法不用观测其他智能体的策略、动作及奖励值，需要更少的空间去记录Q值，并且WoLF-PHC算法是通过PHC算法进行学习改进策略的，所以不需要使用线性规划或者二次规划求解纳什均衡，算法速度得到了提高。虽然WoLF-PHC算法在实际应用中取得了非常好的效果，并且能够收敛到最优策略。但是其收敛性在理论上一直没有得到证明。</p>\n<p>其算法流程如下所示：</p>\n<p><img src=\"/../image/MARL/img_8.png\" alt=\"img_8.png\"></p>\n<blockquote>\n<p>关于MiniMax-Q、Nash Q-Learning、Friend-or-Foe Q-Learning、WoLF Policy Hill-Climbing算法的详细介绍可以看这篇：<a href=\"https://www.cnblogs.com/zuti666/p/16909220.html\">https://www.cnblogs.com/zuti666/p/16909220.html</a> 和 <a href=\"https://zhuanlan.zhihu.com/p/53563792\">https://zhuanlan.zhihu.com/p/53563792</a></p>\n</blockquote>\n<h2 id=\"MADDPG\"><a href=\"#MADDPG\" class=\"headerlink\" title=\"MADDPG\"></a>MADDPG</h2><p>论文：<a href=\"https://arxiv.org/abs/1706.02275\">Multi-Agent Actor-Critic for Mixed Cooperative-Competitive Environments</a></p>\n<p>OpenAI 2017发表在NIPS 上的一篇文章。主要是将AC算法进行了一系列改进，使其能够适用于传统RL算法无法处理的复杂多智能体场景。</p>\n<p>传统RL算法面临的一个主要问题是由于每个智能体都是在不断学习改进其策略，因此从每一个智能体的角度看，环境是一个动态不稳定的，这不符合传统RL收敛条件。并且在一定程度上，无法通过仅仅改变智能体自身的策略来适应动态不稳定的环境。由于环境的不稳定，将无法直接使用之前的经验回放等DQN的关键技巧。policy gradient算法会由于智能体数量的变多使得本就有的方差大的问题加剧。</p>\n<p>MADDPG算法具有以下三点特征： </p>\n<ol>\n<li>通过学习得到的最优策略，在应用时只利用局部信息就能给出最优动作。 </li>\n<li>不需要知道环境的动力学模型以及特殊的通信需求。 </li>\n<li>该算法不仅能用于合作环境，也能用于竞争环境。</li>\n</ol>\n<p>MADDPG算法具有以下三点技巧：</p>\n<ol>\n<li>集中式训练，分布式执行：训练时采用集中式学习训练critic与actor，使用时actor只用知道局部信息就能运行。critic需要其他智能体的策略信息，本文给了一种估计其他智能体策略的方法，能够只用知道其他智能体的观测与动作。</li>\n<li>改进了经验回放记录的数据。为了能够适用于动态环境，每一条信息由(x, x’, a1,…, an, r1,…, rn)组成，X &#x3D; (o1,…, on)。表示每个智能体的观测。</li>\n<li>利用策略集合效果优化（policy ensemble）：对每个智能体学习多个策略，改进时利用所有策略的整体效果进行优化。以提高算法的稳定性以及鲁棒性。</li>\n</ol>\n<h3 id=\"背景知识\"><a href=\"#背景知识\" class=\"headerlink\" title=\"背景知识\"></a>背景知识</h3><h4 id=\"DQN\"><a href=\"#DQN\" class=\"headerlink\" title=\"DQN\"></a>DQN</h4><p>深度Q网络（deep Q-network）<br><img src=\"/../image/MARL/img_9.png\" alt=\"img_9.png\"></p>\n<h4 id=\"SPG\"><a href=\"#SPG\" class=\"headerlink\" title=\"SPG\"></a>SPG</h4><p>随机策略梯度（stochastic policy gradient）</p>\n<p><img src=\"/../image/MARL/img_10.png\" alt=\"img_10.png\"></p>\n<h4 id=\"DPG\"><a href=\"#DPG\" class=\"headerlink\" title=\"DPG\"></a>DPG</h4><p>确定性策略梯度（deterministic policy gradient）</p>\n<p><img src=\"/../image/MARL/img_11.png\" alt=\"img_11.png\"></p>\n<h3 id=\"MADDPG-1\"><a href=\"#MADDPG-1\" class=\"headerlink\" title=\"MADDPG\"></a>MADDPG</h3><h4 id=\"多智能体AC设计\"><a href=\"#多智能体AC设计\" class=\"headerlink\" title=\"多智能体AC设计\"></a>多智能体AC设计</h4><p>MADDPG集中式的学习，分布式的应用。因此允许使用一些额外的信息（全局信息）进行学习，只要在应用的时候使用局部信息进行决策就行。这点就是Q-learning的一个不足之处，Q-learning在学习与应用时必须采用相同的信息。所以这里MADDPG对传统的AC算法进行了一个改进，Critic扩展为可以利用其他智能体的策略进行学习，这点的进一步改进就是每个智能体对其他智能体的策略进行一个函数逼近。<br><img src=\"/../image/MARL/img_12.png\" alt=\"img_12.png\"><br><img src=\"/../image/MARL/img_13.png\" alt=\"img_13.png\"></p>\n<h4 id=\"估计其他智能体策略\"><a href=\"#估计其他智能体策略\" class=\"headerlink\" title=\"估计其他智能体策略\"></a>估计其他智能体策略</h4><p><img src=\"/../image/MARL/img_14.png\" alt=\"img_14.png\"></p>\n<h4 id=\"策略集合优化\"><a href=\"#策略集合优化\" class=\"headerlink\" title=\"策略集合优化\"></a>策略集合优化</h4><p><img src=\"/../image/MARL/img_15.png\" alt=\"img_15.png\"></p>\n<h3 id=\"相关PPT\"><a href=\"#相关PPT\" class=\"headerlink\" title=\"相关PPT\"></a>相关PPT</h3><p><img src=\"/../image/MARL/img_16.png\" alt=\"img_16.png\"><br><img src=\"/../image/MARL/img_17.png\" alt=\"img_17.png\"><br><img src=\"/../image/MARL/img_18.png\" alt=\"img_18.png\"><br><img src=\"/../image/MARL/img_19.png\" alt=\"img_19.png\"><br><img src=\"/../image/MARL/img_20.png\" alt=\"img_20.png\"></p>\n<h2 id=\"IQL\"><a href=\"#IQL\" class=\"headerlink\" title=\"IQL\"></a>IQL</h2><p>论文：<a href=\"https://arxiv.org/abs/1511.08779\">Multiagent Cooperation and Competition with Deep Reinforcement Learning</a></p>\n<p>Independent Q-Learning</p>\n<p>本文讲的是介绍如何将DQN用到Multi-agent问题中，并表示最直接的方法就是，智能体把其他智能体喝环境看作整体，每个智能体之间的决策相互独立（用原文的话说就是each agent is controlled by an independent Deep Q-Network）。</p>\n<p>IQL发现，两个智能体都独立采用DQN，在不修改除了reward外的任何参数、细节，agent都能取得不错的成绩。这说明IQL可以作为多智能体强化学习的baseline。</p>\n<p>IQL（independent Q-learning）算法非常简单暴力地给每个智能体执行一个Deep-Q-learning算法。IQL把单智能体Deep-Q-learning算法直接应用在多智能体学习领域，各个智能体是各自为政的。<code>这是此类算法的一个极端。</code></p>\n<p>其他没啥要讲的。。。</p>\n<p><img src=\"/../image/MARL/img_21.png\" alt=\"img_21.png\"></p>\n<h2 id=\"COMA\"><a href=\"#COMA\" class=\"headerlink\" title=\"COMA\"></a>COMA</h2><p>论文：<a href=\"https://arxiv.org/abs/1705.08926\">Counterfactual Multi-Agent Policy Gradients</a></p>\n<p>COMA (counterfactual multi-agent) 使用一个集中式的critic网络计算优势函数A，统一给Agenti计算对应的actioni分别去执行。所谓CTDE（central training decentralize execution）。COMA是把Actor-critic单智能体算法直接应用在多智能体学习领域，各个智能体按照集中的critic网络指令行事，它们是完全协作关系。<code>这是此类算法的另一个极端。</code><br><img src=\"/../image/MARL/img_23.png\" alt=\"img_23.png\"></p>\n<p>多智能体强化学习算法必然都是在IQL和COMA两个算法之间做平衡。Agent既不能完全独立行事，也不能完全按中心节点指令行事。</p>\n<p>那么这些算法都在解决什么问题呢？</p>\n<p>只要模型共享Qtot值函数，团队奖励值ri有可能仅仅是某几个智能体获得的，其它智能体并没有做贡献但缺获得了奖励值ri。这就是所谓多智能体信用分配（credit assignment）问题。</p>\n<p>在COMA算法中，为了解决多智能体信用分配问题，提出了优势函数A（遍历Agenti动作空间μi里的所有动作，而保持其它Agent的动作空间μ–不变，计算每个Agenti的参数值），用来计算反事实基线（counterfactual baseline）。</p>\n<p><img src=\"/../image/MARL/img_24.png\" alt=\"img_24.png\"></p>\n<p>这个思想来自difference reward。difference reward的思想是：保持其他智能体的联合动作不动，把当前智能体的action替换为一个default action，检查值函数Q是否有变化，如果没有，代表当前智能体的action是无贡献的action，因为奖励r不是当前智能体的action获得的。但是difference reward思想有个问题，default action选谁？？？无法选择！！！为了解决这个问题，COMA定义了优势函数A，解决了多智能体信用分配问题。如果仔细看算法的A函数公式，它其实就是AC算法中常用的优势函数A在多智能体领域的扩展而已。</p>\n<p><img src=\"/../image/MARL/img_25.png\" alt=\"img_25.png\"></p>\n<p>COMA 与 MADDPG 在 actor network 上的不同之处在于前者使用的是 GRU 网络，为了更好的处理局部观察问题，但是后者使用的则是普通的 DNN。</p>\n<p>COMA算法具体框架如下图所示：<br><img src=\"/../image/MARL/img_22.png\" alt=\"img_22.png\"></p>\n<p>网络架构：<br><img src=\"/../image/MARL/img_26.png\" alt=\"img_26.png\"></p>\n<h2 id=\"VDN\"><a href=\"#VDN\" class=\"headerlink\" title=\"VDN\"></a>VDN</h2><p>论文：<a href=\"https://arxiv.org/abs/1706.05296\">Value-Decomposition Networks For Cooperative Multi-Agent Learning</a></p>\n<p>VDN（Value-Decomposition Networks）算法是一种用于多智能体强化学习（MARL）的算法。它旨在解决多智能体系统中合作与竞争的问题，其中各个智能体需要同时考虑个体利益与整体目标。</p>\n<p>VDN算是大名鼎鼎的QMIX算法的前身。VDN算法假定：<code>Qtot是每个智能体的Qi的算术加和。对于智能体Agenti来说，它只用最大化Qtot函数的子项Qi函数即可。</code>如下图：<br>左边是IQL，右边是VDN<br><img src=\"/../image/MARL/img_27.png\" alt=\"img_27.png\"></p>\n<p>作者假定如下等式成立：<br><img src=\"/../image/MARL/img_29.png\" alt=\"img_29.png\"></p>\n<p>h表示序列观察，a表示序列动作。 注意到，上述分解满足一个很好的性质，即对左边的联合 Q function 进行 操作，等价于对右边每一个局部 Q function 分别进行 。这样可以保证训练完毕后去中心化执行时，即使整个系统只基于局部观察进行决策，其策略也是与基于全局观察进行决策是一致的。</p>\n<p>推导上式：<br>假定整个多智能体系统中包含两个智能体，并且全局回报函数是每个智能体的局部回报函数的加和：<br><img src=\"/../image/MARL/img_30.png\" alt=\"img_30.png\"><br>这样分解后的 Q 函数是基于全局观察的。由于使用的网络结构是 LSTM，那么估计误差是可以缩小的，并且还可以通过智能体之间的通信来进一步减小误差，所以本文假设：<br><img src=\"/../image/MARL/img_31.png\" alt=\"img_31.png\"></p>\n<p>网络架构：<br><img src=\"/../image/MARL/img_28.png\" alt=\"img_28.png\"></p>\n<p>VDN算法强调的是把总的Q相信分解为多个Q之和，每个Q对应每个智能体的动作价值，这种会导致一个结果，那就是这样累计求和的Q可能没有具体的意义、吃大锅饭导致有agent划水之类的结果。这些问题在QMIX中得到了比较好的解决。</p>\n<h2 id=\"QMIX\"><a href=\"#QMIX\" class=\"headerlink\" title=\"QMIX\"></a>QMIX</h2><p>论文：<a href=\"https://arxiv.org/abs/1803.11485\">QMIX: Monotonic Value Function Factorisation for Deep Multi-Agent Reinforcement Learning</a></p>\n<p>深度多智能体强化学习的单调值函数分解</p>\n<p>QMIX是一个多智能体强化学习算法，具有如下特点： </p>\n<ol>\n<li>学习得到分布式策略。 </li>\n<li>本质是一个值函数逼近算法。 </li>\n<li>由于对一个联合动作-状态只有一个总奖励值，而不是每个智能体得到一个自己的奖励值，因此只能用于合作环境，而不能用于竞争对抗环境。 </li>\n<li>QMIX算法采用集中式学习，分布式执行应用的框架。通过集中式的信息学习，得到每个智能体的分布式策略。 </li>\n<li>训练时借用全局状态信息来提高算法效果。是后文提到的VDN方法的改进。 </li>\n<li>接上一条，QMIX设计一个神经网络来整合每个智能体的局部值函数而得到联合动作值函数，VDN是直接求和。 </li>\n<li>每个智能体的局部值函数只需要自己的局部观测，因此整个系统在执行时是一个分布式的，通过局部值函数，选出累积期望奖励最大的动作执行。 </li>\n<li>算法使联合动作值函数与每个局部值函数的单调性相同，因此对局部值函数取最大动作也就是使联合动作值函数最大。 </li>\n<li>算法针对的模型是一个分布式多智能体部分可观马尔可夫决策过程（Dec-POMDP）。</li>\n</ol>\n<h3 id=\"背景知识-1\"><a href=\"#背景知识-1\" class=\"headerlink\" title=\"背景知识\"></a>背景知识</h3><h4 id=\"MARL核心问题\"><a href=\"#MARL核心问题\" class=\"headerlink\" title=\"MARL核心问题\"></a>MARL核心问题</h4><p>在多智能体强化学习中一个关键的问题就是如何学习联合动作值函数，因为该函数的参数会随着智能体数量的增多而成指数增长，<code>如果动作值函数的输入空间过大，则很难拟合出一个合适函数来表示真实的联合动作值函数</code>。另一个问题就是学得了联合动作值函数后，<code>如何通过联合值函数提取出一个优秀的分布式的策略</code>。这其实是单智能体强化学习拓展到MARL的核心问题。</p>\n<h4 id=\"Dec-POMDP\"><a href=\"#Dec-POMDP\" class=\"headerlink\" title=\"Dec-POMDP\"></a>Dec-POMDP</h4><p>Dec-POMDP指的是分布式部分可观察马尔可夫决策过程（Decentralized Partially Observable Markov Decision Process）。在 Dec-POMDP 中，有多个智能体同时存在，并且每个智能体只能观察到局部的环境信息，而不能直接获取全局状态。此外，每个智能体的动作会影响整个系统的演变。<br><img src=\"/../image/MARL/img_32.png\" alt=\"img_32.png\"></p>\n<h4 id=\"IQL-1\"><a href=\"#IQL-1\" class=\"headerlink\" title=\"IQL\"></a>IQL</h4><p>IQL（independent Q-learning）就是非常暴力的给每个智能体执行一个Q-learning算法，因为共享环境，并且环境随着每个智能体策略、状态发生改变，对每个智能体来说，环境是动态不稳定的，因此这个算法也无法收敛，但是在部分应用中也具有较好的效果。</p>\n<h4 id=\"VDN-1\"><a href=\"#VDN-1\" class=\"headerlink\" title=\"VDN\"></a>VDN</h4><p>如前介绍：<br><img src=\"/../image/MARL/img_33.png\" alt=\"img_33.png\"></p>\n<h4 id=\"DRQN\"><a href=\"#DRQN\" class=\"headerlink\" title=\"DRQN\"></a>DRQN</h4><p>DRQN是一个用来处理POMDP（部分可观马尔可夫决策过程）的一个算法，其采用LSTM替换DQN卷基层后的一个全连接层，来达到能够记忆历史状态的作用，因此可以在部分可观的情况下提高算法性能。由于QMIX解决的是多智能体的POMDP问题，因此每个智能体采用的是DRQN算法。</p>\n<h3 id=\"QMIX-1\"><a href=\"#QMIX-1\" class=\"headerlink\" title=\"QMIX\"></a>QMIX</h3><p>QMIX是在VDN上的一种拓展，由于VDN只是将每个智能体的局部动作值函数求和相加得到联合动作值函数，虽然满足联合值函数与局部值函数单调性相同的可以进行分布化策略的条件，但是其没有在学习时利用状态信息以及没有采用非线性方式对单智能体局部值函数进行整合，使得VDN算法还有很大的提升空间。QMIX就是采用一个混合网络对单智能体局部值函数进行合并，并在训练学习过程中加入全局状态信息辅助，来提高算法性能。</p>\n<p>QMIX约束条件：<br><img src=\"/../image/MARL/img_34.png\" alt=\"img_34.png\"><br>也就是总Q关于每个agent的偏导都必须是正的。也就是，对于每个agent来说，追求自身收益的最大化是没有错误的（都对全局有不小于0的贡献）。</p>\n<p>具体网络结构如下：<br><img src=\"/../image/MARL/img_35.png\" alt=\"img_35.png\"></p>\n<p>图(c)表示每个智能体采用一个DRQN来拟合自身的Q值函数得到Qi(τi,ai; θi)，DRQN循环输入当前的观测oi,t，以及上一时刻的动作ai,t-1来得到Q值。</p>\n<p>图(b)表示混合网络的结构。其输入为每个DRQN网络的输出。为了满足上述的单调性约束，混合网络的所有权值都是非负数，对偏移量不做限制，这样就可以确保满足单调性约束。</p>\n<p>为了能够更多的利用到系统的状态信息st ，采用一种超网络（hypernetwork），将状态st作为输入，输出为混合网络的权值及偏移量。为了保证权值的非负性，采用一个线性网络以及绝对值激活函数保证输出不为负数。对偏移量采用同样方式但没有非负性的约束，混合网络最后一层的偏移量通过两层网络以及ReLU激活函数得到非线性映射网络。由于状态信息st是通过超网络混合到Qtot中的，而不是仅仅作为混合网络的输入项，这样带来的一个好处是，如果作为输入项则st的系数均为正，这样则无法充分利用状态信息来提高系统性能，相当于舍弃了一半的信息量。</p>\n<p>QMIX的Loss：<br><img src=\"/../image/MARL/img_36.png\" alt=\"img_36.png\"></p>\n<p>更新用到了传统的DQN的思想，其中b表示从经验记忆中采样的样本数量，<br><img src=\"/../image/MARL/img_37.png\" alt=\"img_37.png\"></p>\n<p>由于满足上文的单调性约束，对Qtot进行argmax 操作的计算量就不在是随智能体数量呈指数增长了，而是随智能体数量线性增长，极大的提高了算法效率。</p>\n<h2 id=\"QTRAN\"><a href=\"#QTRAN\" class=\"headerlink\" title=\"QTRAN\"></a>QTRAN</h2><p>论文：<a href=\"https://arxiv.org/abs/1905.05408\">QTRAN: Learning to Factorize with Transformation for Cooperative Multi-Agent Reinforcement Learning</a></p>\n<p>学习因式分解以实现协作多智能体强化学习 Q-Tran</p>\n<p>QMIX 在近似𝑄𝑡𝑜𝑡𝑎𝑙(𝒔, 𝒖)时额外使用了全局状态𝒔，这样就可以基于全局状态𝒔进行训练。但是如果直接将𝒔和[𝑄1, … , 𝑄𝑁]一起输入到神经网络𝑓去得到𝑄𝑡𝑜𝑡𝑎𝑙， 由于前面限制了𝑓中的参数是非负的， 但这会对𝑄𝑡𝑜𝑡𝑎𝑙和𝒔的关系进行不必要的限制，因为只希望局部最优动作就是全局最优动作。QTRAN 聚焦于释放累加性和单调性的限制， 去分解所有可分解的任务。 其思想在于只要保证个体最优动作𝑢̅和联合最优动作𝑢∗是相同的。</p>\n<p>QTRAN 认为既然 VDN 和 QMIX 是通过累加或者单调近似得到的𝑄𝑡𝑜𝑡𝑎𝑙， 那么𝑄𝑡𝑜𝑡𝑎𝑙就很有可能与真实的𝑄𝑡𝑜𝑡𝑎𝑙 ∗ 相差很远， 那我不如直接去学习一个真实的𝑄𝑡𝑜𝑡𝑎𝑙 ∗ 。</p>\n<p><img src=\"/../image/MARL/img_38.png\" alt=\"img_38.png\"></p>\n<p>这里的Qjt就是学习得到的，介于各个agent的收益Q之和和实际局面价值之间的联合补偿,建立了局部Q和全局Q之间的联系。</p>\n<p>为了满足上述定理，QTRAN 提出了两个算法 QTRAN-base 以及 QTRAN-alt:<br><img src=\"/../image/MARL/img_41.png\" alt=\"img_41.png\"></p>\n<h3 id=\"TRAN-base\"><a href=\"#TRAN-base\" class=\"headerlink\" title=\"TRAN-base\"></a>TRAN-base</h3><p>分为三部分：</p>\n<ol>\n<li>独立 Q 网络</li>\n<li>联合 Q 网络</li>\n<li>联合 V 网络</li>\n</ol>\n<p>整体的Loss如下：<br><img src=\"/../image/MARL/img_39.png\" alt=\"img_39.png\"><br><img src=\"/../image/MARL/img_40.png\" alt=\"img_40.png\"></p>\n<h3 id=\"TRAN-alt\"><a href=\"#TRAN-alt\" class=\"headerlink\" title=\"TRAN-alt\"></a>TRAN-alt</h3><p>QTRAN-alt 是针对 QTRAN（Q-function Transfer）算法的一个改进版本，旨在解决原始 QTRAN 在处理非零约束时的问题。</p>\n<p>作者认为约束：<br><img src=\"/../image/MARL/img_42.png\" alt=\"img_42.png\"></p>\n<p>在原始 QTRAN 算法中，对于非零动作的约束（对应公式中的第二个约束），可能会过于松弛，导致算法难以准确地拟合联合 Q 函数。这是因为在训练数据中的数据很少，大部分的数据都可能满足第二个约束。</p>\n<p>为了解决这个问题，QTRAN-alt 提出了一个新的定理，将原始约束中的第二个约束替换为一个更强的约束。这个新的约束使得算法能够更准确地拟合联合 Q 函数，从而提升了算法的性能和训练效果。<br><img src=\"/../image/MARL/img_43.png\" alt=\"img_43.png\"><br>这个约束更多的聚焦于非0的训练数据（这一部分数据占训练初期训练集的大部分）。为了满足这一约束，需要把上面列出的第三个损失函数替换为：</p>\n<p><img src=\"/../image/MARL/img_44.png\" alt=\"img_44.png\"></p>\n<p>具体来说，QTRAN-alt 对于非零动作的约束更加严格，以提高算法的性能。这种改进使得 QTRAN-alt 在处理合作问题中的分工与协作时表现更为优越。</p>\n<p>算法流程：<br><img src=\"/../image/MARL/img.png\" alt=\"img.png\"></p>\n<h2 id=\"MFMARL\"><a href=\"#MFMARL\" class=\"headerlink\" title=\"MFMARL\"></a>MFMARL</h2><p>论文：<a href=\"https://arxiv.org/abs/1802.05438v4\">Mean Field Multi-Agent Reinforcement Learning</a></p>\n<p>平均场多智能体强化学习</p>\n<p><code>MFMARL主要致力于极大规模的多智能体强化学习问题，解决大规模智能体之间的交互及计算困难。</code>由于多智能体强化学习问题不仅有环境交互问题，还有智能体之间的动态影响，因此为了得到最优策略，每个智能体都需要考察其他智能体的动作及状态得到联合动作值函数。由于状态空间跟动作空间随着智能体数量的增多而迅速扩大，这给计算以及探索带来了非常大的困难。</p>\n<p>MFMARL算法借用了平均场论（Mean Field Theory，MFT）的思想，其对多智能体系统给出了一个近似假设：对某个智能体，其他所有智能体对其产生的作用可以用一个均值替代。这样就就将一个智能体与其邻居智能体之间的相互作用简化为两个智能体之间的相互作用（该智能体与其所有邻居的均值）。这样极大地简化了智能体数量带来的模型空间的增大。应用平均场论后，学习在两个智能体之间是相互促进的：单个智能体的最优策略的学习是基于智能体群体的动态；同时，集体的动态也根据个体的策略进行更新。</p>\n<p>下面具体介绍算法细节，其结合平均场论得出两个主要算法MF-Q与MF-AC，是对Q-learning以及AC算法的改进，并且在理论上给出了收敛性证明，能够收敛到纳什均衡点。该算法可以应用于竞争环境或合作环境，并且每个智能体不知道环境的模型以及奖励模型，但是能够观察邻居智能体的动作及奖励。每个智能体有自己的奖励值。</p>\n<h3 id=\"背景知识-2\"><a href=\"#背景知识-2\" class=\"headerlink\" title=\"背景知识\"></a>背景知识</h3><h4 id=\"随机博弈\"><a href=\"#随机博弈\" class=\"headerlink\" title=\"随机博弈\"></a>随机博弈</h4><p><img src=\"/../image/MARL/img_45.png\" alt=\"img_45.png\"></p>\n<h4 id=\"Nash-Q\"><a href=\"#Nash-Q\" class=\"headerlink\" title=\"Nash-Q\"></a>Nash-Q</h4><p><img src=\"/../image/MARL/img_46.png\" alt=\"img_46.png\"></p>\n<h3 id=\"Mean-Field-MARL\"><a href=\"#Mean-Field-MARL\" class=\"headerlink\" title=\"Mean Field MARL\"></a>Mean Field MARL</h3><p><img src=\"/../image/MARL/img_50.png\" alt=\"img_50.png\"></p>\n<h4 id=\"平均场近似\"><a href=\"#平均场近似\" class=\"headerlink\" title=\"平均场近似\"></a>平均场近似</h4><p><img src=\"/../image/MARL/img_47.png\" alt=\"img_47.png\"></p>\n<p><img src=\"/../image/MARL/img_48.png\" alt=\"img_48.png\"></p>\n<p><img src=\"/../image/MARL/img_49.png\" alt=\"img_49.png\"></p>\n<h3 id=\"算法设计\"><a href=\"#算法设计\" class=\"headerlink\" title=\"算法设计\"></a>算法设计</h3><p>原文中将(7)通过参数化用神经网络进行拟合逼近，与DQN以及AC算法结合，分别给出了MF-Q与MF-AC算法。</p>\n<h4 id=\"MF-Q\"><a href=\"#MF-Q\" class=\"headerlink\" title=\"MF-Q\"></a>MF-Q</h4><p>通过神经网络拟合(7)式中的Q函数，使用如下所示的代价函数，与DQN中相同，为了减小拟合的Q值与真实Q值之间的误差<br><img src=\"/../image/MARL/img_51.png\" alt=\"img_51.png\"></p>\n<p>对上式求导可以得出参数梯度方向如下:<br><img src=\"/../image/MARL/img_52.png\" alt=\"img_52.png\"></p>\n<p>通过梯度下降法可以得到参数更新公式。</p>\n<p>算法流程：<br><img src=\"/../image/MARL/img_53.png\" alt=\"img_53.png\"></p>\n<h4 id=\"MF-AC\"><a href=\"#MF-AC\" class=\"headerlink\" title=\"MF-AC\"></a>MF-AC</h4><p>类似DPG，使用神经网络拟合一个策略替换玻尔兹曼机通过Q的到的策略，则得到了MF-AC算法。</p>\n<p>类似SPG，actor策略梯度公式可以写为：<br><img src=\"/../image/MARL/img_54.png\" alt=\"img_54.png\"></p>\n<p>critic类似于MF-Q的更新方式(9)</p>\n<p><img src=\"/../image/MARL/img_55.png\" alt=\"img_55.png\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><img src=\"/../image/MARL/img_56.png\" alt=\"img_56.png\"></p>\n<blockquote>\n<p>至此，MARL的入门已结束，后面会结合科研方向看论文想点子。</p>\n</blockquote>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<blockquote>\n<p>由于我的科研方向是<code>多智能体强化学习</code>，且由于研一忙于课程和一些开源项目，导致我对一些科研方面的算法理解不够充分。刚好，最近一次和东大的联合组会轮到我讲了，借此深度理解一下这些算法。</p>\n</blockquote>\n<blockquote>\n<p>在这篇笔记中，我会总结我的直系学长推荐我先看的多智能体强化学习知乎专栏内容，然后如果有时间，再总结我导师之前发给我让我看的论文。相关链接我会放在下面。</p>\n</blockquote>\n<p>知乎专栏：<a href=\"https://www.zhihu.com/column/c_1061939147282915328\">https://www.zhihu.com/column/c_1061939147282915328</a></p>\n<h2 id=\"基础知识与博弈\"><a href=\"#基础知识与博弈\" class=\"headerlink\" title=\"基础知识与博弈\"></a>基础知识与博弈</h2><h3 id=\"引言\"><a href=\"#引言\" class=\"headerlink\" title=\"引言\"></a>引言</h3><p>在多智能体系统中，每个智能体通过与环境进行交互获取奖励值（reward）来学习改善自己的策略，从而获得该环境下最优策略的过程就多智能体强化学习。</p>\n<p>在单智能体强化学习中，智能体所在的环境是稳定不变的，但是在多智能体强化学习中，环境是复杂的、动态的，因此给学习过程带来很大的困难。</p>\n<ol>\n<li>维度爆炸：在单体强化学习中，需要存储状态值函数或动作-状态值函数。在多体强化学习中，状态空间变大，联结动作空间随智能体数量指数增长，维度非常大，计算复杂。</li>\n<li>目标奖励确定困难：多智能体系统中每个智能体的任务可能不同，但是彼此之间又相互耦合影响。奖励设计的优劣直接影响学习到的策略的好坏。</li>\n<li>不稳定性：在多智能体系统中，多个智能体是同时学习的。当同伴的策略改变时，每个智能体自身的最优策略也可能会变化，这将对算法的收敛性带来影响。</li>\n<li>探索-利用：探索不光要考虑自身对环境的探索，也要对同伴的策略变化进行探索，可能打破同伴策略的平衡状态。每个智能体的探索都可能对同伴智能体的策略产生影响，这将使算法很难稳定，学习速度慢。</li>\n</ol>\n<p>多智能体系统中智能体之间可能涉及到合作与竞争等关系，引入博弈的概念，将博弈论与强化学习相结合可以很好的处理这些问题。</p>\n<h3 id=\"纳什均衡\"><a href=\"#纳什均衡\" class=\"headerlink\" title=\"纳什均衡\"></a>纳什均衡</h3><p><img src=\"/../image/MARL/img_1.png\" alt=\"img_1.png\"></p>\n<h3 id=\"完全混合策略\"><a href=\"#完全混合策略\" class=\"headerlink\" title=\"完全混合策略\"></a>完全混合策略</h3><p>若一个策略对于智能体动作集中的所有动作的概率都大于0，则这个策略为一个完全混合策略。</p>\n<h3 id=\"纯策略\"><a href=\"#纯策略\" class=\"headerlink\" title=\"纯策略\"></a>纯策略</h3><p>若智能体的策略对一个动作的概率分布为1，对其余的动作的概率分布为0，则这个策略为一个纯策略。</p>\n<h3 id=\"零和博弈\"><a href=\"#零和博弈\" class=\"headerlink\" title=\"零和博弈\"></a>零和博弈</h3><p>零和博弈中，两个智能体是完全竞争对抗关系，则 <code>R1 = - R2</code> 。在零和博弈中只有一个纳什均衡值，即使可能有很多纳什均衡策略，但是期望的奖励是相同的。</p>\n<h3 id=\"一般和博弈\"><a href=\"#一般和博弈\" class=\"headerlink\" title=\"一般和博弈\"></a>一般和博弈</h3><p>一般和博弈是指任何类型的矩阵博弈，包括完全对抗博弈、完全合作博弈以及二者的混合博弈。在一般和博弈中可能存在多个纳什均衡点。</p>\n<blockquote>\n<p>矩阵博弈和线性规划求双智能体矩阵博弈的纳什均衡策略可以看这篇：<a href=\"https://zhuanlan.zhihu.com/p/53474965\">https://zhuanlan.zhihu.com/p/53474965</a></p>\n</blockquote>\n<h2 id=\"Minimax-Q\"><a href=\"#Minimax-Q\" class=\"headerlink\" title=\"Minimax-Q\"></a>Minimax-Q</h2><p>论文：<a href=\"https://courses.cs.duke.edu/spring07/cps296.3/littman94markov.pdf\">Markov games as a framework for multi-agent reinforcement learning</a></p>\n<p>Minimax-Q算法应用于<code>两个玩家的零和随机博弈中</code>。<code>Minimax-Q中的Minimax指的是使用minimax方法构建线性规划来求解每个特定状态s的阶段博弈的纳什均衡策略。Q指的是借用Q-learning中的TD方法来迭代学习状态值函数或动作-状态值函数。</code></p>\n<p>在两玩家零和随机博弈中，给定一个状态s，则定义第i个智能体的状态值函数如下：意义为，<code>每个智能体最大化在与对手博弈中最差情况下的期望奖励值</code>。</p>\n<p><img src=\"/../image/MARL/img_2.png\" alt=\"img_2.png\"></p>\n<p>理想情况，如果算法能够对每一个状态-动作对访问无限次，那么该算法能够收敛到纳什均衡策略。但是在上述算法中存在几个缺点：</p>\n<ol>\n<li>在第5步中需要不断求解一个线性规划，这将造成学习速度的降低，增加计算时间。</li>\n<li>为了求解第5步，智能体i需要知道所有智能体的动作空间，这个在分布式系统中将无法满足。</li>\n<li>只满足收敛性，不满足合理性。Minimax-Q算法能够找到多智能体强化学习的纳什均衡策略，但是假设对手使用的不是纳什均衡策略，而是一个较差的策略，则当前智能体并不能根据对手的策略学习到一个更优的策略。该算法无法让智能体根据对手的策略来调节优化自己的策略，而只能找到随机博弈的纳什均衡策略。这是由于Minimax-Q算法是一个对手独立算法（opponent-independent algorithm），不论对手策略是怎么样的，都收敛到该博弈的纳什均衡策略。就算对手采用一个非常弱的策略，当前智能体也不能学习到一个比纳什均衡策略更好的策略。</li>\n</ol>\n<h2 id=\"Nash-Q-Learning\"><a href=\"#Nash-Q-Learning\" class=\"headerlink\" title=\"Nash Q-Learning\"></a>Nash Q-Learning</h2><p>论文：<a href=\"https://www.jmlr.org/papers/volume4/temp/hu03a.pdf\">Nash Q-learning for general-sum stochastic games</a></p>\n<p>Nash Q-Learning算法是将Minimax-Q算法<code>从零和博弈扩展到多人一般和博弈</code>的算法。在Minimax-Q算法中需要通过Minimax线性规划求解阶段博弈的纳什均衡点，拓展到<code>Nash Q-Learning算法就是使用二次规划求解纳什均衡点</code>。Nash Q-Learning算法在合作性均衡或对抗性均衡的环境中能够收敛到纳什均衡点，其收敛性条件是，在每一个状态s的阶段博弈中，都能够找到一个全局最优点或者鞍点，只有满足这个条件，Nash Q-Learning算法才能够收敛。与Minimax-Q算法相同，Nash Q-Learning算法求解二次规划的过程也非常耗时，降低了算法的学习速度。</p>\n<p>其算法流程如下：</p>\n<p><img src=\"/../image/MARL/img_3.png\" alt=\"img_3.png\"></p>\n<p>该算法需要观测其他所有智能体的动作ai与奖励值ri。并且与Minimax-Q算法一样，只满足收敛性，不满足合理性。只能收敛到纳什均衡策略，不能根据其他智能体的策略来优化调剂自身的策略。</p>\n<h2 id=\"Friend-or-Foe-Q-Learning\"><a href=\"#Friend-or-Foe-Q-Learning\" class=\"headerlink\" title=\"Friend-or-Foe Q-Learning\"></a>Friend-or-Foe Q-Learning</h2><p>论文：<a href=\"https://www.researchgate.net/profile/Michael-Littman/publication/2933305_Friend-or-Foe_Q-learning_in_General-Sum_Games/links/54b66cb80cf24eb34f6d19dc/Friend-or-Foe-Q-learning-in-General-Sum-Games.pdf\">Friend-or-foe Q-learning in general-sum games</a></p>\n<p>Friend-or-Foe Q-Learning（FFQ）算法也是从Minimax-Q算法拓展而来。为了能够处理一般和博弈，FFQ算法对一个智能体i，将其他所有智能体分为两组，一组为i的friend帮助i一起最大化其奖励回报，另一组为i的foe对抗i并降低i的奖励回报，因此对每个智能体而言都有两组。这样一个n智能体的一般和博弈就转化为了一个两智能体的零和博弈。</p>\n<p>其纳什均衡策略求解方法如下所示：</p>\n<p><img src=\"/../image/MARL/img_4.png\" alt=\"img_4.png\"></p>\n<p>算法流程如下：</p>\n<p><img src=\"/../image/MARL/img_5.png\" alt=\"img_5.png\"></p>\n<p>有一种利用Minimax-Q算法进行多人博弈方法为，两队零和博弈，将所有智能体分成两个小组进行零和博弈。两队零和博弈中每一组有一个leader才控制这一队智能体的所有策略，获取的奖励值也是这一个小组的整体奖励值。</p>\n<p>FFQ算法没有team learder，每个人选择自己动作学习自己的策略获得自己的奖励值，但是为了更新值，每个智能体需要在每一步观测其他所有friend与foe的执行动作。</p>\n<p>FFQ与Minimax-Q算法一样都需要利用线性规划，因此算法整体学习速度会变慢。</p>\n<h2 id=\"WoLF-Policy-Hill-Climbing\"><a href=\"#WoLF-Policy-Hill-Climbing\" class=\"headerlink\" title=\"WoLF Policy Hill-Climbing\"></a>WoLF Policy Hill-Climbing</h2><p>论文：<a href=\"https://pdf.sciencedirectassets.com/271585/1-s2.0-S0004370200X00872/1-s2.0-S0004370202001212/main.pdf?X-Amz-Security-Token=IQoJb3JpZ2luX2VjEGUaCXVzLWVhc3QtMSJHMEUCIQC83rDT43qYROWb01kvyuybyC5EMghziFRQfbzKh2phkAIgDDv7TwK+il2pEyYMJNLreVUvpkwWBgC41FYPaJ1i06cqvAUInf//////////ARAFGgwwNTkwMDM1NDY4NjUiDDwT6ryaWf366e7YEyqQBSV+k4Sy0RKqs/FblDXiW14ORHDzZeMEKYZ5LfWZdVYpVxwo4vTYmKH2nercH63Et4tIjK0e9nL/zjvPpjmkrFWHn6hO0F8KjMsnwlmzVepHF0btXh7AkZ3e5t/2bnTZ7qTDIfyIUlvNHlEKL/9K5mHZexxj3w3tRoxmqUu8NYM6l2eVAv+cEGunXeil0OTm/SRkYiIlKRNiuZikU2EPu3h9Psh00bAXL07iFhI5W4y3QkVAmyWJ9ZRz3XtitHSz+TVlNngLHNqDlo4LosRLqb7IYbTMz8mTRt+upsy1T6e+t1k0PCXzBrMR4xqRuv006eN8HG7/OHDEpmrKu7kne4KeuWyh1qyIHWZOtG2cqhDN/+t8okdIhgmNbKIikDVOUqNwejq1Mnka+0qSkQ1BabTqjK1RKv1gFNC3vkHeEheIYU8+1kJIT3NWLWHfETSWvpuS6cVQSBNvCJ4CkXUMq3tQFOkc1B36oBuNEDLMvBXbjpYWp9DgKJ3yAeyqO8juXKnp5J/3NM7Uom6qpwgK4XNNxbXWrpzjYQpeahoFc2F9qyOzBHnX3mb+2+MdRq1fUwZ0fxzmF0HwBL8VcOWdbgiPhK6qDQmufFdZsMowZirITlDpFdg0pa5F4PkH+OpYXYXQA+usAbQ/JLnUibNKgBd8Ssk2Fj7+Aj1H1+7hEDC+KVib31jzGP9aBwfa76WjOdwk+/VtOJmEMkw2novRj1vcWCAOB3rfg5xFumwxuEK0uDT1R0He0KxhDRKGErfMTRXnb/yzBt5MLsmAz5g8wUFQtqhEq3QhLmuGTVdOVFkX6vG2qiPJMQFrehup1kL1jEGqTSK7K9pcr+Mh//5bt5/spmxqMvOBRUAeZCYaEAYlMMnvpqoGOrEBjuaNrgG15OoT+QiARadKSKYw5yb49jYpL5ODDxgi370KIIs7mCTNedup3876q1Q1OH4IMlTPYRONhLrYVCCr/op8JfLOur2Kx4cAbHsxPmwrtlKhbwv/ByOhbxlQf+UKhNjDXNuR1tSn0DNiTsUyHtUoHD5Pp7unY1PXGDGbYbrnCR7ByWapCYxFzQ1IqYENVSoMPhKfMoOaVw3CEXofL7EIi2a840t/p1COhmawkApQ&X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20231107T051949Z&X-Amz-SignedHeaders=host&X-Amz-Expires=300&X-Amz-Credential=ASIAQ3PHCVTYYPNOQKWR/20231107/us-east-1/s3/aws4_request&X-Amz-Signature=3d4d8f4e51351b7226cd8bc38cbc9fa5109884a7636050217642770bc18913c9&hash=c607cf9fed0bd128c473b32bef56a596967a6b23b8e4d2b87884f7626c46df4c&host=68042c943591013ac2b2430a89b270f6af2c76d8dfd086a07176afe7c76c2c61&pii=S0004370202001212&tid=spdf-d5458afb-6fde-4cc5-bd92-4518991575a2&sid=8008b1c63c486948dc7b9aa27c1ce9ec5b7fgxrqa&type=client&tsoh=d3d3LnNjaWVuY2VkaXJlY3QuY29t&ua=120e5c515d53530157&rr=82231f9f7f2904c0&cc=hk\">Multiagent learning using a variable learning rate</a></p>\n<p><img src=\"/../image/MARL/img_6.png\" alt=\"img_6.png\"></p>\n<p>WolF是指，当智能体做的比期望值好的时候小心缓慢的调整参数，当智能体做的比期望值差的时候，加快步伐调整参数。</p>\n<p>PHC是一种单智能体在稳定环境下的一种学习算法。该算法的核心就是通常强化学习的思想，增大能够得到最大累积期望的动作的选取概率。该算法具有合理性，能够收敛到最优策略。</p>\n<p>其算法流程如下：</p>\n<p><img src=\"/../image/MARL/img_7.png\" alt=\"img_7.png\"></p>\n<p>为了将PHC应用于动态环境中，将WoLF与PHC算法结合，使得智能体获得的奖励在比预期差时，能够快速调整适应其他智能体策略变化，当比预期好时谨慎学习，给其他智能体适应策略变化的时间。并且WoLF-PHC算法能够收敛到纳什均衡策略，并且具备合理性，当其他智能体采用某个固定策略使，其也能收敛到一个目前状况下的最优策略而不是收敛到一个可能效果不好的纳什均衡策略处。在WoLF-PHC算法中，使用一个可变的学习速率 <code>δ</code> 来实现WoLF效果，当策略效果较差时使用 <code>δl</code> ，策略效果较好时使用 <code>δw</code> ，并且满足 <code>δl &gt; δw</code> 。还有一个优势是，WoLF-PHC算法不用观测其他智能体的策略、动作及奖励值，需要更少的空间去记录Q值，并且WoLF-PHC算法是通过PHC算法进行学习改进策略的，所以不需要使用线性规划或者二次规划求解纳什均衡，算法速度得到了提高。虽然WoLF-PHC算法在实际应用中取得了非常好的效果，并且能够收敛到最优策略。但是其收敛性在理论上一直没有得到证明。</p>\n<p>其算法流程如下所示：</p>\n<p><img src=\"/../image/MARL/img_8.png\" alt=\"img_8.png\"></p>\n<blockquote>\n<p>关于MiniMax-Q、Nash Q-Learning、Friend-or-Foe Q-Learning、WoLF Policy Hill-Climbing算法的详细介绍可以看这篇：<a href=\"https://www.cnblogs.com/zuti666/p/16909220.html\">https://www.cnblogs.com/zuti666/p/16909220.html</a> 和 <a href=\"https://zhuanlan.zhihu.com/p/53563792\">https://zhuanlan.zhihu.com/p/53563792</a></p>\n</blockquote>\n<h2 id=\"MADDPG\"><a href=\"#MADDPG\" class=\"headerlink\" title=\"MADDPG\"></a>MADDPG</h2><p>论文：<a href=\"https://arxiv.org/abs/1706.02275\">Multi-Agent Actor-Critic for Mixed Cooperative-Competitive Environments</a></p>\n<p>OpenAI 2017发表在NIPS 上的一篇文章。主要是将AC算法进行了一系列改进，使其能够适用于传统RL算法无法处理的复杂多智能体场景。</p>\n<p>传统RL算法面临的一个主要问题是由于每个智能体都是在不断学习改进其策略，因此从每一个智能体的角度看，环境是一个动态不稳定的，这不符合传统RL收敛条件。并且在一定程度上，无法通过仅仅改变智能体自身的策略来适应动态不稳定的环境。由于环境的不稳定，将无法直接使用之前的经验回放等DQN的关键技巧。policy gradient算法会由于智能体数量的变多使得本就有的方差大的问题加剧。</p>\n<p>MADDPG算法具有以下三点特征： </p>\n<ol>\n<li>通过学习得到的最优策略，在应用时只利用局部信息就能给出最优动作。 </li>\n<li>不需要知道环境的动力学模型以及特殊的通信需求。 </li>\n<li>该算法不仅能用于合作环境，也能用于竞争环境。</li>\n</ol>\n<p>MADDPG算法具有以下三点技巧：</p>\n<ol>\n<li>集中式训练，分布式执行：训练时采用集中式学习训练critic与actor，使用时actor只用知道局部信息就能运行。critic需要其他智能体的策略信息，本文给了一种估计其他智能体策略的方法，能够只用知道其他智能体的观测与动作。</li>\n<li>改进了经验回放记录的数据。为了能够适用于动态环境，每一条信息由(x, x’, a1,…, an, r1,…, rn)组成，X &#x3D; (o1,…, on)。表示每个智能体的观测。</li>\n<li>利用策略集合效果优化（policy ensemble）：对每个智能体学习多个策略，改进时利用所有策略的整体效果进行优化。以提高算法的稳定性以及鲁棒性。</li>\n</ol>\n<h3 id=\"背景知识\"><a href=\"#背景知识\" class=\"headerlink\" title=\"背景知识\"></a>背景知识</h3><h4 id=\"DQN\"><a href=\"#DQN\" class=\"headerlink\" title=\"DQN\"></a>DQN</h4><p>深度Q网络（deep Q-network）<br><img src=\"/../image/MARL/img_9.png\" alt=\"img_9.png\"></p>\n<h4 id=\"SPG\"><a href=\"#SPG\" class=\"headerlink\" title=\"SPG\"></a>SPG</h4><p>随机策略梯度（stochastic policy gradient）</p>\n<p><img src=\"/../image/MARL/img_10.png\" alt=\"img_10.png\"></p>\n<h4 id=\"DPG\"><a href=\"#DPG\" class=\"headerlink\" title=\"DPG\"></a>DPG</h4><p>确定性策略梯度（deterministic policy gradient）</p>\n<p><img src=\"/../image/MARL/img_11.png\" alt=\"img_11.png\"></p>\n<h3 id=\"MADDPG-1\"><a href=\"#MADDPG-1\" class=\"headerlink\" title=\"MADDPG\"></a>MADDPG</h3><h4 id=\"多智能体AC设计\"><a href=\"#多智能体AC设计\" class=\"headerlink\" title=\"多智能体AC设计\"></a>多智能体AC设计</h4><p>MADDPG集中式的学习，分布式的应用。因此允许使用一些额外的信息（全局信息）进行学习，只要在应用的时候使用局部信息进行决策就行。这点就是Q-learning的一个不足之处，Q-learning在学习与应用时必须采用相同的信息。所以这里MADDPG对传统的AC算法进行了一个改进，Critic扩展为可以利用其他智能体的策略进行学习，这点的进一步改进就是每个智能体对其他智能体的策略进行一个函数逼近。<br><img src=\"/../image/MARL/img_12.png\" alt=\"img_12.png\"><br><img src=\"/../image/MARL/img_13.png\" alt=\"img_13.png\"></p>\n<h4 id=\"估计其他智能体策略\"><a href=\"#估计其他智能体策略\" class=\"headerlink\" title=\"估计其他智能体策略\"></a>估计其他智能体策略</h4><p><img src=\"/../image/MARL/img_14.png\" alt=\"img_14.png\"></p>\n<h4 id=\"策略集合优化\"><a href=\"#策略集合优化\" class=\"headerlink\" title=\"策略集合优化\"></a>策略集合优化</h4><p><img src=\"/../image/MARL/img_15.png\" alt=\"img_15.png\"></p>\n<h3 id=\"相关PPT\"><a href=\"#相关PPT\" class=\"headerlink\" title=\"相关PPT\"></a>相关PPT</h3><p><img src=\"/../image/MARL/img_16.png\" alt=\"img_16.png\"><br><img src=\"/../image/MARL/img_17.png\" alt=\"img_17.png\"><br><img src=\"/../image/MARL/img_18.png\" alt=\"img_18.png\"><br><img src=\"/../image/MARL/img_19.png\" alt=\"img_19.png\"><br><img src=\"/../image/MARL/img_20.png\" alt=\"img_20.png\"></p>\n<h2 id=\"IQL\"><a href=\"#IQL\" class=\"headerlink\" title=\"IQL\"></a>IQL</h2><p>论文：<a href=\"https://arxiv.org/abs/1511.08779\">Multiagent Cooperation and Competition with Deep Reinforcement Learning</a></p>\n<p>Independent Q-Learning</p>\n<p>本文讲的是介绍如何将DQN用到Multi-agent问题中，并表示最直接的方法就是，智能体把其他智能体喝环境看作整体，每个智能体之间的决策相互独立（用原文的话说就是each agent is controlled by an independent Deep Q-Network）。</p>\n<p>IQL发现，两个智能体都独立采用DQN，在不修改除了reward外的任何参数、细节，agent都能取得不错的成绩。这说明IQL可以作为多智能体强化学习的baseline。</p>\n<p>IQL（independent Q-learning）算法非常简单暴力地给每个智能体执行一个Deep-Q-learning算法。IQL把单智能体Deep-Q-learning算法直接应用在多智能体学习领域，各个智能体是各自为政的。<code>这是此类算法的一个极端。</code></p>\n<p>其他没啥要讲的。。。</p>\n<p><img src=\"/../image/MARL/img_21.png\" alt=\"img_21.png\"></p>\n<h2 id=\"COMA\"><a href=\"#COMA\" class=\"headerlink\" title=\"COMA\"></a>COMA</h2><p>论文：<a href=\"https://arxiv.org/abs/1705.08926\">Counterfactual Multi-Agent Policy Gradients</a></p>\n<p>COMA (counterfactual multi-agent) 使用一个集中式的critic网络计算优势函数A，统一给Agenti计算对应的actioni分别去执行。所谓CTDE（central training decentralize execution）。COMA是把Actor-critic单智能体算法直接应用在多智能体学习领域，各个智能体按照集中的critic网络指令行事，它们是完全协作关系。<code>这是此类算法的另一个极端。</code><br><img src=\"/../image/MARL/img_23.png\" alt=\"img_23.png\"></p>\n<p>多智能体强化学习算法必然都是在IQL和COMA两个算法之间做平衡。Agent既不能完全独立行事，也不能完全按中心节点指令行事。</p>\n<p>那么这些算法都在解决什么问题呢？</p>\n<p>只要模型共享Qtot值函数，团队奖励值ri有可能仅仅是某几个智能体获得的，其它智能体并没有做贡献但缺获得了奖励值ri。这就是所谓多智能体信用分配（credit assignment）问题。</p>\n<p>在COMA算法中，为了解决多智能体信用分配问题，提出了优势函数A（遍历Agenti动作空间μi里的所有动作，而保持其它Agent的动作空间μ–不变，计算每个Agenti的参数值），用来计算反事实基线（counterfactual baseline）。</p>\n<p><img src=\"/../image/MARL/img_24.png\" alt=\"img_24.png\"></p>\n<p>这个思想来自difference reward。difference reward的思想是：保持其他智能体的联合动作不动，把当前智能体的action替换为一个default action，检查值函数Q是否有变化，如果没有，代表当前智能体的action是无贡献的action，因为奖励r不是当前智能体的action获得的。但是difference reward思想有个问题，default action选谁？？？无法选择！！！为了解决这个问题，COMA定义了优势函数A，解决了多智能体信用分配问题。如果仔细看算法的A函数公式，它其实就是AC算法中常用的优势函数A在多智能体领域的扩展而已。</p>\n<p><img src=\"/../image/MARL/img_25.png\" alt=\"img_25.png\"></p>\n<p>COMA 与 MADDPG 在 actor network 上的不同之处在于前者使用的是 GRU 网络，为了更好的处理局部观察问题，但是后者使用的则是普通的 DNN。</p>\n<p>COMA算法具体框架如下图所示：<br><img src=\"/../image/MARL/img_22.png\" alt=\"img_22.png\"></p>\n<p>网络架构：<br><img src=\"/../image/MARL/img_26.png\" alt=\"img_26.png\"></p>\n<h2 id=\"VDN\"><a href=\"#VDN\" class=\"headerlink\" title=\"VDN\"></a>VDN</h2><p>论文：<a href=\"https://arxiv.org/abs/1706.05296\">Value-Decomposition Networks For Cooperative Multi-Agent Learning</a></p>\n<p>VDN（Value-Decomposition Networks）算法是一种用于多智能体强化学习（MARL）的算法。它旨在解决多智能体系统中合作与竞争的问题，其中各个智能体需要同时考虑个体利益与整体目标。</p>\n<p>VDN算是大名鼎鼎的QMIX算法的前身。VDN算法假定：<code>Qtot是每个智能体的Qi的算术加和。对于智能体Agenti来说，它只用最大化Qtot函数的子项Qi函数即可。</code>如下图：<br>左边是IQL，右边是VDN<br><img src=\"/../image/MARL/img_27.png\" alt=\"img_27.png\"></p>\n<p>作者假定如下等式成立：<br><img src=\"/../image/MARL/img_29.png\" alt=\"img_29.png\"></p>\n<p>h表示序列观察，a表示序列动作。 注意到，上述分解满足一个很好的性质，即对左边的联合 Q function 进行 操作，等价于对右边每一个局部 Q function 分别进行 。这样可以保证训练完毕后去中心化执行时，即使整个系统只基于局部观察进行决策，其策略也是与基于全局观察进行决策是一致的。</p>\n<p>推导上式：<br>假定整个多智能体系统中包含两个智能体，并且全局回报函数是每个智能体的局部回报函数的加和：<br><img src=\"/../image/MARL/img_30.png\" alt=\"img_30.png\"><br>这样分解后的 Q 函数是基于全局观察的。由于使用的网络结构是 LSTM，那么估计误差是可以缩小的，并且还可以通过智能体之间的通信来进一步减小误差，所以本文假设：<br><img src=\"/../image/MARL/img_31.png\" alt=\"img_31.png\"></p>\n<p>网络架构：<br><img src=\"/../image/MARL/img_28.png\" alt=\"img_28.png\"></p>\n<p>VDN算法强调的是把总的Q相信分解为多个Q之和，每个Q对应每个智能体的动作价值，这种会导致一个结果，那就是这样累计求和的Q可能没有具体的意义、吃大锅饭导致有agent划水之类的结果。这些问题在QMIX中得到了比较好的解决。</p>\n<h2 id=\"QMIX\"><a href=\"#QMIX\" class=\"headerlink\" title=\"QMIX\"></a>QMIX</h2><p>论文：<a href=\"https://arxiv.org/abs/1803.11485\">QMIX: Monotonic Value Function Factorisation for Deep Multi-Agent Reinforcement Learning</a></p>\n<p>深度多智能体强化学习的单调值函数分解</p>\n<p>QMIX是一个多智能体强化学习算法，具有如下特点： </p>\n<ol>\n<li>学习得到分布式策略。 </li>\n<li>本质是一个值函数逼近算法。 </li>\n<li>由于对一个联合动作-状态只有一个总奖励值，而不是每个智能体得到一个自己的奖励值，因此只能用于合作环境，而不能用于竞争对抗环境。 </li>\n<li>QMIX算法采用集中式学习，分布式执行应用的框架。通过集中式的信息学习，得到每个智能体的分布式策略。 </li>\n<li>训练时借用全局状态信息来提高算法效果。是后文提到的VDN方法的改进。 </li>\n<li>接上一条，QMIX设计一个神经网络来整合每个智能体的局部值函数而得到联合动作值函数，VDN是直接求和。 </li>\n<li>每个智能体的局部值函数只需要自己的局部观测，因此整个系统在执行时是一个分布式的，通过局部值函数，选出累积期望奖励最大的动作执行。 </li>\n<li>算法使联合动作值函数与每个局部值函数的单调性相同，因此对局部值函数取最大动作也就是使联合动作值函数最大。 </li>\n<li>算法针对的模型是一个分布式多智能体部分可观马尔可夫决策过程（Dec-POMDP）。</li>\n</ol>\n<h3 id=\"背景知识-1\"><a href=\"#背景知识-1\" class=\"headerlink\" title=\"背景知识\"></a>背景知识</h3><h4 id=\"MARL核心问题\"><a href=\"#MARL核心问题\" class=\"headerlink\" title=\"MARL核心问题\"></a>MARL核心问题</h4><p>在多智能体强化学习中一个关键的问题就是如何学习联合动作值函数，因为该函数的参数会随着智能体数量的增多而成指数增长，<code>如果动作值函数的输入空间过大，则很难拟合出一个合适函数来表示真实的联合动作值函数</code>。另一个问题就是学得了联合动作值函数后，<code>如何通过联合值函数提取出一个优秀的分布式的策略</code>。这其实是单智能体强化学习拓展到MARL的核心问题。</p>\n<h4 id=\"Dec-POMDP\"><a href=\"#Dec-POMDP\" class=\"headerlink\" title=\"Dec-POMDP\"></a>Dec-POMDP</h4><p>Dec-POMDP指的是分布式部分可观察马尔可夫决策过程（Decentralized Partially Observable Markov Decision Process）。在 Dec-POMDP 中，有多个智能体同时存在，并且每个智能体只能观察到局部的环境信息，而不能直接获取全局状态。此外，每个智能体的动作会影响整个系统的演变。<br><img src=\"/../image/MARL/img_32.png\" alt=\"img_32.png\"></p>\n<h4 id=\"IQL-1\"><a href=\"#IQL-1\" class=\"headerlink\" title=\"IQL\"></a>IQL</h4><p>IQL（independent Q-learning）就是非常暴力的给每个智能体执行一个Q-learning算法，因为共享环境，并且环境随着每个智能体策略、状态发生改变，对每个智能体来说，环境是动态不稳定的，因此这个算法也无法收敛，但是在部分应用中也具有较好的效果。</p>\n<h4 id=\"VDN-1\"><a href=\"#VDN-1\" class=\"headerlink\" title=\"VDN\"></a>VDN</h4><p>如前介绍：<br><img src=\"/../image/MARL/img_33.png\" alt=\"img_33.png\"></p>\n<h4 id=\"DRQN\"><a href=\"#DRQN\" class=\"headerlink\" title=\"DRQN\"></a>DRQN</h4><p>DRQN是一个用来处理POMDP（部分可观马尔可夫决策过程）的一个算法，其采用LSTM替换DQN卷基层后的一个全连接层，来达到能够记忆历史状态的作用，因此可以在部分可观的情况下提高算法性能。由于QMIX解决的是多智能体的POMDP问题，因此每个智能体采用的是DRQN算法。</p>\n<h3 id=\"QMIX-1\"><a href=\"#QMIX-1\" class=\"headerlink\" title=\"QMIX\"></a>QMIX</h3><p>QMIX是在VDN上的一种拓展，由于VDN只是将每个智能体的局部动作值函数求和相加得到联合动作值函数，虽然满足联合值函数与局部值函数单调性相同的可以进行分布化策略的条件，但是其没有在学习时利用状态信息以及没有采用非线性方式对单智能体局部值函数进行整合，使得VDN算法还有很大的提升空间。QMIX就是采用一个混合网络对单智能体局部值函数进行合并，并在训练学习过程中加入全局状态信息辅助，来提高算法性能。</p>\n<p>QMIX约束条件：<br><img src=\"/../image/MARL/img_34.png\" alt=\"img_34.png\"><br>也就是总Q关于每个agent的偏导都必须是正的。也就是，对于每个agent来说，追求自身收益的最大化是没有错误的（都对全局有不小于0的贡献）。</p>\n<p>具体网络结构如下：<br><img src=\"/../image/MARL/img_35.png\" alt=\"img_35.png\"></p>\n<p>图(c)表示每个智能体采用一个DRQN来拟合自身的Q值函数得到Qi(τi,ai; θi)，DRQN循环输入当前的观测oi,t，以及上一时刻的动作ai,t-1来得到Q值。</p>\n<p>图(b)表示混合网络的结构。其输入为每个DRQN网络的输出。为了满足上述的单调性约束，混合网络的所有权值都是非负数，对偏移量不做限制，这样就可以确保满足单调性约束。</p>\n<p>为了能够更多的利用到系统的状态信息st ，采用一种超网络（hypernetwork），将状态st作为输入，输出为混合网络的权值及偏移量。为了保证权值的非负性，采用一个线性网络以及绝对值激活函数保证输出不为负数。对偏移量采用同样方式但没有非负性的约束，混合网络最后一层的偏移量通过两层网络以及ReLU激活函数得到非线性映射网络。由于状态信息st是通过超网络混合到Qtot中的，而不是仅仅作为混合网络的输入项，这样带来的一个好处是，如果作为输入项则st的系数均为正，这样则无法充分利用状态信息来提高系统性能，相当于舍弃了一半的信息量。</p>\n<p>QMIX的Loss：<br><img src=\"/../image/MARL/img_36.png\" alt=\"img_36.png\"></p>\n<p>更新用到了传统的DQN的思想，其中b表示从经验记忆中采样的样本数量，<br><img src=\"/../image/MARL/img_37.png\" alt=\"img_37.png\"></p>\n<p>由于满足上文的单调性约束，对Qtot进行argmax 操作的计算量就不在是随智能体数量呈指数增长了，而是随智能体数量线性增长，极大的提高了算法效率。</p>\n<h2 id=\"QTRAN\"><a href=\"#QTRAN\" class=\"headerlink\" title=\"QTRAN\"></a>QTRAN</h2><p>论文：<a href=\"https://arxiv.org/abs/1905.05408\">QTRAN: Learning to Factorize with Transformation for Cooperative Multi-Agent Reinforcement Learning</a></p>\n<p>学习因式分解以实现协作多智能体强化学习 Q-Tran</p>\n<p>QMIX 在近似𝑄𝑡𝑜𝑡𝑎𝑙(𝒔, 𝒖)时额外使用了全局状态𝒔，这样就可以基于全局状态𝒔进行训练。但是如果直接将𝒔和[𝑄1, … , 𝑄𝑁]一起输入到神经网络𝑓去得到𝑄𝑡𝑜𝑡𝑎𝑙， 由于前面限制了𝑓中的参数是非负的， 但这会对𝑄𝑡𝑜𝑡𝑎𝑙和𝒔的关系进行不必要的限制，因为只希望局部最优动作就是全局最优动作。QTRAN 聚焦于释放累加性和单调性的限制， 去分解所有可分解的任务。 其思想在于只要保证个体最优动作𝑢̅和联合最优动作𝑢∗是相同的。</p>\n<p>QTRAN 认为既然 VDN 和 QMIX 是通过累加或者单调近似得到的𝑄𝑡𝑜𝑡𝑎𝑙， 那么𝑄𝑡𝑜𝑡𝑎𝑙就很有可能与真实的𝑄𝑡𝑜𝑡𝑎𝑙 ∗ 相差很远， 那我不如直接去学习一个真实的𝑄𝑡𝑜𝑡𝑎𝑙 ∗ 。</p>\n<p><img src=\"/../image/MARL/img_38.png\" alt=\"img_38.png\"></p>\n<p>这里的Qjt就是学习得到的，介于各个agent的收益Q之和和实际局面价值之间的联合补偿,建立了局部Q和全局Q之间的联系。</p>\n<p>为了满足上述定理，QTRAN 提出了两个算法 QTRAN-base 以及 QTRAN-alt:<br><img src=\"/../image/MARL/img_41.png\" alt=\"img_41.png\"></p>\n<h3 id=\"TRAN-base\"><a href=\"#TRAN-base\" class=\"headerlink\" title=\"TRAN-base\"></a>TRAN-base</h3><p>分为三部分：</p>\n<ol>\n<li>独立 Q 网络</li>\n<li>联合 Q 网络</li>\n<li>联合 V 网络</li>\n</ol>\n<p>整体的Loss如下：<br><img src=\"/../image/MARL/img_39.png\" alt=\"img_39.png\"><br><img src=\"/../image/MARL/img_40.png\" alt=\"img_40.png\"></p>\n<h3 id=\"TRAN-alt\"><a href=\"#TRAN-alt\" class=\"headerlink\" title=\"TRAN-alt\"></a>TRAN-alt</h3><p>QTRAN-alt 是针对 QTRAN（Q-function Transfer）算法的一个改进版本，旨在解决原始 QTRAN 在处理非零约束时的问题。</p>\n<p>作者认为约束：<br><img src=\"/../image/MARL/img_42.png\" alt=\"img_42.png\"></p>\n<p>在原始 QTRAN 算法中，对于非零动作的约束（对应公式中的第二个约束），可能会过于松弛，导致算法难以准确地拟合联合 Q 函数。这是因为在训练数据中的数据很少，大部分的数据都可能满足第二个约束。</p>\n<p>为了解决这个问题，QTRAN-alt 提出了一个新的定理，将原始约束中的第二个约束替换为一个更强的约束。这个新的约束使得算法能够更准确地拟合联合 Q 函数，从而提升了算法的性能和训练效果。<br><img src=\"/../image/MARL/img_43.png\" alt=\"img_43.png\"><br>这个约束更多的聚焦于非0的训练数据（这一部分数据占训练初期训练集的大部分）。为了满足这一约束，需要把上面列出的第三个损失函数替换为：</p>\n<p><img src=\"/../image/MARL/img_44.png\" alt=\"img_44.png\"></p>\n<p>具体来说，QTRAN-alt 对于非零动作的约束更加严格，以提高算法的性能。这种改进使得 QTRAN-alt 在处理合作问题中的分工与协作时表现更为优越。</p>\n<p>算法流程：<br><img src=\"/../image/MARL/img.png\" alt=\"img.png\"></p>\n<h2 id=\"MFMARL\"><a href=\"#MFMARL\" class=\"headerlink\" title=\"MFMARL\"></a>MFMARL</h2><p>论文：<a href=\"https://arxiv.org/abs/1802.05438v4\">Mean Field Multi-Agent Reinforcement Learning</a></p>\n<p>平均场多智能体强化学习</p>\n<p><code>MFMARL主要致力于极大规模的多智能体强化学习问题，解决大规模智能体之间的交互及计算困难。</code>由于多智能体强化学习问题不仅有环境交互问题，还有智能体之间的动态影响，因此为了得到最优策略，每个智能体都需要考察其他智能体的动作及状态得到联合动作值函数。由于状态空间跟动作空间随着智能体数量的增多而迅速扩大，这给计算以及探索带来了非常大的困难。</p>\n<p>MFMARL算法借用了平均场论（Mean Field Theory，MFT）的思想，其对多智能体系统给出了一个近似假设：对某个智能体，其他所有智能体对其产生的作用可以用一个均值替代。这样就就将一个智能体与其邻居智能体之间的相互作用简化为两个智能体之间的相互作用（该智能体与其所有邻居的均值）。这样极大地简化了智能体数量带来的模型空间的增大。应用平均场论后，学习在两个智能体之间是相互促进的：单个智能体的最优策略的学习是基于智能体群体的动态；同时，集体的动态也根据个体的策略进行更新。</p>\n<p>下面具体介绍算法细节，其结合平均场论得出两个主要算法MF-Q与MF-AC，是对Q-learning以及AC算法的改进，并且在理论上给出了收敛性证明，能够收敛到纳什均衡点。该算法可以应用于竞争环境或合作环境，并且每个智能体不知道环境的模型以及奖励模型，但是能够观察邻居智能体的动作及奖励。每个智能体有自己的奖励值。</p>\n<h3 id=\"背景知识-2\"><a href=\"#背景知识-2\" class=\"headerlink\" title=\"背景知识\"></a>背景知识</h3><h4 id=\"随机博弈\"><a href=\"#随机博弈\" class=\"headerlink\" title=\"随机博弈\"></a>随机博弈</h4><p><img src=\"/../image/MARL/img_45.png\" alt=\"img_45.png\"></p>\n<h4 id=\"Nash-Q\"><a href=\"#Nash-Q\" class=\"headerlink\" title=\"Nash-Q\"></a>Nash-Q</h4><p><img src=\"/../image/MARL/img_46.png\" alt=\"img_46.png\"></p>\n<h3 id=\"Mean-Field-MARL\"><a href=\"#Mean-Field-MARL\" class=\"headerlink\" title=\"Mean Field MARL\"></a>Mean Field MARL</h3><p><img src=\"/../image/MARL/img_50.png\" alt=\"img_50.png\"></p>\n<h4 id=\"平均场近似\"><a href=\"#平均场近似\" class=\"headerlink\" title=\"平均场近似\"></a>平均场近似</h4><p><img src=\"/../image/MARL/img_47.png\" alt=\"img_47.png\"></p>\n<p><img src=\"/../image/MARL/img_48.png\" alt=\"img_48.png\"></p>\n<p><img src=\"/../image/MARL/img_49.png\" alt=\"img_49.png\"></p>\n<h3 id=\"算法设计\"><a href=\"#算法设计\" class=\"headerlink\" title=\"算法设计\"></a>算法设计</h3><p>原文中将(7)通过参数化用神经网络进行拟合逼近，与DQN以及AC算法结合，分别给出了MF-Q与MF-AC算法。</p>\n<h4 id=\"MF-Q\"><a href=\"#MF-Q\" class=\"headerlink\" title=\"MF-Q\"></a>MF-Q</h4><p>通过神经网络拟合(7)式中的Q函数，使用如下所示的代价函数，与DQN中相同，为了减小拟合的Q值与真实Q值之间的误差<br><img src=\"/../image/MARL/img_51.png\" alt=\"img_51.png\"></p>\n<p>对上式求导可以得出参数梯度方向如下:<br><img src=\"/../image/MARL/img_52.png\" alt=\"img_52.png\"></p>\n<p>通过梯度下降法可以得到参数更新公式。</p>\n<p>算法流程：<br><img src=\"/../image/MARL/img_53.png\" alt=\"img_53.png\"></p>\n<h4 id=\"MF-AC\"><a href=\"#MF-AC\" class=\"headerlink\" title=\"MF-AC\"></a>MF-AC</h4><p>类似DPG，使用神经网络拟合一个策略替换玻尔兹曼机通过Q的到的策略，则得到了MF-AC算法。</p>\n<p>类似SPG，actor策略梯度公式可以写为：<br><img src=\"/../image/MARL/img_54.png\" alt=\"img_54.png\"></p>\n<p>critic类似于MF-Q的更新方式(9)</p>\n<p><img src=\"/../image/MARL/img_55.png\" alt=\"img_55.png\"></p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p><img src=\"/../image/MARL/img_56.png\" alt=\"img_56.png\"></p>\n<blockquote>\n<p>至此，MARL的入门已结束，后面会结合科研方向看论文想点子。</p>\n</blockquote>\n"},{"title":"测开面经","keywords":["面经"],"description":"测开面经","abbrlink":17768,"date":"2024-05-27T12:15:34.000Z","updated":"2024-05-27T12:58:53.000Z","top_img":"https://s2.loli.net/2024/05/27/BLZiDeVdQokmptg.png","comments":1,"cover":"https://s2.loli.net/2024/05/27/drCF3NnMKboz1AQ.png","toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"\nthis is a test file.\n","source":"_posts/测开面经.md","raw":"---\ntitle: 测开面经\ntags:\n  - 测试开发\n  - 面经\ncategories:\n  - 面经\nkeywords:\n  - 面经\ndescription: 测开面经\nabbrlink: 17768\ndate: 2024-05-27 20:15:34\nupdated: 2024-05-27 20:58:53\ntop_img: https://s2.loli.net/2024/05/27/BLZiDeVdQokmptg.png\ncomments:\ncover: https://s2.loli.net/2024/05/27/drCF3NnMKboz1AQ.png\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n---\n\nthis is a test file.\n","slug":"测开面经","published":1,"layout":"post","photos":[],"link":"","_id":"clx1l2pdw000wnfgn642i3cny","content":"<p>this is a test file.</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<p>this is a test file.</p>\n"},{"title":"强化学习","keywords":["强化学习"],"description":"强化学习的算法和思路总结","abbrlink":17762,"date":"2023-10-19T08:19:24.000Z","updated":"2023-10-30T09:03:11.000Z","top_img":"https://s2.loli.net/2024/02/06/T9HwPmcoaKpNXBY.png","comments":1,"cover":"https://s2.loli.net/2024/02/06/IUOjJBRnM3Zf1Pr.png","toc":null,"toc_number":null,"toc_style_simple":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"mathjax":null,"katex":null,"aplayer":null,"highlight_shrink":null,"aside":null,"abcjs":null,"_content":"\n> 之前没有深入和系统的学习过强化学习，最近由于科研刚需，上网查资料刚好看到知乎上面有个大佬的强化学习的系列文章，感觉写的很好，于是就把他的文章看了一遍，顺便做了一些笔记，这里记录一下。\n\n原文： https://zhuanlan.zhihu.com/p/111895463\n\n卧槽大佬讲的真的好，笔记记不了一点！！！建议大家都去看原文！\n\n后面可能会自己写一下 `MADDPG` 和 `MATD3` 的相关内容，到时候再更新。\n\n> 2023/10/23 这几天把大佬的强化学习专栏看了一遍了，真的很不错，但是我觉得还是得自己总结一下重难点，且这周五和东大的联合组会轮到我讲了，刚好深入理解一下强化学习算法。所以还是写一下这篇笔记吧！\n\n学习路线：\n![学习路线](../image/强化学习/学习路线.png)\n\n## 马尔可夫树\n\n强化学习的任务：\n- 我们希望用强化学习的方式，使某个**智能体**获得**独立自主**地完成某种任务的能力。 \n- 智能体学习和工作的地方，称为**环境**。\n- 所谓独立自主，就是智能体一旦启动，就不需要人指挥了。\n\n### 经典马尔可夫链\n![马尔科夫链.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E9%93%BE.png)\n\n- 状态(state)：智能体观察到的当前环境的部分或者全部特征。\n  - 注意：环境的特征可能有许多，但只有智能体能够观察到的特征才算是状态。所以也用observation表示状态。\n- 动作(action)：智能体做出的具体行为。\n  - **动作空间**就是该智能体能够做出的动作数量。智能体身处十字路口。那么我们的方向就有4个。也就是说，动作空间为4个动作。\n- 奖励(reward)：智能体在某个状态下采取某个动作所获得的反馈。\n  - 奖励是一个标量，可以是正数，也可以是负数。奖励越大，说明智能体做的越好。奖励越小，说明智能体做的越差。\n\n### RL一般步骤\n1. 智能体在环境中，观察到状态(S)；\n2. 状态(S)被输入到智能体，智能体经过计算，选择动作(A);\n3. 动作(A)使智能体进入另外一个状态(S)，并返回奖励(R)给智能体。\n4. 智能体根据返回，调整自己的策略。 重复以上步骤，一步一步创造马尔科夫链。\n\n### 马尔可夫树\n马尔科夫链之所以是我们现在看到的一条链条。是因为我们站在现在，往过去看，所以是一条确定的路径。但如果我们往前看，就并不是一条路径，而是充满了各种\"不确定性\"， 即\"马尔可夫树\"。\n\n![马尔科夫树.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E6%A0%91.png)\n\n这种\"不确定性\"来自两个方面： \n- 智能体的行动选择(策略)。\n- 环境的不确定性。\n\n## RL中的Q值和V值\n\n并不能单纯通过R来衡量一个动作的好坏，因为R只是一个瞬时的反馈，而我们需要的是长期的反馈。在做决策的时候，需要把眼光放远点，把未来的价值换到当前，才能做出选择。\n\n我们希望可以有一种方法评估我做出每种选择价值。这样，只要看一下标记，以后的事情也不用理，选择那个动作价值更大，就选那个动作就可以了。\n\n- 评估动作的价值称为**Q值**：它代表了智能体选择这个动作后，一直到最终状态奖励总和的期望。\n- 评估状态的价值称为**V值**：它代表了智能体在这个状态下，一直到最终状态的奖励总和的期望。\n\n价值越高，表示从当前状态到最终状态能获得的平均奖励将会越高。因为智能体的目标数是获取尽可能多的奖励，所以智能体在当前状态，只需要选择价值高的动作就可以了。\n\n### V值的定义\n\n![V值的定义.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FV%E5%80%BC%E7%9A%84%E5%AE%9A%E4%B9%89.png)\n\n假设现在需要求某状态S的V值，可以这样：\n\n1. 从S点出发，并影分身出若干个自己;\n2. 每个分身按照当前的策略 选择行为;\n3. 每个分身一直走到最终状态，并计算一路上获得的所有奖励总和;\n4. 计算每个影分身获得的平均值,这个平均值就是要求的V值。\n\n总结：`从某个状态，按照策略 ，走到最终状态很多很多次；最终获得奖励总和的平均值，就是V值。`\n\n`V值跟选择的策略有很大的关系` 。\n\n看这样一个简化的例子，从S出发，只有两种选择，A1，A2；从A1，A2只有一条路径到最终状态，获得总奖励分别为10和20。\n\n![例子1.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E4%BE%8B%E5%AD%901.png)\n\n![策略1.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%AD%96%E7%95%A51.png)\n\n![策略2.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%AD%96%E7%95%A52.png)\n\n可以看出不同的策略，计算出的V值是不一样的。\n\n### Q值的定义\n![Q值的定义.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FQ%E5%80%BC%E7%9A%84%E5%AE%9A%E4%B9%89.png)\n\n现在需要计算，某个状态S0下的一个动作A的Q值： \n1. 从A这个节点出发，使用影分身之术； \n2. 每个影分身走到最终状态,并记录所获得的奖励； \n3. 求取所有影分身获得奖励的平均值，这个平均值就是要求的Q值。\n\n总结：`从某个状态选取动作A，走到最终状态很多很多次；最终获得奖励总和的平均值，就是Q值。`\n\n与V值不同，Q值和策略并没有直接相关，而`与环境的状态转移概率相关，而环境的状态转移概率是不变的。`\n\n### V值和Q值关系\n`Q和V之间是可以相互换算的`。\n\n#### Q值转V值\n\n![Q值转V值.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FQ%E5%80%BC%E8%BD%ACV%E5%80%BC.png)\n\n从定义出发，我们要求的V值，就是从状态S出发，到最终获取的所获得的奖励总和的期望值。也就是蓝色框部分。\n\nS状态下有若干个动作，每个动作的Q值，就是从这个动作之后所获得的奖励总和的期望值。也就是红色框部分。\n\n假设已经计算出每个动作的Q值，那么在计算V值的时候就不需要一直走到最终状态了，只需要走到动作节点，看一下每个动作节点的Q值，根据策略 ，计算Q的期望就是V值了。\n\n![Q值转V值1.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FQ%E5%80%BC%E8%BD%ACV%E5%80%BC1.png)\n\n更正式的公式如下：\n![公式1.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E5%85%AC%E5%BC%8F1.png)\n\n解释：`一个状态的V值，就是这个状态下的所有动作的Q值，在策略下的期望。`\n\n#### V值转Q值\n\n`Q是V的期望。`而这里不需要关注策略，这里是环境的状态转移概率决定的。\n\n![V值转Q值.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FV%E5%80%BC%E8%BD%ACQ%E5%80%BC.png)\n\n`当选择A，并转移到新的状态时，就能获得奖励，我们必须把这个奖励也算上！`\n\n![V值转Q值1.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FV%E5%80%BC%E8%BD%ACQ%E5%80%BC1.png)\n\n更正式的公式如下：\n![公式2.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E5%85%AC%E5%BC%8F2.png)\n\n> 折扣率 在强化学习中，有某些参数是人为主观制定。这些参数并不能推导，但在实际应用中却能解决问题，所以我们称这些参数为超参数，而折扣率就是一个超参数。\n\n### V值转V值\n实际应用中，更多会从V到V。其实就是把Q值的公式代入V值的公式。\n\n![V值转V值.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FV%E5%80%BC%E8%BD%ACV%E5%80%BC.png)\n\n## MC\n蒙地卡罗方法(Monte-Carlo)\n\n### 蒙地卡罗算法\n\n1. 把智能体放到环境的任意状态；\n2. 从这个状态开始按照策略进行选择动作，并进入新的状态。\n3. 重复步骤2，直到最终状态；\n4. 从最终状态开始向前回溯：计算每个状态的G值。\n5. 重复1-4多次，然后平均每个状态的G值，这就是要求的V值。\n\n### G值的意义\n\n重要：`G值是一个具体的累积奖励值，而Q值和V值是对这个累积奖励值的估计。`\n\n![G值的意义.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FG%E5%80%BC%E7%9A%84%E6%84%8F%E4%B9%89.png)\n\n- 第一步，根据策略往前走，一直走到最后，期间什么都不用算，还需要记录每一个状态转移，获得多少奖励r即可。\n- 第二步，从终点往前走，一遍走一遍计算G值。G值等于上一个状态的G值(记作G'),乘以一定的折扣(gamma),再加上r。\n\n所以G值的意义在于，`在这一次游戏中，某个状态到最终状态的奖励总和(理解时可以忽略折扣值gamma)。`\n\n当进行多次试验后，有可能会经过某个状态多次，通过回溯，也会有多个G值。 重复刚才说的，每一个G值，就是每次到最终状态获得的奖励总和。`而V值是某个状态下，通过影分身到达最终状态，所有影分身获得的奖励的平均值。`\n\n理解：\n1. `G的意义：在某个路径上，状态S到最终状态的总收获。 `\n2. `V和G的关系：V是G的平均数。`\n\n### V和策略相关\n![策略3.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%AD%96%E7%95%A53.png)\n\n![策略4.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%AD%96%E7%95%A54.png)\n\n由于策略改变，经过某条路径的概率就会产生变化。因此最终试验经过的次数就不一样了。\n\n### 蒙地卡罗算法的缺点\n\n每一次游戏，都需要先从头走到尾，再进行回溯更新。如果最终状态很难达到，那可能每一次都要转很久很久才能更新一次G值。\n\n### MC的更新公式\n上面计算V值其实相当麻烦，因为每一个状态都需要建立一个空间，记录每个轨迹下的G值。\n\n那有没有一种方法，可以用更少的空间计算V值呢？当然有，那就是`增量更新`。\n\n#### 增量更新\n现在我们只需要记录之前的平均值V，新加进来的G，和次数N。我们把V和G的差，除以N，然后再加到原来的平均值V上，就能计算到新的V值。 \n\n`V_new = (V_old - G) * (1 / N) + V_old`\n\n- V_old：原来的V值\n- G：这一次回溯后，计算出来的G值\n- N: 这个状态被经过多少次\n- V_new：新计算出来的V值\n\n#### 更进一步\n\n这样计算还是比较麻烦，我们甚至可以不用记录N，把(1/N)设置成为一个固定的数，例如0.1、0.2(还记得超参数吗？)。我们把这个值称为`学习率`。\n\n这就相当于，我们新来的G和V_old的差的十分之一，会被加到V_new上！也就是说，每一次G都会引导V增加一些或者减少一些，而这个V值慢慢就会接近真正的V值。\n\n这里的G，也称为V的更新目标。\n\n而学习率就可以理解为，每次V向目标靠近的幅度；学习率越大，表示向G靠近的幅度越大，反之则越小。\n\n#### 两种理解方式\n\n![两种理解方式.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E4%B8%A4%E7%A7%8D%E7%90%86%E8%A7%A3%E6%96%B9%E5%BC%8F.png)\n\n## TD\n时序差分算法TD(Temporal-Difference)\n\n### TD和MC的比较\nTD算法对蒙地卡罗(MC)进行了改进：\n1. 和蒙地卡罗(MC)不同：`TD算法只需要走N步，不用走到终点，就可以开始回溯更新。` \n2. 和蒙地卡罗(MC)一样：需要先走N步，每经过一个状态，把奖励r记录下来。然后开始回溯。 \n3. 那么，状态的V值怎么算呢？其实和蒙地卡罗一样，就假设N步之后，就到达了最终状态了。\n   - 假设“最终状态”上之前没有走过，所以这个状态上的纸是空白的。这个时候我们就当这个状态为0. \n   - 假设“最终状态”上已经走过了，这个状态的V值，就是当前值。然后我们开始回溯。\n\n### 直观理解\n\n从A状态，经过1步，到B状态。什么都不管就当B状态是最终状态了。此时`N = 0`，也叫做`TD(0)`。\n\n但B状态本身就带有一定的价值，也就是V值。其意义就是从B状态到最终状态的总价值期望。\n\n![TD(0).png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FTD%280%29.png)\n\n假设B状态的V值是对的，那么，通过回溯计算，就能知道A状态的更新目标了。\n\n### 更新公式\n\nTD并走走完整段路程，而是半路就截断。用半路的路牌，更新当前的路牌。 `所以只需要把MC的更新目标，改为TD的更新目标即可。`\n\n`在MC，G是更新目标，而在TD，我们只不过把更新目标从G，改成r+gamma*V`\n\n![更新公式.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E6%9B%B4%E6%96%B0%E5%85%AC%E5%BC%8F.png)\n\n\n## Q-learning\n\n之前用TD(0)预估状态价值V:\n![TD(0)更新公式.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FTD%280%29%E6%9B%B4%E6%96%B0%E5%85%AC%E5%BC%8F.png)\n\n图解：\n![TD(0)图解.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FTD%280%29%E5%9B%BE%E8%A7%A3.png)\n\nTD能够用在V值，那么也能用在计算Q值上。\n\n### TD之于Q值估算\n\n现在用上TD的思路。 在St，智能体根据策略pi，选择动作At，进入S(t+1)状态，并获得奖励R。 \n![用TD估计Q值.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%94%A8TD%E4%BC%B0%E8%AE%A1Q%E5%80%BC.png)\n- V(St+1)的意义是，在St+1到最终状态获得的奖励期望值。 \n- Q(St,At)的意义是，在Q(St,At)到最终状态获得的奖励期望值。\n\n在这里要估算两个东西，一个是V值，一个是Q值。人们想到用下一个动作的Q值代替V值。\n![用下一个动作的Q代替V.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%94%A8%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%8A%A8%E4%BD%9C%E7%9A%84Q%E4%BB%A3%E6%9B%BFV.png)\n\n但是，这里就有个坑：`虽然从状态St+1到动作At+1之间没有奖励反馈，但还是不能直接用At+1的Q价值，代替St+1的V价值。`\n\n因为`马尔可夫树!`\n![坑的解释.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E5%9D%91%E7%9A%84%E8%A7%A3%E9%87%8A.png)\n\n`在St+1下，可能有很多动作At+1。不同动作的Q值自然是不同的。 所以Q(St+1,At+1)并不能等价于V(St+1)。`\n\n虽然不相等，但不代表不能用其中一个来代表V(St+1)。人们认为有个可能的动作产生的Q值能够一定程度代表V(St+1)。\n1. 在相同策略下产生的动作At+1。这就是`SARSA`。\n2. 选择能够产生最大Q值的动作At+1。这就是`Qlearning`。\n\n### SARSA\n\n![SARSA.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FSARSA.png)\n\n其实SARSA和上一篇说的TD估算V值几乎一模一样，只不过挪了一下，从V改成Q了。\n\n![SARSA公式.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FSARSA%E5%85%AC%E5%BC%8F.png)\n![TD(0)与SARSA对比.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FTD%280%29%E4%B8%8ESARSA%E5%AF%B9%E6%AF%94.png)\n\n注意: `这里的At+1是在同一策略产生的。也就是说,St选At的策略和St+1选At+1是同一个策略。这也是SARSA和Qlearning的唯一区别。`\n\n### Qlearning\n`Qlearning将能够产生最大Q值的动作At+1的Q值作为V(St+1)的替代。`\n\n![Qlearning图解.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FQlearning%E5%9B%BE%E8%A7%A3.png)\n\n理解：因为需要寻着的是能获得最多奖励的动作，Q值就代表能够获得今后奖励的期望值。所以选择Q值最大的，也只有最大Q值能够代表V值。\n![Qlearning公式.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FQlearning%E5%85%AC%E5%BC%8F.png)\n\n`Q(S,a)的更新目标`：在Qlearning，用下一状态St+1的最大Q值替代St+1的V值。V(St+1)加上状态转移产生的奖励R。\n\n![SARSA公式.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FSARSA%E5%85%AC%E5%BC%8F.png)\n\nQleanring和SARSA，两者的差别仅仅在Qlearning中多了个max。\n\n### 总结\n1. Qlearning和SARSA都是基于TD(0)的。不过在之前的介绍中，用TD(0)估算状态的V值。而Qlearning和SARSA估算的是动作的Q值。 \n2. Qlearning和SARSA的核心原理，是用下一个状态St+1的V值，估算Q值。 \n3. 既要估算Q值，又要估算V值会显得比较麻烦。所以用下一状态下的某一个动作的Q值，来代表St+1的V值。 \n4. Qlearning和SARSA唯一的不同，就是用什么动作的Q值替代St+1的V值。 \n   - SARSA 选择的是在St同一个策略产生的动作。 \n   - Qlearning 选择的是能够产生最大的Q值的动作。\n\n### Qlearning 实现\n\nTODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。\n\n## 深度神经网络\n\n深度强化学习：用深度神经网络辅助强化学习。\n\n#### 原理\n假如知道X，y有关系，那么不妨先设这个关系可以通过函数Magic(X)获得。也就是说Magic(X)=y。\n\n这在手写数字识别中，X就是需要识别的图片，y就是识别出来的数字分类。 我们的任务就是需要求这个Magic函数。\n![Magic(X).png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FMagic%28X%29.png)\n\n现在假设有另外一个函数Magic'(),这个函数是由深度神经网络构成。\n\n在刚开始的时候，很明显Magic'(X) 并不等于y，例如输入手写图片8，Magic'()计算后，认为数字8只有20%，但数字9有40%。\n\n...但这没所谓，因为这是刚开始。我们的任务是让Magic'(X)产生的结果y' 和 y尽量接近。\n\ny'和真实y之间的差距，叫损失，也就是loss。有时候也会把y称为目标(target)，因为任务就是让Magic'(X)越来越靠近这个目标。\n\n衡量loss的方法有很多，定义不同loss对神经网络学习有着重大差别，这个话题太大，我们暂时不展开。\n\nloss越大，表示和目标差距越远；loss越小，表示和目标越近，当小到一定值，那么就可以认为Magic'(X)和Magic(X)函数非常接近，可以通过Magic'(X)计算出y。\n\n当有许许多多这样的y，经过许许多多轮后。Magic'就越来越贴近Magic。也就是说X和y之间的关系就能越来越好地表达出来。\n\n![Magic'(X).png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FMagic%27%28X%29.png)\n\n#### 放大镜下的深度神经网络\n![数据加工厂.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%B7%A5%E5%8E%82.png)\n\n现在可以把深度神经网络的Magic函数，看成是一个数据加工厂。而X就是要进行加工的数据。\n\n为了让这个数据加工厂运行得更快，通常需要把要加工的数据X变得更`标准`一些。\n\n例如图片的尺寸大小，有多少通道的颜色等等，然后`分批(batch)`，输入工厂。\n\n在输入工厂的时候，会有一个‘大门’，称为`输入层`，去检查数据是否已经按照工厂的标准整理好。\n\n数据工厂里有很多车间，按照流水线排列。和一般的自动化车间一样，需要定义好这个车间的操作标准。\n\n一般称这些车间叫`层`。`这些层都已经封装好在tensorflow、tensorlayer、pytorch等里面了`。常用的层包括：`Dense、Conv2D、LSTM、Reshape、Flatten`等。\n\n最终，数据工厂会把原数据X，加工成产品`y'(也叫做：logits)`。从源数据加工成产品的过程，叫`正向传播`。\n\n但产品y'是否是一个合格的产品，我们还需要我们真正的`y(lables)`作为标准去鉴定。把`鉴定出来的差距就是loss`。\n\n工厂根据鉴定结果，以梯度下降的方式，反向传递给每个车间，告诉车间要如何调整各自的参数，让源数据和产出y'能够对应起来。\n\n经过N个批次（batch）的数据输入，然后鉴别，工厂调整。最后工厂就能达到生产标准了。也就是说magic函数已经被训练好了。\n\n\n## DQN\n> `DQN: TD + 神经网络`\n\n在Qlearning中，有一个Qtable，记录着在每一个状态下，各个动作的Q值。\n\nQtable的作用是当输入状态S，通过查表返回能够获得最大Q值的动作A。也就是需要找一个S-A的对应关系。\n\n这种方式很适合格子游戏。因为格子游戏中的每一个格子就是一个状态，但在现实生活中，很多状态并不是离散而是连续的。\n\n`用神经网络解决Qlearning中动作离散的问题，让动作变成连续的，这就是DQN。`\n\n`Deep network + Qlearning = DQN`\n\n神经网络万能函数(神经网络)Magic(X)接受输入一个状态S，它能告诉我，每个动作的Q值是怎样的。\n\n### 理解DQN中的神经网络\n\nQtable三维可视化：\n![Qtable三维可视化.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FQtable%E4%B8%89%E7%BB%B4%E5%8F%AF%E8%A7%86%E5%8C%96.png)\n\n图中每根柱子的高度，表示状态S下，选择动作A的Q值。\n\n`现在用函数来表示，相当于要扭曲一条曲线，这条曲线穿过了离散状态下的所有点。`\n\n![扭曲的曲线.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E6%89%AD%E6%9B%B2%E7%9A%84%E6%9B%B2%E7%BA%BF.png)\n\n从二维状态看：\n![二维曲线.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E4%BA%8C%E7%BB%B4%E6%9B%B2%E7%BA%BF.png)\n\n所以现在不但可以取状态3和状态4，还可以取状态3.5的Q值。\n\n现在就很清楚了，其实Qlearning和DQN并没有根本的区别。`只是DQN用神经网络，也就是一个函数替代了原来Qtable而已。`\n\n### 更新目标\n\n更新目标就是Magic(X)，最终要向这个Magix(X)靠近。\n\n在Qlearning，用下一状态St+1的最大Q值替代St+1的V值。V(St+1)加上状态转移产生的奖励R。就是Q(S,a)的更新目标。\n\nDQN和Qlearning一样：\n![DQN.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FDQN.png)\n假设需要更新当前状态St下的某动作A的Q值：Q(S,A),可以这样做： \n1. 执行A，往前一步，到达St+1; \n2. 把St+1输入Q网络，计算St+1下所有动作的Q值； \n3. 获得最大的Q值加上奖励R作为更新目标； \n4. 计算损失 \n   - Q(S,A)相当于有监督学习中的logits\n   - maxQ(St+1) + R 相当于有监督学习中的lables \n   - 用mse函数，得出两者的loss \n   - Loss = (Q(S, A) - [gamma * maxQ(St+1) + R])^2\n5. 用loss更新Q网络。(反向传播)\n\n> 通常会使用一个折扣因子 gamma 来考虑未来奖励的重要性。折扣因子 gamma 的作用是对未来奖励进行衰减，使得当前时刻的奖励比未来时刻的奖励更具有影响力。\n\n也就是，用Q网络估算出来的两个相邻状态的Q值，他们之间的距离，就是一个r的距离。这个就是更新目标\n`Target = R + gamma * maxQ(St+1)`\n\n![DQN公式.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FDQN%E5%85%AC%E5%BC%8F.png)\n\n总结：\n1. 其实DQN就是Qlearning扔掉Qtable，换上深度神经网络。\n2. 解决连续型问题，如果表格不能表示，就用函数，而最好的函数就是深度神经网络。\n3. 和有监督学习不同，深度强化学习中，需要自己找更新目标。通常在马尔科夫链体系下，两个相邻状态状态差一个奖励r经常能够作为更新目标。\n\n### DQN 实现\n\nTODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。\n\n## Double DQN\n\n### 经验回放\n经验回放解决了强化学习中的两个问题： `训练网络数据采集慢` 和 `过度拟合`\n\n\n当然这个慢是对比网络训练的速度。在强化学习中，网络训练经过GPU的加速，比起游戏来时快很多的。所以训练的瓶颈一般在智能体跟环境互动的过程中。 如果能把互动过程中的数据，都存起来，当数据最够多的时候，再训练网络，那么就快很多了。\n\n把每一步的s，选择的a，进入新的状态s'，获得的奖励r，新状态是否为终止状态。都存在一个叫回放缓存的地方(replay buffer)。\n当智能体与环境互动期间，就会不断产生这样一条一条数据。 数据1： 数据2： 数据3： ....\n当数据量足够，达到设定一个batch的大小，便从中抽出一个batch大小的数据，把这笔数据一起放入网络进行训练。\n训练之后继续进行游戏，继续把新产生的数据添加到回放缓存里...\n就这样每次都随机抽出一个batch大小的数据训练智能体。这样，以前产生的数据同样也能用来训练数据了, 效率自然更高。\n\n使用经验回放除了使训练更高效，同时也减少了训练产生的过度拟合的问题。\n过度拟合，放到人身上就是`过度依赖局部经验`了。\n就像孩子发现爸爸有胡子，就认为所有男人都有胡子一样。\n同样，在有监督学习中，如果只给模型看少量的几张图，并且告诉模型这是猫。这样模型就只会从这几张图学习到猫的特点，而更多的猫模型可能就不认得了。我们说这就是过度拟合造成的，导致模型不够健壮。\n\n\n\n\n### DQN的问题\nDQN的目标：\n`Target = R + gamma * maxQ(St+1)`\n\n目标本身就包含一个Q网络，理论上是没有问题的，但，这样会造成Q网络的学习效率比较低，而且不稳定。\n\n如果把训练神经网络比喻成射击游戏，在target中有Q网络的话，就相当于在射击一个移动靶，因为每次射击一次，靶就会挪动一次。相比起固定的靶，无疑加上了训练的难度。\n\n要解决这个问题，就把移动靶弄成是固定的靶，先停止10秒。10后挪动靶再打新的靶。这就是`Fixed Q-targets`的思路。\n\n### Fixed Q-targets\n\n![fix-Q-targets.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2Ffix-Q-targets.png)\n\n其他地方和DQN一样，唯一不同是用了两个Q网络。\n\n- 原来的Q网络，用于估算Q(s);\n- targetQ网络, targetQ自己并不会更新，也就是它在更新的过程中是固定的，用于计算更新目标。\n  - `y = r + gamma * max(targetQ(s'))`\n  - 进行N次更新后，就把新Q网络的参数赋值给旧Q网络，保持训练的稳定性。\n\n### Double DQN\n\nDQN有一个显著的问题，就是DQN估计的Q值往往会偏大。这是由于Q值是以下一个s'的Q值的最大值来估算的，但下一个state的Q值也是一个估算值，也依赖它的下一个state的Q值...，这就导致了Q值往往会有偏大的的情况出现。\n\n这个思路也很直观。如果只有一个Q网络，Q值的估计往往偏大。那就用两个Q网络，因为两个Q网络的参数有差别，所以对于同一个动作的评估也会有少许不同。选取评估出来较小的值来计算更新目标。这样就能有效避免Q网络估值偏大的情况发生了。\n\n另外一种做法也需要用到两个Q网络：Q1网络推荐能够获得最大Q值的动作；Q2网络计算这个动作在Q2网络中的Q值。\n\n\n### Double DQN 实现\n\nTODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。\n\n## Duel DQN\n\n### Dueling DQN原理\n回到Qtable， 原来会直接预估Q值表的数据，现在改为需要预估两个值：S值和A值。即`Q = S + A`\n- S: 在特定状态下采取任何行动的平均价值,也就是该state下的Q值的平均数。\n- A: 在特定状态下采取特定动作相对于采取平均动作的优势。A的平均值为0。\n\n![Q=S+A表格.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FQ%3DS%2BA%E8%A1%A8%E6%A0%BC.png)\n\n普通DQN的Q网络，可以理解用一个曲线去拟合Qtable的Q值。现在取一个截面，表示当取某个S下，各个动作的Q值。\n\n![普通DQN.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E6%99%AE%E9%80%9ADQN.png)\n\n普通DQN在提升某个状态下的S值时，只会提升某个动作。\n\nDueling DQN： 在网络更新的时候，由于有A值之和必须为0的限制，所以网络会优先更新S值。S值是Q值的平均数，平均数的调整相当于一次性S下的所有Q值都更新一遍。\n\n![DuelDQN.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FDuelDQN.png)\n\n如上图，橙色虚线是平均值，也就是S值。 所以网络在更新的时候，不但更新某个动作的Q值，而是把这个状态下，所有动作的Q值都调整一次。这样，就可以在更少的次数让更多的值进行更新。\n\n> 这样调整最后的数值是对的吗？放心，在DuelingDQN，我们只是优先调整S值。但最终我们的target目标是没有变的，所以我们最后更新出来也是对的。\n\n### 网络架构\n![DuelDQN网络架构.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FDuelDQN%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84.png)\n\n可以把dueling DQN分为三部分：\n- 第一部分：和普通DQN一样，用来处理和学习数据。\n- 第二部分：计算svalue，就是让网络预估的平均值。\n- 第三部分：计算avalue，和svalue一样，都是从h2层输入到该层。然后对avalue进行归一化处理，也就是增加“A值的平均值为0”的限制。\n  - 归一化的处理很简单，求A值的平均值，然后用A值减去平均值即可。A-mean(A)\n\nDeulingDQN的实现很简单，只需要修改Q网络的网络架构就可以了。而且可以和其他DQN的技巧，例如经验回放，固定网络，双网络计算目标等可以共用。\n\n### Duel DQN 实现\n\nTODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。\n\n## PG\n策略梯度(Policy Gradient)\n\n之前的MC、TD、Qlearning、DQN都是基于值的方法，就是一定要算Q值和V值。但事实上我们的最终目的是要找一个策略，能获得最多的奖励。\n\n这就是`策略梯度(Policy Gradient)`\n\n### PG原理\n\n认识到：\n> `DQN: TD + 神经网络`\n> `PG: MC + 神经网络`\n\nPG中的Magic(state):\n当输入state的时候，输出pi，告诉智能体这个状态，应该如何应对： = magic(state)。如果智能体的动作是对的，那么就让这个动作获得更多被选择的几率；相反，如果这个动作是错的，那么这个动作被选择的几率将会减少。\n\n复习一下蒙地卡罗：\n从某个state出发，然后一直走，直到`最终状态`。然后从最终状态原路返回，对每个状态评估G值。 所以G值能够表示在策略下，智能体选择的这条路径的好坏。\n![复习MC.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E5%A4%8D%E4%B9%A0MC.png)\n\n### 直观感受PG\n\n从某个state出发，可以采取三个动作。 假设当前智能体对这一无所知，那么，可能采取平均策略 Pi0 = [33%,33%,33%]。智能体出发，选择动作A，到达最终状态后开始回溯，计算得到 G = 1。\n\n![直观感受PG1.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%9B%B4%E8%A7%82%E6%84%9F%E5%8F%97PG1.png)\n\n更新策略，因为该路径选择了A而产生的，并获得G = 1；因此要更新策略：让A的概率提升，相对地，BC的概率就会降低。 计算得新策略为： Pi1 = [50%,25%,25%]。虽然B概率比较低，但仍然有可能被选中。第二轮刚好选中B。智能体选择了B，到达最终状态后回溯，计算得到 G = -1。\n\n![直观感受PG2.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%9B%B4%E8%A7%82%E6%84%9F%E5%8F%97PG2.png)\n\n此时对B动作的评价比较低，并且希望以后会少点选择B，因此要降低B选择的概率，而相对地，AC的选择将会提高。计算得新策略为： Pi2 = [55%,15%,30%]。最后随机到C，回溯计算后，计算得G = 5。\n\n![直观感受PG3.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%9B%B4%E8%A7%82%E6%84%9F%E5%8F%97PG3.png)\n\nC比A还要多得多。因此这一次更新，C的概率需要大幅提升，相对地，AB概率降低。 Pi3 = [20%,5%,75%]。\n\n### PG 实现\n\nTODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。\n\n## AC\n> `AC: PG + DQN(TD + 神经网络)`\n\nPG利用带权重的梯度下降方法更新策略，而获得权重的方法是MC计算G值。MC需要完成整个游戏过程，直到最终状态，才能通过回溯计算G值。这使得PG方法的效率被限制。\n\n改为TD可以解决上面的问题。接下来又面临另一个问题：\n在PG，我们需要计算G值；那么在TD中，我们应该怎样估算每一步的Q值呢？答案是用神经网络。\n\n也就是说，Actor-Critic，其实是用了两个网络：\n\n两网络都输入状态S，Critic比Actor多一个St+1: \n- 一个网络输出策略，负责选择动作，把这个网络成为Actor； \n- 一个网络负责计算每个动作的分数，把这个网络成为Critic。\n\n### TD-error\n`在DQN预估的是Q值，在AC中的Critic，估算的是V值。`不估算Q值是因为效果不好。\n![为什么不估算Q.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E4%BC%B0%E7%AE%97Q.png)\n\n假设用Critic网络，预估到S状态下三个动作A1，A2，A3的Q值分别为1,2,10。 但在开始的时候，采用平均策略，于是随机到A1。于是用策略梯度的带权重方法更新策略，这里的权重就是Q值。于是策略会更倾向于选择A1，意味着更大概率选择A1。结果A1的概率就持续升高...\n\n这就掉进了正数陷阱。明明希望A3能够获得更多的机会，最后却是A1获得最多的机会。这是为什么呢？\n因为Q值用于是一个正数，如果权重是一个正数，那么相当于提高对应动作的选择的概率。权重越大，调整的幅度将会越大。其实当有足够的迭代次数，这个是不用担心这个问题的。因为总会有机会抽中到权重更大的动作，因为权重比较大，抽中一次就能提高很高的概率。\n\n但在强化学习中，往往没有足够的时间去和环境互动。这就会出现由于运气不好，使得一个很好的动作没有被采样到的情况发生。要解决这个问题，可以通过减去一个baseline，令到权重有正有负。而通常这个baseline，选取的是权重的平均值。减去平均值之后，值就变成有正有负了。而`Q值的期望(均值)就是V。`\n\n![TD-error.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FTD-error.png)\n\n可以得到更新的权重：`Q(s,a)-V(s)`，Q(s,a)用`gamma * V(s') + r` 代替。\n得到TD-error：`TD-error = gamma * V(s') + r - V(s)`\n\n和之前DQN的更新公式非常像，只不过DQN的更新用了Q，而TD-error用的是V。如果Critic是用来预估V值，而不是原来讨论的Q值。那么，这个TD-error是用来更新Critic的loss了！没错，Critic的任务就是让TD-error尽量小。然后TD-error给Actor做更新。\n\n至于为啥TD-error是用来更新Critic的loss呢？\n取TD-error的方差来作为critic的loss，其实类似于DQN中的Q网络，认为下个状态的估算值比目前状态的Q值更精确，所以把下个状态的估算值作为目标，来更新Q网络。此处单看critic网络吗，其目的仅在于预测V值，所以它的估算值也要向更准确的下个阶段估算值来靠近，即TD-error越来越小。\n再来看actor网络，TD-error在其中的作用仅是更新网络时的权重，其与动作的选择并无直接关系。前期TD-error较大，每次更新时，动作的概率都会进行相对较大的改动，随着不断地训练，动作的概率逐渐成熟，TD-error越来越小，所以每次更新时对动作概率的改动也随之减小。\n\n#### 总结\n1. 为了避免正数陷阱，希望Actor的更新权重有正有负。因此，把Q值减去他们的均值V。有：`Q(s,a)-V(s)`\n2. 为了避免需要预估V值和Q值，把Q和V统一；由于`Q(s,a) = gamma * V(s') + r - V(s)`。所以我们得到TD-error公式： `TD-error = gamma * V(s') + r - V(s)`\n3. `TD-error就是Actor更新策略时候，带权重更新中的权重值`；\n4. 现在Critic不再需要预估Q，而是预估V。而根据马可洛夫链所学，知道TD-error就是Critic网络需要的loss，也就是说，Critic函数需要最小化TD-error。\n\n### 算法\n1. 定义两个network：Actor 和 Critic\n2. 进行N次更新。\n    1. 从状态s开始，执行动作a，得到奖励r，进入状态s'\n    2. 记录的数据。\n    3. 把输入到Critic，根据公式： TD-error = gamma * V(s') + r - V(s) 求 TD-error，并缩小TD-error\n    4. 把输入到Actor，计算策略分布。\n\n![AC算法.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FAC%E7%AE%97%E6%B3%95.png)\n\n可以看出：在PG，智能体需要从头一直跑到尾，直到最终状态才开始进行学习。 在AC，智能体采用是每步更新的方式。\n\n### AC 实现\n\nTODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。\n\n## PPO\nPPO是基于AC框架的\n\n### 正态分布\n首先要想办法处理连续动作的输出问题。\n\n- 离散动作：离散动作就像一个个的按钮，按一个按钮就能智能体就做一个动作。\n- 连续动作：相当于按钮不但有开关的概念，而且还有力度大小的概念。就像开车，不但是前进后退转弯，并且要控制油门踩多深，刹车踩多少的，转弯时候转向转多少的问题。\n\n在离散动作空间的问题中，最终输出的策略呈现出下面形式：\n![离散动作-策略分布.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%A6%BB%E6%95%A3%E5%8A%A8%E4%BD%9C-%E7%AD%96%E7%95%A5%E5%88%86%E5%B8%83.png)\n\n假设动作空间有只有action1 和 action2，有40%的概率选择action1 ，60%概率选择action2。即在此状态下的策略分布: pi = [0.4, 0.6]。\n![连续型概率分布示意图.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E8%BF%9E%E7%BB%AD%E5%9E%8B%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n在连续型，不再用数组表示，而是用函数表示。例如，策略分布函数 ： P = （action）代表在策略下，选择某个action的概率P。\n\n用神经网络预测输出的策略是一个固定的shape，而不是连续的。那又什么办法可以表示连续型的概率呢？可以假定策略分布函数服从一个概率分布，例如正态分布。\n\n这样，只用两个参数就可以表示了。\n![正态分布.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83.png)\n\n正态分布：\n- sigma：表示方差，当sigma越大，图像越扁平；sigma约小，图像越突出。而最大值所在的位置，就是中轴线。\n- mu：表示平均数，也就是整个正态分布的中轴线。mu的变化，表示整个图像向左右移动。\n\n神经网络直接输出mu和sigma，就能获得整个策略的概率密度函数了。现在，当要按概率选择一个动作时，就只需要按照这个概率密度函数，随机抽取一个数，就能得到一个动作了。\n\n### AC的问题\n\n上面的正态分布解决了AC处理连续状态空间的问题。但是，AC还有一个问题：AC产生的数据，只能进行1次更新，更新完就只能丢掉，等待下一次的数据。\n\n- 行为策略：行为策略是代理在与环境交互时采取行动的策略。它决定了代理在当前状态下选择每一个可能的行动的概率分布。不是当前策略，用于产出数据。\n- 目标策略：目标策略是代理在训练过程中试图优化的策略。它是代理最终想要学习到的最优策略，它通常被设计为最大化期望累积奖励。会更新的策略，是需要被优化的策略。\n\n- 在线策略：在线策略是指在与环境交互时实时地采取行动，并根据实时的反馈来更新策略。也就是说，代理在与环境互动时，采取行动并根据实际结果来调整策略。目标策略和行为策略是同一个策略，那么是在线策略。\n  - 实时更新：在线策略会根据每次与环境交互的结果来进行即时更新。\n  - 依赖实时反馈：在线策略依赖于实时的环境反馈来进行学习和调整。\n- 离线策略：离线策略是指在事先收集好的数据集上进行训练，而不需要实时地与环境交互。也就是说，代理使用事先收集的经验数据来训练策略，而不依赖于实时环境反馈。目标策略和行为策略不是同一个策略，那么是离线策略。\n  - 离线数据：训练过程中不需要实时地与环境进行交互，可以使用先前收集的数据。\n  - 无需环境互动：训练过程中不需要实时环境反馈。\n\n例子：\n如果在智能体和环境进行互动时产生的数据打上一个标记。标记这是第几版本的策略产生的数据,例如 1， 2... 10。现在智能体用的策略 10，需要更新到 11。如果算法只能用 10版本的产生的数据来更新，那么这个就是在线策略；如果算法允许用其他版本的数据来更新，那么就是离线策略。\n\n例如PG，就是一个在线策略。因为PG用于产生数据的策略（行为策略），和需要更新的策略（目标策略）是一致。 而DQN则是一个离线策略。我们会让智能体在环境互动一定次数，获得数据。用这些数据优化策略后，继续跑新的数据。但老版本的数据仍然是可以用的。也就是说，产生数据的策略，和要更新的目标策略不是同一个策略。所以DQN是一个离线策略。\n\n\n**为什么PG和AC中的Actor更新策略，不能像DQN一样把数据存起来，只能用一次产生的数据？**\n\n看一个例子：\n![策略P和策略B.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%AD%96%E7%95%A5P%E5%92%8C%E7%AD%96%E7%95%A5B.png)\n\n> TD-error 可以理解为从状态S 到下一个状态动作的价值，所以动作1的 TD-error 大，所以希望选择动作1的概率大\n\n假设，已知在同一个环境下，有两个动作可以选择。现在两个策略，分别是P和B： P: [0.5,0.5] B: [0.1,0.9]\n\n现在按照两个策略，进行采样；也就是分别按照这两个策略，以S状态下出发，与环境进行10次互动。获得如图数据。那么，可以用B策略下获得的数据，更新P吗？\n\n答案是不行，回顾PG算法，`PG算法会按照TD-error作为权重，更新策略。权重越大，更新幅度越大；权重越小，更新幅度越小。`\n\n但可以从如下示意图看到，如果用行动策略B[0.1,0.9]产出的数据，对目标策略P进行更新，动作1会被更新1次，而动作2会更新9次。虽然动作1的TD-error比较大，但由于动作2更新的次数更多，最终动作2的概率会比动作1的要大。\n\n![策略P和策略B更新示意图.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%AD%96%E7%95%A5P%E5%92%8C%E7%AD%96%E7%95%A5B%E6%9B%B4%E6%96%B0%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n这不是期望看到的更新结果，因为动作1的TD-error比动作2要大，希望的是选择概率动作1的能更多。由此可以明白，在策略更新的时候不能使用其他策略产生的数据。\n\n**为什么DQN可以多次重复使用数据？**\n\n![DQN更新的是Q值.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FDQN%E6%9B%B4%E6%96%B0%E7%9A%84%E6%98%AFQ%E5%80%BC.png)\n\n两个角度：\n- 更新Q值，和策略无关。 在同一个动作出发，可能会通往不同的state，但其中的概率是状态转移概率决定的，与环境有关，而不是策略所决定的。所以产生的数据和策略并没有关系。\n- 在DQN的更新中是有\"目标\"的。 虽然目标比较飘忽，但每次更新，其实都是尽量向目标靠近。无论更新多少次，最终都会在目标附近徘徊。但PG算法，更新是不断远离原来的策略分布的，所以远离多少、远离的次数比例都必须把握好。\n\n> 在Actor-Critic (AC) 方法中，Critic 网络更新的是状态值函数（Value Function）V，而不是动作值函数（Q函数）。\n\n### 重要性采样技术\n\n在PPO中，如果想使用策略B的数据来更新策略P，那就要把TD-error乘上一个重要性权重(importance weight)。\n\n在这里`IW = P（a）/ B（a）`\n\n就是 `IW = 目标策略出现动作a的概率 / 行为策略出现a的概率`。\n- 目标策略：要更新的策略。\n- 行为策略：数据的策略。\n\n这里是用策略B的数据来更新策略P，所以P是目标策略，B是行为策略。\n![重要性权重表格.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E9%87%8D%E8%A6%81%E6%80%A7%E6%9D%83%E9%87%8D%E8%A1%A8%E6%A0%BC.png)\n\n现在即使用P策略: [0.5,0.5]进行更新，a1提升的概率也会比a2的更多。\n\nPPO使用重要性采样技术把AC从在线策略变成离线策略。\n\n### N步更新\n\n之前的TD叫做TD(0)，而N步更新为TD(n)。可以看成TD(0)其实是TD(n)的一种特殊情况。\n\n![TD(N).png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FTD%28N%29.png)\n\n如图，实际上只需要计算最后的V(s')，根据这个估算的V(s'), 反推经过的所有state的V值。这个其实和PG估算G的过程是一样的，只不过并不需要走到最后，而是中途截断，用网络估算。\n\n`V = R + gamma * V(s')`\n\n\n### 总结\n实际上，P策略和B策略差异并不能太大，为了能处理这个问题，有两个做法，PPO1 和 PPO2 。主流是PPO2。\n\n1. 用AC来解决连续型控制问题。方法是输入mu和sigma，构造一个正态分布来表示策略； \n2. PPO延展了TD(0)，变成TD(N)的N步更新； \n3. AC是一个在线算法，但为了增加AC的效率，希望把它变成一个离线策略，这样就可以多次使用数据了。为了解决这个问题，PPO使用了重要性采样。\n\n### PPO 实现\nTODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。\n\n## DDPG\nDDPG，全称是deep deterministic policy gradient，深度确定性策略梯度算法。\n\n- deep: 深度网络。\n- policy gradient: PG\n- deterministic: 其实DDPG也是解决连续控制型问题的的一个算法，不过和PPO不一样，PPO输出的是一个策略，也就是一个概率分布，而DDPG输出的直接是一个动作。\n\nDDPG更接近DQN，是用一个actor去弥补DQN不能处理连续控制性问题的缺点。\n\n\n### 回顾DQN\n\n![回顾DQN.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E5%9B%9E%E9%A1%BEDQN.png)\n\n从公式中也能看出，DQN不能用于连续控制问题原因，是因为maxQ(s',a')函数只能处理离散型的。这个就是DDPG中的Actor的功能: 用一个magic函数，直接替代maxQ(s',a')的功能。也就是说，期待输入状态s，magic函数返回我们动作action的取值，这个取值能够让q值最大。\n\n### 理解DDPG\nDDPG中Critic的功能，像是DQN的深度网络，用一张布去覆盖Qlearning中的Qtable。\n![理解DDPG1.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%90%86%E8%A7%A3DDPG1.png)\n\n当把某个state输入到DDPG的Actor中的时候，相当于在这块布上做沿着state所在的位置剪开，会看到这个边缘是一条曲线。\n![理解DDPG2.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%90%86%E8%A7%A3DDPG2.png)\n\n> 注意: 这条曲线很像概率分布，但要一定注意，这里并不是策略，也不是PPO和AC中的V值。是在某个状态state下，选择某个动作值的时候，能获得的Q值。\n\nActor的任务就是在寻找这个曲线的最高点，然后返回能获得这个最高点，也是最大Q值的动作。 所以，DDPG其实并不是PG，并没有做带权重的梯度更新。而是在梯度上升，在寻找最大值。 这也就解释了，为什么DDPG是一个离线策略，但可以多次更新却不用importance sampling。这是因为这个算法就是DQN，和策略没有直接的关系。\n\n### DDPG\n\n![DDPG1.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FDDPG1.png)\n\n整理下：\n#### Critic\n1. Critic网络的作用是预估Q，虽然它还叫Critic，但和AC中的Critic不一样，这里预估的是Q不是V；\n2. 注意Critic的输入有两个：动作和状态，需要一起输入到Critic中；\n3. Critic网络的loss其还是和AC一样，用的是TD-error。\n\n#### Actor\n1. 和AC不同，Actor输出的是一个动作；\n2. Actor的功能是，输出一个动作A，这个动作A输入到Critic后，能够获得最大的Q值。\n3. Actor的更新方式和AC不同，不是用带权重梯度更新，而是用梯度上升。\n\n和DQN一样，DDPG更新的时候如果更新目标在不断变动，会造成更新困难。所以DDPG和DQN一样，用了固定网络(fix network)技术，就是先冻结住用来求target的网络。在更新之后，再把参数赋值到target网络。\n\n所以实际做的时候使用了4个网络：actor, critic, Actor_target, cirtic_target。\n\n![DDPG2.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FDDPG2.png)\n\n> 目标网络只是用在求target的过程中。如果不是求target用的，就不用目标网络。\n\n### DDPG 实现\nTODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。\n\n\n\n\n## TD3\nTwin Delayed Deep Deterministic policy gradient algorithm，双延迟深度确定性策略梯度\n\nTD3是对DDPG的优化，三个重要优化。\n\n### double network\n\nDDPG起源于DQN，DQN有一个众所周知的问题就是Q值会被过高估计。这是因为用argmaxQ(s')去代替V(s')，去评估Q(s)。当每一步都这样做的时候，很容易就会出现高估Q值的情况。\n\n在TD3中，用了两套网络估算Q值，相对较小的那个作为更新的目标。这就是TD3的基本思路。\n\n回顾DDPG：\n![DDPG2.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FDDPG2.png)\n\n通过Critic网络估算动作的A值。一个Critic的评估可能会较高。所以加一个。\n\nTD3需要用到6个网络：\n![TD3.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FTD3.png)\n\n在目标网络中，估算出来的Q值会用min()函数求出较小值。以这个值作为更新的目标。这个目标会更新两个网络 Critic网络_1 和 Critic网络_2。 这两个网络是完全独立，他们只是都用同一个目标进行更新。 剩余的就和DDPG一样了。过一段时间，把学习好的网络赋值给目标网络。\n\n#### Critic部分的学习\n只有在计算Critic的更新目标时，才用target network。其中就包括了一个Policy network，用于计算A'；两个critic target Q network ,用于计算两个Q值：Q1(A') 和Q2(A')。\n\nQ1(A') 和Q2(A') 取最小值 min(Q1,Q2) 将代替DDPG的 Q(a') 计算更新目标，也就是说： target = min(Q1,Q2) * gamma + r\n\ntarget 将会是 Q_network_1 和 Q_network_2 两个网络的更新目标。\n\n`TD-error_1 = gamma * min(Q1,Q2) + r - Q1`\n`TD-error_2 = gamma * min(Q1,Q2) + r - Q2`\n\n既然更新目标是一样的，那么为什么还需要两个网络呢?\n\n虽然更新目标一样，两个网络会越来越趋近与和实际q值相同。但由于网络参数的初始值不一样，会导致计算出来的值有所不同。所以可以有空间选择较小的值去估算q值，避免q值被高估。\n\n\n#### Actor部分的学习\n\nDDPG网络图像上就可以想象成一张布，覆盖在qtable上。当输入某个状态的时候，相当于这块布上的一个截面，能够看到在这个状态下的一条曲线。\n\n而actor的任务，就是用梯度上升的方法，寻着这条线的最高点。\n\n对于actor来说，其实并不在乎Q值是否会被高估，他的任务只是不断做梯度上升，寻找这条最大的Q值。随着更新的进行Q1和Q2两个网络，将会变得越来越像。所以用Q1还是Q2，还是两者都用，对于actor的问题不大。\n\n### actor延迟更新\n\nactor更新的delay，也就是说相对于critic可以更新多次后，actor再进行更新。\n\n为什么要这样做呢？\n\n回到qnet拟合出来的那块\"布\"上。 qnet在学习过程中，的q值是不断变化的，也就是说这块布是不断变形的。所以要寻着最高点的任务有时候就挺难为的actor了。\n![理解DDPG1.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%90%86%E8%A7%A3DDPG1.png)\n![理解DDPG2.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%90%86%E8%A7%A3DDPG2.png)\n\n可以想象，本来是最高点的，当actor好不容易去到最高点；q值更新了，这并不是最高点。这时候actor只能转头再继续寻找新的最高点。更坏的情况可能是actor被困在次高点，没有找到正确的最高点。\n\n所以可以把Critic的更新频率，调的比Actor要高一点。让critic更加确定，actor再行动。\n\n### target网络噪声\n\nTD3中，价值函数的更新目标每次都在action上加一个小扰动，这个操作就是target policy smoothing regularization\n\n为什么要这样呢？\n\n回到关于“布”的想象。 在DDPG中，计算target的时候，输入时s_和a_，获得q，也就是这块布上的一点A。通过估算target估算另外一点s，a，也就是布上的另外一点B的Q值。\n![Q'估算Q 1.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FQ%27%E4%BC%B0%E7%AE%97Q%201.png)\n\n在TD3中，计算target时候，输入s_到actor输出a后，给a加上噪音，让a在一定范围内随机。这又什么好处呢。\n\n好处就是，当更新多次的时候，就相当于用A点附近的一小部分范围（准确来说是在s_这条线上的一定范围）的去估算B，这样可以让B点的估计更准确，更健壮。\n![Q'估计Q 2.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FQ%27%E4%BC%B0%E8%AE%A1Q%202.png)\n\n这里注意三个地方：\n1. 在实验中，同样加上了了noise。这个时候的noise是为了更充分地开发整个游戏空间。\n2. 计算target的时候，actor加上noise，是为了预估更准确，网络更有健壮性。\n3. 更新actor的时候，不需要加上noise，这里是希望actor能够寻着最大值。加上noise并没有任何意义。\n\n### TD3 实现\nTODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。\n\n这里的TD3仅针对自己的实验平台实现了类似于MATD3的效果，但是实际上，没有明确的MATD3。后面再考虑在gym上实现以加深理解。\n\n\n\n## A3C\n强化学习的一个难点，智能体的用于学习的数据，需要智能体和环境不断进行交互。和一般有监督学习的先比，数据数量太少了。\n\n在算法没有更大进步的时候，有人就想出，如果有多个智能体和环境进行互动，那么每个智能体都能产出数据，这些数据就可以一起给模型进行学习了。\n\n由此诞生了A3C。\n\n![A3C.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FA3C.png)\n\n注意几点：\n1. 在A3C中，worker不仅要和环境互动，产生数据，而且要自己从这些数据里面学习到“心得”。这里的所谓新的，其实就是计算出来的梯度；需要强调的是，worker向全局网络汇总的是梯度，而不是自己探索出来的数据。\n> 在这一点上，很容易和DPPO混淆。DPPO和A3C，也是一个分布式的架构，但work自己并不学习，而是提交数据让全局网络学习。\n2. worker向全局网络汇总梯度之后，并应用在全局网络的参数后，全局网络会把当前学习到的最新版本的参数，直接给worker。worker按照最新的网络继续跟环境做互动。互动后，再把梯度提交，获取新的参数...... 如此循环。\n\n![A3C1.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FA3C1.png)\n\n### A3C 实现\nTODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。\n\n\n## DPPO\n\nDPPO和A3C的思路其实是一致的，希望用多个智能体同时和环境互动，并对全局的PPO网络进行更新。\n\n在A3C，需要跑数据并且计算好梯度，再更新全局网络。这是因为AC是一个在线的算法，所以在更新的时候，产生数据的策略和更新的策略需要时同一个网络。所以不能把worker产出的数据，直接给全局网络计算梯度用。\n\n但PPO解决了离线更新策略的问题，所以DPPO的工人只需要提供数据给全局网络，由全局网络从数据中直接学习。\n\n### DPPO 实现\nTODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。\n\n\n## 写在最后\n\n到这里，传统强化学习的总结就结束了，后面由于我的科研方向是`多智能体强化学习`，会更新关于多智能体强化学习的算法。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","source":"_posts/强化学习.md","raw":"---\ntitle: 强化学习\ntags:\n  - 强化学习\n  - 算法\ncategories:\n  - 强化学习\nkeywords:\n  - 强化学习\ndescription: 强化学习的算法和思路总结\nabbrlink: 17762\ndate: 2023-10-19 16:19:24\nupdated: 2023-10-30 17:03:11\ntop_img: https://s2.loli.net/2024/02/06/T9HwPmcoaKpNXBY.png\ncomments: \ncover: https://s2.loli.net/2024/02/06/IUOjJBRnM3Zf1Pr.png\ntoc:\ntoc_number:\ntoc_style_simple:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\nmathjax:\nkatex:\naplayer:\nhighlight_shrink:\naside:\nabcjs:\n---\n\n> 之前没有深入和系统的学习过强化学习，最近由于科研刚需，上网查资料刚好看到知乎上面有个大佬的强化学习的系列文章，感觉写的很好，于是就把他的文章看了一遍，顺便做了一些笔记，这里记录一下。\n\n原文： https://zhuanlan.zhihu.com/p/111895463\n\n卧槽大佬讲的真的好，笔记记不了一点！！！建议大家都去看原文！\n\n后面可能会自己写一下 `MADDPG` 和 `MATD3` 的相关内容，到时候再更新。\n\n> 2023/10/23 这几天把大佬的强化学习专栏看了一遍了，真的很不错，但是我觉得还是得自己总结一下重难点，且这周五和东大的联合组会轮到我讲了，刚好深入理解一下强化学习算法。所以还是写一下这篇笔记吧！\n\n学习路线：\n![学习路线](../image/强化学习/学习路线.png)\n\n## 马尔可夫树\n\n强化学习的任务：\n- 我们希望用强化学习的方式，使某个**智能体**获得**独立自主**地完成某种任务的能力。 \n- 智能体学习和工作的地方，称为**环境**。\n- 所谓独立自主，就是智能体一旦启动，就不需要人指挥了。\n\n### 经典马尔可夫链\n![马尔科夫链.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E9%93%BE.png)\n\n- 状态(state)：智能体观察到的当前环境的部分或者全部特征。\n  - 注意：环境的特征可能有许多，但只有智能体能够观察到的特征才算是状态。所以也用observation表示状态。\n- 动作(action)：智能体做出的具体行为。\n  - **动作空间**就是该智能体能够做出的动作数量。智能体身处十字路口。那么我们的方向就有4个。也就是说，动作空间为4个动作。\n- 奖励(reward)：智能体在某个状态下采取某个动作所获得的反馈。\n  - 奖励是一个标量，可以是正数，也可以是负数。奖励越大，说明智能体做的越好。奖励越小，说明智能体做的越差。\n\n### RL一般步骤\n1. 智能体在环境中，观察到状态(S)；\n2. 状态(S)被输入到智能体，智能体经过计算，选择动作(A);\n3. 动作(A)使智能体进入另外一个状态(S)，并返回奖励(R)给智能体。\n4. 智能体根据返回，调整自己的策略。 重复以上步骤，一步一步创造马尔科夫链。\n\n### 马尔可夫树\n马尔科夫链之所以是我们现在看到的一条链条。是因为我们站在现在，往过去看，所以是一条确定的路径。但如果我们往前看，就并不是一条路径，而是充满了各种\"不确定性\"， 即\"马尔可夫树\"。\n\n![马尔科夫树.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E6%A0%91.png)\n\n这种\"不确定性\"来自两个方面： \n- 智能体的行动选择(策略)。\n- 环境的不确定性。\n\n## RL中的Q值和V值\n\n并不能单纯通过R来衡量一个动作的好坏，因为R只是一个瞬时的反馈，而我们需要的是长期的反馈。在做决策的时候，需要把眼光放远点，把未来的价值换到当前，才能做出选择。\n\n我们希望可以有一种方法评估我做出每种选择价值。这样，只要看一下标记，以后的事情也不用理，选择那个动作价值更大，就选那个动作就可以了。\n\n- 评估动作的价值称为**Q值**：它代表了智能体选择这个动作后，一直到最终状态奖励总和的期望。\n- 评估状态的价值称为**V值**：它代表了智能体在这个状态下，一直到最终状态的奖励总和的期望。\n\n价值越高，表示从当前状态到最终状态能获得的平均奖励将会越高。因为智能体的目标数是获取尽可能多的奖励，所以智能体在当前状态，只需要选择价值高的动作就可以了。\n\n### V值的定义\n\n![V值的定义.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FV%E5%80%BC%E7%9A%84%E5%AE%9A%E4%B9%89.png)\n\n假设现在需要求某状态S的V值，可以这样：\n\n1. 从S点出发，并影分身出若干个自己;\n2. 每个分身按照当前的策略 选择行为;\n3. 每个分身一直走到最终状态，并计算一路上获得的所有奖励总和;\n4. 计算每个影分身获得的平均值,这个平均值就是要求的V值。\n\n总结：`从某个状态，按照策略 ，走到最终状态很多很多次；最终获得奖励总和的平均值，就是V值。`\n\n`V值跟选择的策略有很大的关系` 。\n\n看这样一个简化的例子，从S出发，只有两种选择，A1，A2；从A1，A2只有一条路径到最终状态，获得总奖励分别为10和20。\n\n![例子1.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E4%BE%8B%E5%AD%901.png)\n\n![策略1.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%AD%96%E7%95%A51.png)\n\n![策略2.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%AD%96%E7%95%A52.png)\n\n可以看出不同的策略，计算出的V值是不一样的。\n\n### Q值的定义\n![Q值的定义.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FQ%E5%80%BC%E7%9A%84%E5%AE%9A%E4%B9%89.png)\n\n现在需要计算，某个状态S0下的一个动作A的Q值： \n1. 从A这个节点出发，使用影分身之术； \n2. 每个影分身走到最终状态,并记录所获得的奖励； \n3. 求取所有影分身获得奖励的平均值，这个平均值就是要求的Q值。\n\n总结：`从某个状态选取动作A，走到最终状态很多很多次；最终获得奖励总和的平均值，就是Q值。`\n\n与V值不同，Q值和策略并没有直接相关，而`与环境的状态转移概率相关，而环境的状态转移概率是不变的。`\n\n### V值和Q值关系\n`Q和V之间是可以相互换算的`。\n\n#### Q值转V值\n\n![Q值转V值.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FQ%E5%80%BC%E8%BD%ACV%E5%80%BC.png)\n\n从定义出发，我们要求的V值，就是从状态S出发，到最终获取的所获得的奖励总和的期望值。也就是蓝色框部分。\n\nS状态下有若干个动作，每个动作的Q值，就是从这个动作之后所获得的奖励总和的期望值。也就是红色框部分。\n\n假设已经计算出每个动作的Q值，那么在计算V值的时候就不需要一直走到最终状态了，只需要走到动作节点，看一下每个动作节点的Q值，根据策略 ，计算Q的期望就是V值了。\n\n![Q值转V值1.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FQ%E5%80%BC%E8%BD%ACV%E5%80%BC1.png)\n\n更正式的公式如下：\n![公式1.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E5%85%AC%E5%BC%8F1.png)\n\n解释：`一个状态的V值，就是这个状态下的所有动作的Q值，在策略下的期望。`\n\n#### V值转Q值\n\n`Q是V的期望。`而这里不需要关注策略，这里是环境的状态转移概率决定的。\n\n![V值转Q值.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FV%E5%80%BC%E8%BD%ACQ%E5%80%BC.png)\n\n`当选择A，并转移到新的状态时，就能获得奖励，我们必须把这个奖励也算上！`\n\n![V值转Q值1.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FV%E5%80%BC%E8%BD%ACQ%E5%80%BC1.png)\n\n更正式的公式如下：\n![公式2.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E5%85%AC%E5%BC%8F2.png)\n\n> 折扣率 在强化学习中，有某些参数是人为主观制定。这些参数并不能推导，但在实际应用中却能解决问题，所以我们称这些参数为超参数，而折扣率就是一个超参数。\n\n### V值转V值\n实际应用中，更多会从V到V。其实就是把Q值的公式代入V值的公式。\n\n![V值转V值.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FV%E5%80%BC%E8%BD%ACV%E5%80%BC.png)\n\n## MC\n蒙地卡罗方法(Monte-Carlo)\n\n### 蒙地卡罗算法\n\n1. 把智能体放到环境的任意状态；\n2. 从这个状态开始按照策略进行选择动作，并进入新的状态。\n3. 重复步骤2，直到最终状态；\n4. 从最终状态开始向前回溯：计算每个状态的G值。\n5. 重复1-4多次，然后平均每个状态的G值，这就是要求的V值。\n\n### G值的意义\n\n重要：`G值是一个具体的累积奖励值，而Q值和V值是对这个累积奖励值的估计。`\n\n![G值的意义.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FG%E5%80%BC%E7%9A%84%E6%84%8F%E4%B9%89.png)\n\n- 第一步，根据策略往前走，一直走到最后，期间什么都不用算，还需要记录每一个状态转移，获得多少奖励r即可。\n- 第二步，从终点往前走，一遍走一遍计算G值。G值等于上一个状态的G值(记作G'),乘以一定的折扣(gamma),再加上r。\n\n所以G值的意义在于，`在这一次游戏中，某个状态到最终状态的奖励总和(理解时可以忽略折扣值gamma)。`\n\n当进行多次试验后，有可能会经过某个状态多次，通过回溯，也会有多个G值。 重复刚才说的，每一个G值，就是每次到最终状态获得的奖励总和。`而V值是某个状态下，通过影分身到达最终状态，所有影分身获得的奖励的平均值。`\n\n理解：\n1. `G的意义：在某个路径上，状态S到最终状态的总收获。 `\n2. `V和G的关系：V是G的平均数。`\n\n### V和策略相关\n![策略3.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%AD%96%E7%95%A53.png)\n\n![策略4.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%AD%96%E7%95%A54.png)\n\n由于策略改变，经过某条路径的概率就会产生变化。因此最终试验经过的次数就不一样了。\n\n### 蒙地卡罗算法的缺点\n\n每一次游戏，都需要先从头走到尾，再进行回溯更新。如果最终状态很难达到，那可能每一次都要转很久很久才能更新一次G值。\n\n### MC的更新公式\n上面计算V值其实相当麻烦，因为每一个状态都需要建立一个空间，记录每个轨迹下的G值。\n\n那有没有一种方法，可以用更少的空间计算V值呢？当然有，那就是`增量更新`。\n\n#### 增量更新\n现在我们只需要记录之前的平均值V，新加进来的G，和次数N。我们把V和G的差，除以N，然后再加到原来的平均值V上，就能计算到新的V值。 \n\n`V_new = (V_old - G) * (1 / N) + V_old`\n\n- V_old：原来的V值\n- G：这一次回溯后，计算出来的G值\n- N: 这个状态被经过多少次\n- V_new：新计算出来的V值\n\n#### 更进一步\n\n这样计算还是比较麻烦，我们甚至可以不用记录N，把(1/N)设置成为一个固定的数，例如0.1、0.2(还记得超参数吗？)。我们把这个值称为`学习率`。\n\n这就相当于，我们新来的G和V_old的差的十分之一，会被加到V_new上！也就是说，每一次G都会引导V增加一些或者减少一些，而这个V值慢慢就会接近真正的V值。\n\n这里的G，也称为V的更新目标。\n\n而学习率就可以理解为，每次V向目标靠近的幅度；学习率越大，表示向G靠近的幅度越大，反之则越小。\n\n#### 两种理解方式\n\n![两种理解方式.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E4%B8%A4%E7%A7%8D%E7%90%86%E8%A7%A3%E6%96%B9%E5%BC%8F.png)\n\n## TD\n时序差分算法TD(Temporal-Difference)\n\n### TD和MC的比较\nTD算法对蒙地卡罗(MC)进行了改进：\n1. 和蒙地卡罗(MC)不同：`TD算法只需要走N步，不用走到终点，就可以开始回溯更新。` \n2. 和蒙地卡罗(MC)一样：需要先走N步，每经过一个状态，把奖励r记录下来。然后开始回溯。 \n3. 那么，状态的V值怎么算呢？其实和蒙地卡罗一样，就假设N步之后，就到达了最终状态了。\n   - 假设“最终状态”上之前没有走过，所以这个状态上的纸是空白的。这个时候我们就当这个状态为0. \n   - 假设“最终状态”上已经走过了，这个状态的V值，就是当前值。然后我们开始回溯。\n\n### 直观理解\n\n从A状态，经过1步，到B状态。什么都不管就当B状态是最终状态了。此时`N = 0`，也叫做`TD(0)`。\n\n但B状态本身就带有一定的价值，也就是V值。其意义就是从B状态到最终状态的总价值期望。\n\n![TD(0).png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FTD%280%29.png)\n\n假设B状态的V值是对的，那么，通过回溯计算，就能知道A状态的更新目标了。\n\n### 更新公式\n\nTD并走走完整段路程，而是半路就截断。用半路的路牌，更新当前的路牌。 `所以只需要把MC的更新目标，改为TD的更新目标即可。`\n\n`在MC，G是更新目标，而在TD，我们只不过把更新目标从G，改成r+gamma*V`\n\n![更新公式.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E6%9B%B4%E6%96%B0%E5%85%AC%E5%BC%8F.png)\n\n\n## Q-learning\n\n之前用TD(0)预估状态价值V:\n![TD(0)更新公式.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FTD%280%29%E6%9B%B4%E6%96%B0%E5%85%AC%E5%BC%8F.png)\n\n图解：\n![TD(0)图解.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FTD%280%29%E5%9B%BE%E8%A7%A3.png)\n\nTD能够用在V值，那么也能用在计算Q值上。\n\n### TD之于Q值估算\n\n现在用上TD的思路。 在St，智能体根据策略pi，选择动作At，进入S(t+1)状态，并获得奖励R。 \n![用TD估计Q值.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%94%A8TD%E4%BC%B0%E8%AE%A1Q%E5%80%BC.png)\n- V(St+1)的意义是，在St+1到最终状态获得的奖励期望值。 \n- Q(St,At)的意义是，在Q(St,At)到最终状态获得的奖励期望值。\n\n在这里要估算两个东西，一个是V值，一个是Q值。人们想到用下一个动作的Q值代替V值。\n![用下一个动作的Q代替V.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%94%A8%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%8A%A8%E4%BD%9C%E7%9A%84Q%E4%BB%A3%E6%9B%BFV.png)\n\n但是，这里就有个坑：`虽然从状态St+1到动作At+1之间没有奖励反馈，但还是不能直接用At+1的Q价值，代替St+1的V价值。`\n\n因为`马尔可夫树!`\n![坑的解释.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E5%9D%91%E7%9A%84%E8%A7%A3%E9%87%8A.png)\n\n`在St+1下，可能有很多动作At+1。不同动作的Q值自然是不同的。 所以Q(St+1,At+1)并不能等价于V(St+1)。`\n\n虽然不相等，但不代表不能用其中一个来代表V(St+1)。人们认为有个可能的动作产生的Q值能够一定程度代表V(St+1)。\n1. 在相同策略下产生的动作At+1。这就是`SARSA`。\n2. 选择能够产生最大Q值的动作At+1。这就是`Qlearning`。\n\n### SARSA\n\n![SARSA.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FSARSA.png)\n\n其实SARSA和上一篇说的TD估算V值几乎一模一样，只不过挪了一下，从V改成Q了。\n\n![SARSA公式.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FSARSA%E5%85%AC%E5%BC%8F.png)\n![TD(0)与SARSA对比.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FTD%280%29%E4%B8%8ESARSA%E5%AF%B9%E6%AF%94.png)\n\n注意: `这里的At+1是在同一策略产生的。也就是说,St选At的策略和St+1选At+1是同一个策略。这也是SARSA和Qlearning的唯一区别。`\n\n### Qlearning\n`Qlearning将能够产生最大Q值的动作At+1的Q值作为V(St+1)的替代。`\n\n![Qlearning图解.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FQlearning%E5%9B%BE%E8%A7%A3.png)\n\n理解：因为需要寻着的是能获得最多奖励的动作，Q值就代表能够获得今后奖励的期望值。所以选择Q值最大的，也只有最大Q值能够代表V值。\n![Qlearning公式.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FQlearning%E5%85%AC%E5%BC%8F.png)\n\n`Q(S,a)的更新目标`：在Qlearning，用下一状态St+1的最大Q值替代St+1的V值。V(St+1)加上状态转移产生的奖励R。\n\n![SARSA公式.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FSARSA%E5%85%AC%E5%BC%8F.png)\n\nQleanring和SARSA，两者的差别仅仅在Qlearning中多了个max。\n\n### 总结\n1. Qlearning和SARSA都是基于TD(0)的。不过在之前的介绍中，用TD(0)估算状态的V值。而Qlearning和SARSA估算的是动作的Q值。 \n2. Qlearning和SARSA的核心原理，是用下一个状态St+1的V值，估算Q值。 \n3. 既要估算Q值，又要估算V值会显得比较麻烦。所以用下一状态下的某一个动作的Q值，来代表St+1的V值。 \n4. Qlearning和SARSA唯一的不同，就是用什么动作的Q值替代St+1的V值。 \n   - SARSA 选择的是在St同一个策略产生的动作。 \n   - Qlearning 选择的是能够产生最大的Q值的动作。\n\n### Qlearning 实现\n\nTODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。\n\n## 深度神经网络\n\n深度强化学习：用深度神经网络辅助强化学习。\n\n#### 原理\n假如知道X，y有关系，那么不妨先设这个关系可以通过函数Magic(X)获得。也就是说Magic(X)=y。\n\n这在手写数字识别中，X就是需要识别的图片，y就是识别出来的数字分类。 我们的任务就是需要求这个Magic函数。\n![Magic(X).png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FMagic%28X%29.png)\n\n现在假设有另外一个函数Magic'(),这个函数是由深度神经网络构成。\n\n在刚开始的时候，很明显Magic'(X) 并不等于y，例如输入手写图片8，Magic'()计算后，认为数字8只有20%，但数字9有40%。\n\n...但这没所谓，因为这是刚开始。我们的任务是让Magic'(X)产生的结果y' 和 y尽量接近。\n\ny'和真实y之间的差距，叫损失，也就是loss。有时候也会把y称为目标(target)，因为任务就是让Magic'(X)越来越靠近这个目标。\n\n衡量loss的方法有很多，定义不同loss对神经网络学习有着重大差别，这个话题太大，我们暂时不展开。\n\nloss越大，表示和目标差距越远；loss越小，表示和目标越近，当小到一定值，那么就可以认为Magic'(X)和Magic(X)函数非常接近，可以通过Magic'(X)计算出y。\n\n当有许许多多这样的y，经过许许多多轮后。Magic'就越来越贴近Magic。也就是说X和y之间的关系就能越来越好地表达出来。\n\n![Magic'(X).png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FMagic%27%28X%29.png)\n\n#### 放大镜下的深度神经网络\n![数据加工厂.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%B7%A5%E5%8E%82.png)\n\n现在可以把深度神经网络的Magic函数，看成是一个数据加工厂。而X就是要进行加工的数据。\n\n为了让这个数据加工厂运行得更快，通常需要把要加工的数据X变得更`标准`一些。\n\n例如图片的尺寸大小，有多少通道的颜色等等，然后`分批(batch)`，输入工厂。\n\n在输入工厂的时候，会有一个‘大门’，称为`输入层`，去检查数据是否已经按照工厂的标准整理好。\n\n数据工厂里有很多车间，按照流水线排列。和一般的自动化车间一样，需要定义好这个车间的操作标准。\n\n一般称这些车间叫`层`。`这些层都已经封装好在tensorflow、tensorlayer、pytorch等里面了`。常用的层包括：`Dense、Conv2D、LSTM、Reshape、Flatten`等。\n\n最终，数据工厂会把原数据X，加工成产品`y'(也叫做：logits)`。从源数据加工成产品的过程，叫`正向传播`。\n\n但产品y'是否是一个合格的产品，我们还需要我们真正的`y(lables)`作为标准去鉴定。把`鉴定出来的差距就是loss`。\n\n工厂根据鉴定结果，以梯度下降的方式，反向传递给每个车间，告诉车间要如何调整各自的参数，让源数据和产出y'能够对应起来。\n\n经过N个批次（batch）的数据输入，然后鉴别，工厂调整。最后工厂就能达到生产标准了。也就是说magic函数已经被训练好了。\n\n\n## DQN\n> `DQN: TD + 神经网络`\n\n在Qlearning中，有一个Qtable，记录着在每一个状态下，各个动作的Q值。\n\nQtable的作用是当输入状态S，通过查表返回能够获得最大Q值的动作A。也就是需要找一个S-A的对应关系。\n\n这种方式很适合格子游戏。因为格子游戏中的每一个格子就是一个状态，但在现实生活中，很多状态并不是离散而是连续的。\n\n`用神经网络解决Qlearning中动作离散的问题，让动作变成连续的，这就是DQN。`\n\n`Deep network + Qlearning = DQN`\n\n神经网络万能函数(神经网络)Magic(X)接受输入一个状态S，它能告诉我，每个动作的Q值是怎样的。\n\n### 理解DQN中的神经网络\n\nQtable三维可视化：\n![Qtable三维可视化.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FQtable%E4%B8%89%E7%BB%B4%E5%8F%AF%E8%A7%86%E5%8C%96.png)\n\n图中每根柱子的高度，表示状态S下，选择动作A的Q值。\n\n`现在用函数来表示，相当于要扭曲一条曲线，这条曲线穿过了离散状态下的所有点。`\n\n![扭曲的曲线.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E6%89%AD%E6%9B%B2%E7%9A%84%E6%9B%B2%E7%BA%BF.png)\n\n从二维状态看：\n![二维曲线.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E4%BA%8C%E7%BB%B4%E6%9B%B2%E7%BA%BF.png)\n\n所以现在不但可以取状态3和状态4，还可以取状态3.5的Q值。\n\n现在就很清楚了，其实Qlearning和DQN并没有根本的区别。`只是DQN用神经网络，也就是一个函数替代了原来Qtable而已。`\n\n### 更新目标\n\n更新目标就是Magic(X)，最终要向这个Magix(X)靠近。\n\n在Qlearning，用下一状态St+1的最大Q值替代St+1的V值。V(St+1)加上状态转移产生的奖励R。就是Q(S,a)的更新目标。\n\nDQN和Qlearning一样：\n![DQN.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FDQN.png)\n假设需要更新当前状态St下的某动作A的Q值：Q(S,A),可以这样做： \n1. 执行A，往前一步，到达St+1; \n2. 把St+1输入Q网络，计算St+1下所有动作的Q值； \n3. 获得最大的Q值加上奖励R作为更新目标； \n4. 计算损失 \n   - Q(S,A)相当于有监督学习中的logits\n   - maxQ(St+1) + R 相当于有监督学习中的lables \n   - 用mse函数，得出两者的loss \n   - Loss = (Q(S, A) - [gamma * maxQ(St+1) + R])^2\n5. 用loss更新Q网络。(反向传播)\n\n> 通常会使用一个折扣因子 gamma 来考虑未来奖励的重要性。折扣因子 gamma 的作用是对未来奖励进行衰减，使得当前时刻的奖励比未来时刻的奖励更具有影响力。\n\n也就是，用Q网络估算出来的两个相邻状态的Q值，他们之间的距离，就是一个r的距离。这个就是更新目标\n`Target = R + gamma * maxQ(St+1)`\n\n![DQN公式.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FDQN%E5%85%AC%E5%BC%8F.png)\n\n总结：\n1. 其实DQN就是Qlearning扔掉Qtable，换上深度神经网络。\n2. 解决连续型问题，如果表格不能表示，就用函数，而最好的函数就是深度神经网络。\n3. 和有监督学习不同，深度强化学习中，需要自己找更新目标。通常在马尔科夫链体系下，两个相邻状态状态差一个奖励r经常能够作为更新目标。\n\n### DQN 实现\n\nTODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。\n\n## Double DQN\n\n### 经验回放\n经验回放解决了强化学习中的两个问题： `训练网络数据采集慢` 和 `过度拟合`\n\n\n当然这个慢是对比网络训练的速度。在强化学习中，网络训练经过GPU的加速，比起游戏来时快很多的。所以训练的瓶颈一般在智能体跟环境互动的过程中。 如果能把互动过程中的数据，都存起来，当数据最够多的时候，再训练网络，那么就快很多了。\n\n把每一步的s，选择的a，进入新的状态s'，获得的奖励r，新状态是否为终止状态。都存在一个叫回放缓存的地方(replay buffer)。\n当智能体与环境互动期间，就会不断产生这样一条一条数据。 数据1： 数据2： 数据3： ....\n当数据量足够，达到设定一个batch的大小，便从中抽出一个batch大小的数据，把这笔数据一起放入网络进行训练。\n训练之后继续进行游戏，继续把新产生的数据添加到回放缓存里...\n就这样每次都随机抽出一个batch大小的数据训练智能体。这样，以前产生的数据同样也能用来训练数据了, 效率自然更高。\n\n使用经验回放除了使训练更高效，同时也减少了训练产生的过度拟合的问题。\n过度拟合，放到人身上就是`过度依赖局部经验`了。\n就像孩子发现爸爸有胡子，就认为所有男人都有胡子一样。\n同样，在有监督学习中，如果只给模型看少量的几张图，并且告诉模型这是猫。这样模型就只会从这几张图学习到猫的特点，而更多的猫模型可能就不认得了。我们说这就是过度拟合造成的，导致模型不够健壮。\n\n\n\n\n### DQN的问题\nDQN的目标：\n`Target = R + gamma * maxQ(St+1)`\n\n目标本身就包含一个Q网络，理论上是没有问题的，但，这样会造成Q网络的学习效率比较低，而且不稳定。\n\n如果把训练神经网络比喻成射击游戏，在target中有Q网络的话，就相当于在射击一个移动靶，因为每次射击一次，靶就会挪动一次。相比起固定的靶，无疑加上了训练的难度。\n\n要解决这个问题，就把移动靶弄成是固定的靶，先停止10秒。10后挪动靶再打新的靶。这就是`Fixed Q-targets`的思路。\n\n### Fixed Q-targets\n\n![fix-Q-targets.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2Ffix-Q-targets.png)\n\n其他地方和DQN一样，唯一不同是用了两个Q网络。\n\n- 原来的Q网络，用于估算Q(s);\n- targetQ网络, targetQ自己并不会更新，也就是它在更新的过程中是固定的，用于计算更新目标。\n  - `y = r + gamma * max(targetQ(s'))`\n  - 进行N次更新后，就把新Q网络的参数赋值给旧Q网络，保持训练的稳定性。\n\n### Double DQN\n\nDQN有一个显著的问题，就是DQN估计的Q值往往会偏大。这是由于Q值是以下一个s'的Q值的最大值来估算的，但下一个state的Q值也是一个估算值，也依赖它的下一个state的Q值...，这就导致了Q值往往会有偏大的的情况出现。\n\n这个思路也很直观。如果只有一个Q网络，Q值的估计往往偏大。那就用两个Q网络，因为两个Q网络的参数有差别，所以对于同一个动作的评估也会有少许不同。选取评估出来较小的值来计算更新目标。这样就能有效避免Q网络估值偏大的情况发生了。\n\n另外一种做法也需要用到两个Q网络：Q1网络推荐能够获得最大Q值的动作；Q2网络计算这个动作在Q2网络中的Q值。\n\n\n### Double DQN 实现\n\nTODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。\n\n## Duel DQN\n\n### Dueling DQN原理\n回到Qtable， 原来会直接预估Q值表的数据，现在改为需要预估两个值：S值和A值。即`Q = S + A`\n- S: 在特定状态下采取任何行动的平均价值,也就是该state下的Q值的平均数。\n- A: 在特定状态下采取特定动作相对于采取平均动作的优势。A的平均值为0。\n\n![Q=S+A表格.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FQ%3DS%2BA%E8%A1%A8%E6%A0%BC.png)\n\n普通DQN的Q网络，可以理解用一个曲线去拟合Qtable的Q值。现在取一个截面，表示当取某个S下，各个动作的Q值。\n\n![普通DQN.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E6%99%AE%E9%80%9ADQN.png)\n\n普通DQN在提升某个状态下的S值时，只会提升某个动作。\n\nDueling DQN： 在网络更新的时候，由于有A值之和必须为0的限制，所以网络会优先更新S值。S值是Q值的平均数，平均数的调整相当于一次性S下的所有Q值都更新一遍。\n\n![DuelDQN.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FDuelDQN.png)\n\n如上图，橙色虚线是平均值，也就是S值。 所以网络在更新的时候，不但更新某个动作的Q值，而是把这个状态下，所有动作的Q值都调整一次。这样，就可以在更少的次数让更多的值进行更新。\n\n> 这样调整最后的数值是对的吗？放心，在DuelingDQN，我们只是优先调整S值。但最终我们的target目标是没有变的，所以我们最后更新出来也是对的。\n\n### 网络架构\n![DuelDQN网络架构.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FDuelDQN%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84.png)\n\n可以把dueling DQN分为三部分：\n- 第一部分：和普通DQN一样，用来处理和学习数据。\n- 第二部分：计算svalue，就是让网络预估的平均值。\n- 第三部分：计算avalue，和svalue一样，都是从h2层输入到该层。然后对avalue进行归一化处理，也就是增加“A值的平均值为0”的限制。\n  - 归一化的处理很简单，求A值的平均值，然后用A值减去平均值即可。A-mean(A)\n\nDeulingDQN的实现很简单，只需要修改Q网络的网络架构就可以了。而且可以和其他DQN的技巧，例如经验回放，固定网络，双网络计算目标等可以共用。\n\n### Duel DQN 实现\n\nTODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。\n\n## PG\n策略梯度(Policy Gradient)\n\n之前的MC、TD、Qlearning、DQN都是基于值的方法，就是一定要算Q值和V值。但事实上我们的最终目的是要找一个策略，能获得最多的奖励。\n\n这就是`策略梯度(Policy Gradient)`\n\n### PG原理\n\n认识到：\n> `DQN: TD + 神经网络`\n> `PG: MC + 神经网络`\n\nPG中的Magic(state):\n当输入state的时候，输出pi，告诉智能体这个状态，应该如何应对： = magic(state)。如果智能体的动作是对的，那么就让这个动作获得更多被选择的几率；相反，如果这个动作是错的，那么这个动作被选择的几率将会减少。\n\n复习一下蒙地卡罗：\n从某个state出发，然后一直走，直到`最终状态`。然后从最终状态原路返回，对每个状态评估G值。 所以G值能够表示在策略下，智能体选择的这条路径的好坏。\n![复习MC.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E5%A4%8D%E4%B9%A0MC.png)\n\n### 直观感受PG\n\n从某个state出发，可以采取三个动作。 假设当前智能体对这一无所知，那么，可能采取平均策略 Pi0 = [33%,33%,33%]。智能体出发，选择动作A，到达最终状态后开始回溯，计算得到 G = 1。\n\n![直观感受PG1.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%9B%B4%E8%A7%82%E6%84%9F%E5%8F%97PG1.png)\n\n更新策略，因为该路径选择了A而产生的，并获得G = 1；因此要更新策略：让A的概率提升，相对地，BC的概率就会降低。 计算得新策略为： Pi1 = [50%,25%,25%]。虽然B概率比较低，但仍然有可能被选中。第二轮刚好选中B。智能体选择了B，到达最终状态后回溯，计算得到 G = -1。\n\n![直观感受PG2.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%9B%B4%E8%A7%82%E6%84%9F%E5%8F%97PG2.png)\n\n此时对B动作的评价比较低，并且希望以后会少点选择B，因此要降低B选择的概率，而相对地，AC的选择将会提高。计算得新策略为： Pi2 = [55%,15%,30%]。最后随机到C，回溯计算后，计算得G = 5。\n\n![直观感受PG3.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%9B%B4%E8%A7%82%E6%84%9F%E5%8F%97PG3.png)\n\nC比A还要多得多。因此这一次更新，C的概率需要大幅提升，相对地，AB概率降低。 Pi3 = [20%,5%,75%]。\n\n### PG 实现\n\nTODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。\n\n## AC\n> `AC: PG + DQN(TD + 神经网络)`\n\nPG利用带权重的梯度下降方法更新策略，而获得权重的方法是MC计算G值。MC需要完成整个游戏过程，直到最终状态，才能通过回溯计算G值。这使得PG方法的效率被限制。\n\n改为TD可以解决上面的问题。接下来又面临另一个问题：\n在PG，我们需要计算G值；那么在TD中，我们应该怎样估算每一步的Q值呢？答案是用神经网络。\n\n也就是说，Actor-Critic，其实是用了两个网络：\n\n两网络都输入状态S，Critic比Actor多一个St+1: \n- 一个网络输出策略，负责选择动作，把这个网络成为Actor； \n- 一个网络负责计算每个动作的分数，把这个网络成为Critic。\n\n### TD-error\n`在DQN预估的是Q值，在AC中的Critic，估算的是V值。`不估算Q值是因为效果不好。\n![为什么不估算Q.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E4%BC%B0%E7%AE%97Q.png)\n\n假设用Critic网络，预估到S状态下三个动作A1，A2，A3的Q值分别为1,2,10。 但在开始的时候，采用平均策略，于是随机到A1。于是用策略梯度的带权重方法更新策略，这里的权重就是Q值。于是策略会更倾向于选择A1，意味着更大概率选择A1。结果A1的概率就持续升高...\n\n这就掉进了正数陷阱。明明希望A3能够获得更多的机会，最后却是A1获得最多的机会。这是为什么呢？\n因为Q值用于是一个正数，如果权重是一个正数，那么相当于提高对应动作的选择的概率。权重越大，调整的幅度将会越大。其实当有足够的迭代次数，这个是不用担心这个问题的。因为总会有机会抽中到权重更大的动作，因为权重比较大，抽中一次就能提高很高的概率。\n\n但在强化学习中，往往没有足够的时间去和环境互动。这就会出现由于运气不好，使得一个很好的动作没有被采样到的情况发生。要解决这个问题，可以通过减去一个baseline，令到权重有正有负。而通常这个baseline，选取的是权重的平均值。减去平均值之后，值就变成有正有负了。而`Q值的期望(均值)就是V。`\n\n![TD-error.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FTD-error.png)\n\n可以得到更新的权重：`Q(s,a)-V(s)`，Q(s,a)用`gamma * V(s') + r` 代替。\n得到TD-error：`TD-error = gamma * V(s') + r - V(s)`\n\n和之前DQN的更新公式非常像，只不过DQN的更新用了Q，而TD-error用的是V。如果Critic是用来预估V值，而不是原来讨论的Q值。那么，这个TD-error是用来更新Critic的loss了！没错，Critic的任务就是让TD-error尽量小。然后TD-error给Actor做更新。\n\n至于为啥TD-error是用来更新Critic的loss呢？\n取TD-error的方差来作为critic的loss，其实类似于DQN中的Q网络，认为下个状态的估算值比目前状态的Q值更精确，所以把下个状态的估算值作为目标，来更新Q网络。此处单看critic网络吗，其目的仅在于预测V值，所以它的估算值也要向更准确的下个阶段估算值来靠近，即TD-error越来越小。\n再来看actor网络，TD-error在其中的作用仅是更新网络时的权重，其与动作的选择并无直接关系。前期TD-error较大，每次更新时，动作的概率都会进行相对较大的改动，随着不断地训练，动作的概率逐渐成熟，TD-error越来越小，所以每次更新时对动作概率的改动也随之减小。\n\n#### 总结\n1. 为了避免正数陷阱，希望Actor的更新权重有正有负。因此，把Q值减去他们的均值V。有：`Q(s,a)-V(s)`\n2. 为了避免需要预估V值和Q值，把Q和V统一；由于`Q(s,a) = gamma * V(s') + r - V(s)`。所以我们得到TD-error公式： `TD-error = gamma * V(s') + r - V(s)`\n3. `TD-error就是Actor更新策略时候，带权重更新中的权重值`；\n4. 现在Critic不再需要预估Q，而是预估V。而根据马可洛夫链所学，知道TD-error就是Critic网络需要的loss，也就是说，Critic函数需要最小化TD-error。\n\n### 算法\n1. 定义两个network：Actor 和 Critic\n2. 进行N次更新。\n    1. 从状态s开始，执行动作a，得到奖励r，进入状态s'\n    2. 记录的数据。\n    3. 把输入到Critic，根据公式： TD-error = gamma * V(s') + r - V(s) 求 TD-error，并缩小TD-error\n    4. 把输入到Actor，计算策略分布。\n\n![AC算法.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FAC%E7%AE%97%E6%B3%95.png)\n\n可以看出：在PG，智能体需要从头一直跑到尾，直到最终状态才开始进行学习。 在AC，智能体采用是每步更新的方式。\n\n### AC 实现\n\nTODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。\n\n## PPO\nPPO是基于AC框架的\n\n### 正态分布\n首先要想办法处理连续动作的输出问题。\n\n- 离散动作：离散动作就像一个个的按钮，按一个按钮就能智能体就做一个动作。\n- 连续动作：相当于按钮不但有开关的概念，而且还有力度大小的概念。就像开车，不但是前进后退转弯，并且要控制油门踩多深，刹车踩多少的，转弯时候转向转多少的问题。\n\n在离散动作空间的问题中，最终输出的策略呈现出下面形式：\n![离散动作-策略分布.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%A6%BB%E6%95%A3%E5%8A%A8%E4%BD%9C-%E7%AD%96%E7%95%A5%E5%88%86%E5%B8%83.png)\n\n假设动作空间有只有action1 和 action2，有40%的概率选择action1 ，60%概率选择action2。即在此状态下的策略分布: pi = [0.4, 0.6]。\n![连续型概率分布示意图.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E8%BF%9E%E7%BB%AD%E5%9E%8B%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n在连续型，不再用数组表示，而是用函数表示。例如，策略分布函数 ： P = （action）代表在策略下，选择某个action的概率P。\n\n用神经网络预测输出的策略是一个固定的shape，而不是连续的。那又什么办法可以表示连续型的概率呢？可以假定策略分布函数服从一个概率分布，例如正态分布。\n\n这样，只用两个参数就可以表示了。\n![正态分布.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83.png)\n\n正态分布：\n- sigma：表示方差，当sigma越大，图像越扁平；sigma约小，图像越突出。而最大值所在的位置，就是中轴线。\n- mu：表示平均数，也就是整个正态分布的中轴线。mu的变化，表示整个图像向左右移动。\n\n神经网络直接输出mu和sigma，就能获得整个策略的概率密度函数了。现在，当要按概率选择一个动作时，就只需要按照这个概率密度函数，随机抽取一个数，就能得到一个动作了。\n\n### AC的问题\n\n上面的正态分布解决了AC处理连续状态空间的问题。但是，AC还有一个问题：AC产生的数据，只能进行1次更新，更新完就只能丢掉，等待下一次的数据。\n\n- 行为策略：行为策略是代理在与环境交互时采取行动的策略。它决定了代理在当前状态下选择每一个可能的行动的概率分布。不是当前策略，用于产出数据。\n- 目标策略：目标策略是代理在训练过程中试图优化的策略。它是代理最终想要学习到的最优策略，它通常被设计为最大化期望累积奖励。会更新的策略，是需要被优化的策略。\n\n- 在线策略：在线策略是指在与环境交互时实时地采取行动，并根据实时的反馈来更新策略。也就是说，代理在与环境互动时，采取行动并根据实际结果来调整策略。目标策略和行为策略是同一个策略，那么是在线策略。\n  - 实时更新：在线策略会根据每次与环境交互的结果来进行即时更新。\n  - 依赖实时反馈：在线策略依赖于实时的环境反馈来进行学习和调整。\n- 离线策略：离线策略是指在事先收集好的数据集上进行训练，而不需要实时地与环境交互。也就是说，代理使用事先收集的经验数据来训练策略，而不依赖于实时环境反馈。目标策略和行为策略不是同一个策略，那么是离线策略。\n  - 离线数据：训练过程中不需要实时地与环境进行交互，可以使用先前收集的数据。\n  - 无需环境互动：训练过程中不需要实时环境反馈。\n\n例子：\n如果在智能体和环境进行互动时产生的数据打上一个标记。标记这是第几版本的策略产生的数据,例如 1， 2... 10。现在智能体用的策略 10，需要更新到 11。如果算法只能用 10版本的产生的数据来更新，那么这个就是在线策略；如果算法允许用其他版本的数据来更新，那么就是离线策略。\n\n例如PG，就是一个在线策略。因为PG用于产生数据的策略（行为策略），和需要更新的策略（目标策略）是一致。 而DQN则是一个离线策略。我们会让智能体在环境互动一定次数，获得数据。用这些数据优化策略后，继续跑新的数据。但老版本的数据仍然是可以用的。也就是说，产生数据的策略，和要更新的目标策略不是同一个策略。所以DQN是一个离线策略。\n\n\n**为什么PG和AC中的Actor更新策略，不能像DQN一样把数据存起来，只能用一次产生的数据？**\n\n看一个例子：\n![策略P和策略B.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%AD%96%E7%95%A5P%E5%92%8C%E7%AD%96%E7%95%A5B.png)\n\n> TD-error 可以理解为从状态S 到下一个状态动作的价值，所以动作1的 TD-error 大，所以希望选择动作1的概率大\n\n假设，已知在同一个环境下，有两个动作可以选择。现在两个策略，分别是P和B： P: [0.5,0.5] B: [0.1,0.9]\n\n现在按照两个策略，进行采样；也就是分别按照这两个策略，以S状态下出发，与环境进行10次互动。获得如图数据。那么，可以用B策略下获得的数据，更新P吗？\n\n答案是不行，回顾PG算法，`PG算法会按照TD-error作为权重，更新策略。权重越大，更新幅度越大；权重越小，更新幅度越小。`\n\n但可以从如下示意图看到，如果用行动策略B[0.1,0.9]产出的数据，对目标策略P进行更新，动作1会被更新1次，而动作2会更新9次。虽然动作1的TD-error比较大，但由于动作2更新的次数更多，最终动作2的概率会比动作1的要大。\n\n![策略P和策略B更新示意图.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%AD%96%E7%95%A5P%E5%92%8C%E7%AD%96%E7%95%A5B%E6%9B%B4%E6%96%B0%E7%A4%BA%E6%84%8F%E5%9B%BE.png)\n\n这不是期望看到的更新结果，因为动作1的TD-error比动作2要大，希望的是选择概率动作1的能更多。由此可以明白，在策略更新的时候不能使用其他策略产生的数据。\n\n**为什么DQN可以多次重复使用数据？**\n\n![DQN更新的是Q值.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FDQN%E6%9B%B4%E6%96%B0%E7%9A%84%E6%98%AFQ%E5%80%BC.png)\n\n两个角度：\n- 更新Q值，和策略无关。 在同一个动作出发，可能会通往不同的state，但其中的概率是状态转移概率决定的，与环境有关，而不是策略所决定的。所以产生的数据和策略并没有关系。\n- 在DQN的更新中是有\"目标\"的。 虽然目标比较飘忽，但每次更新，其实都是尽量向目标靠近。无论更新多少次，最终都会在目标附近徘徊。但PG算法，更新是不断远离原来的策略分布的，所以远离多少、远离的次数比例都必须把握好。\n\n> 在Actor-Critic (AC) 方法中，Critic 网络更新的是状态值函数（Value Function）V，而不是动作值函数（Q函数）。\n\n### 重要性采样技术\n\n在PPO中，如果想使用策略B的数据来更新策略P，那就要把TD-error乘上一个重要性权重(importance weight)。\n\n在这里`IW = P（a）/ B（a）`\n\n就是 `IW = 目标策略出现动作a的概率 / 行为策略出现a的概率`。\n- 目标策略：要更新的策略。\n- 行为策略：数据的策略。\n\n这里是用策略B的数据来更新策略P，所以P是目标策略，B是行为策略。\n![重要性权重表格.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E9%87%8D%E8%A6%81%E6%80%A7%E6%9D%83%E9%87%8D%E8%A1%A8%E6%A0%BC.png)\n\n现在即使用P策略: [0.5,0.5]进行更新，a1提升的概率也会比a2的更多。\n\nPPO使用重要性采样技术把AC从在线策略变成离线策略。\n\n### N步更新\n\n之前的TD叫做TD(0)，而N步更新为TD(n)。可以看成TD(0)其实是TD(n)的一种特殊情况。\n\n![TD(N).png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FTD%28N%29.png)\n\n如图，实际上只需要计算最后的V(s')，根据这个估算的V(s'), 反推经过的所有state的V值。这个其实和PG估算G的过程是一样的，只不过并不需要走到最后，而是中途截断，用网络估算。\n\n`V = R + gamma * V(s')`\n\n\n### 总结\n实际上，P策略和B策略差异并不能太大，为了能处理这个问题，有两个做法，PPO1 和 PPO2 。主流是PPO2。\n\n1. 用AC来解决连续型控制问题。方法是输入mu和sigma，构造一个正态分布来表示策略； \n2. PPO延展了TD(0)，变成TD(N)的N步更新； \n3. AC是一个在线算法，但为了增加AC的效率，希望把它变成一个离线策略，这样就可以多次使用数据了。为了解决这个问题，PPO使用了重要性采样。\n\n### PPO 实现\nTODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。\n\n## DDPG\nDDPG，全称是deep deterministic policy gradient，深度确定性策略梯度算法。\n\n- deep: 深度网络。\n- policy gradient: PG\n- deterministic: 其实DDPG也是解决连续控制型问题的的一个算法，不过和PPO不一样，PPO输出的是一个策略，也就是一个概率分布，而DDPG输出的直接是一个动作。\n\nDDPG更接近DQN，是用一个actor去弥补DQN不能处理连续控制性问题的缺点。\n\n\n### 回顾DQN\n\n![回顾DQN.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E5%9B%9E%E9%A1%BEDQN.png)\n\n从公式中也能看出，DQN不能用于连续控制问题原因，是因为maxQ(s',a')函数只能处理离散型的。这个就是DDPG中的Actor的功能: 用一个magic函数，直接替代maxQ(s',a')的功能。也就是说，期待输入状态s，magic函数返回我们动作action的取值，这个取值能够让q值最大。\n\n### 理解DDPG\nDDPG中Critic的功能，像是DQN的深度网络，用一张布去覆盖Qlearning中的Qtable。\n![理解DDPG1.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%90%86%E8%A7%A3DDPG1.png)\n\n当把某个state输入到DDPG的Actor中的时候，相当于在这块布上做沿着state所在的位置剪开，会看到这个边缘是一条曲线。\n![理解DDPG2.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%90%86%E8%A7%A3DDPG2.png)\n\n> 注意: 这条曲线很像概率分布，但要一定注意，这里并不是策略，也不是PPO和AC中的V值。是在某个状态state下，选择某个动作值的时候，能获得的Q值。\n\nActor的任务就是在寻找这个曲线的最高点，然后返回能获得这个最高点，也是最大Q值的动作。 所以，DDPG其实并不是PG，并没有做带权重的梯度更新。而是在梯度上升，在寻找最大值。 这也就解释了，为什么DDPG是一个离线策略，但可以多次更新却不用importance sampling。这是因为这个算法就是DQN，和策略没有直接的关系。\n\n### DDPG\n\n![DDPG1.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FDDPG1.png)\n\n整理下：\n#### Critic\n1. Critic网络的作用是预估Q，虽然它还叫Critic，但和AC中的Critic不一样，这里预估的是Q不是V；\n2. 注意Critic的输入有两个：动作和状态，需要一起输入到Critic中；\n3. Critic网络的loss其还是和AC一样，用的是TD-error。\n\n#### Actor\n1. 和AC不同，Actor输出的是一个动作；\n2. Actor的功能是，输出一个动作A，这个动作A输入到Critic后，能够获得最大的Q值。\n3. Actor的更新方式和AC不同，不是用带权重梯度更新，而是用梯度上升。\n\n和DQN一样，DDPG更新的时候如果更新目标在不断变动，会造成更新困难。所以DDPG和DQN一样，用了固定网络(fix network)技术，就是先冻结住用来求target的网络。在更新之后，再把参数赋值到target网络。\n\n所以实际做的时候使用了4个网络：actor, critic, Actor_target, cirtic_target。\n\n![DDPG2.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FDDPG2.png)\n\n> 目标网络只是用在求target的过程中。如果不是求target用的，就不用目标网络。\n\n### DDPG 实现\nTODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。\n\n\n\n\n## TD3\nTwin Delayed Deep Deterministic policy gradient algorithm，双延迟深度确定性策略梯度\n\nTD3是对DDPG的优化，三个重要优化。\n\n### double network\n\nDDPG起源于DQN，DQN有一个众所周知的问题就是Q值会被过高估计。这是因为用argmaxQ(s')去代替V(s')，去评估Q(s)。当每一步都这样做的时候，很容易就会出现高估Q值的情况。\n\n在TD3中，用了两套网络估算Q值，相对较小的那个作为更新的目标。这就是TD3的基本思路。\n\n回顾DDPG：\n![DDPG2.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FDDPG2.png)\n\n通过Critic网络估算动作的A值。一个Critic的评估可能会较高。所以加一个。\n\nTD3需要用到6个网络：\n![TD3.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FTD3.png)\n\n在目标网络中，估算出来的Q值会用min()函数求出较小值。以这个值作为更新的目标。这个目标会更新两个网络 Critic网络_1 和 Critic网络_2。 这两个网络是完全独立，他们只是都用同一个目标进行更新。 剩余的就和DDPG一样了。过一段时间，把学习好的网络赋值给目标网络。\n\n#### Critic部分的学习\n只有在计算Critic的更新目标时，才用target network。其中就包括了一个Policy network，用于计算A'；两个critic target Q network ,用于计算两个Q值：Q1(A') 和Q2(A')。\n\nQ1(A') 和Q2(A') 取最小值 min(Q1,Q2) 将代替DDPG的 Q(a') 计算更新目标，也就是说： target = min(Q1,Q2) * gamma + r\n\ntarget 将会是 Q_network_1 和 Q_network_2 两个网络的更新目标。\n\n`TD-error_1 = gamma * min(Q1,Q2) + r - Q1`\n`TD-error_2 = gamma * min(Q1,Q2) + r - Q2`\n\n既然更新目标是一样的，那么为什么还需要两个网络呢?\n\n虽然更新目标一样，两个网络会越来越趋近与和实际q值相同。但由于网络参数的初始值不一样，会导致计算出来的值有所不同。所以可以有空间选择较小的值去估算q值，避免q值被高估。\n\n\n#### Actor部分的学习\n\nDDPG网络图像上就可以想象成一张布，覆盖在qtable上。当输入某个状态的时候，相当于这块布上的一个截面，能够看到在这个状态下的一条曲线。\n\n而actor的任务，就是用梯度上升的方法，寻着这条线的最高点。\n\n对于actor来说，其实并不在乎Q值是否会被高估，他的任务只是不断做梯度上升，寻找这条最大的Q值。随着更新的进行Q1和Q2两个网络，将会变得越来越像。所以用Q1还是Q2，还是两者都用，对于actor的问题不大。\n\n### actor延迟更新\n\nactor更新的delay，也就是说相对于critic可以更新多次后，actor再进行更新。\n\n为什么要这样做呢？\n\n回到qnet拟合出来的那块\"布\"上。 qnet在学习过程中，的q值是不断变化的，也就是说这块布是不断变形的。所以要寻着最高点的任务有时候就挺难为的actor了。\n![理解DDPG1.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%90%86%E8%A7%A3DDPG1.png)\n![理解DDPG2.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2F%E7%90%86%E8%A7%A3DDPG2.png)\n\n可以想象，本来是最高点的，当actor好不容易去到最高点；q值更新了，这并不是最高点。这时候actor只能转头再继续寻找新的最高点。更坏的情况可能是actor被困在次高点，没有找到正确的最高点。\n\n所以可以把Critic的更新频率，调的比Actor要高一点。让critic更加确定，actor再行动。\n\n### target网络噪声\n\nTD3中，价值函数的更新目标每次都在action上加一个小扰动，这个操作就是target policy smoothing regularization\n\n为什么要这样呢？\n\n回到关于“布”的想象。 在DDPG中，计算target的时候，输入时s_和a_，获得q，也就是这块布上的一点A。通过估算target估算另外一点s，a，也就是布上的另外一点B的Q值。\n![Q'估算Q 1.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FQ%27%E4%BC%B0%E7%AE%97Q%201.png)\n\n在TD3中，计算target时候，输入s_到actor输出a后，给a加上噪音，让a在一定范围内随机。这又什么好处呢。\n\n好处就是，当更新多次的时候，就相当于用A点附近的一小部分范围（准确来说是在s_这条线上的一定范围）的去估算B，这样可以让B点的估计更准确，更健壮。\n![Q'估计Q 2.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FQ%27%E4%BC%B0%E8%AE%A1Q%202.png)\n\n这里注意三个地方：\n1. 在实验中，同样加上了了noise。这个时候的noise是为了更充分地开发整个游戏空间。\n2. 计算target的时候，actor加上noise，是为了预估更准确，网络更有健壮性。\n3. 更新actor的时候，不需要加上noise，这里是希望actor能够寻着最大值。加上noise并没有任何意义。\n\n### TD3 实现\nTODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。\n\n这里的TD3仅针对自己的实验平台实现了类似于MATD3的效果，但是实际上，没有明确的MATD3。后面再考虑在gym上实现以加深理解。\n\n\n\n## A3C\n强化学习的一个难点，智能体的用于学习的数据，需要智能体和环境不断进行交互。和一般有监督学习的先比，数据数量太少了。\n\n在算法没有更大进步的时候，有人就想出，如果有多个智能体和环境进行互动，那么每个智能体都能产出数据，这些数据就可以一起给模型进行学习了。\n\n由此诞生了A3C。\n\n![A3C.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FA3C.png)\n\n注意几点：\n1. 在A3C中，worker不仅要和环境互动，产生数据，而且要自己从这些数据里面学习到“心得”。这里的所谓新的，其实就是计算出来的梯度；需要强调的是，worker向全局网络汇总的是梯度，而不是自己探索出来的数据。\n> 在这一点上，很容易和DPPO混淆。DPPO和A3C，也是一个分布式的架构，但work自己并不学习，而是提交数据让全局网络学习。\n2. worker向全局网络汇总梯度之后，并应用在全局网络的参数后，全局网络会把当前学习到的最新版本的参数，直接给worker。worker按照最新的网络继续跟环境做互动。互动后，再把梯度提交，获取新的参数...... 如此循环。\n\n![A3C1.png](..%2Fimage%2F%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%2FA3C1.png)\n\n### A3C 实现\nTODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。\n\n\n## DPPO\n\nDPPO和A3C的思路其实是一致的，希望用多个智能体同时和环境互动，并对全局的PPO网络进行更新。\n\n在A3C，需要跑数据并且计算好梯度，再更新全局网络。这是因为AC是一个在线的算法，所以在更新的时候，产生数据的策略和更新的策略需要时同一个网络。所以不能把worker产出的数据，直接给全局网络计算梯度用。\n\n但PPO解决了离线更新策略的问题，所以DPPO的工人只需要提供数据给全局网络，由全局网络从数据中直接学习。\n\n### DPPO 实现\nTODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。\n\n\n## 写在最后\n\n到这里，传统强化学习的总结就结束了，后面由于我的科研方向是`多智能体强化学习`，会更新关于多智能体强化学习的算法。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","slug":"强化学习","published":1,"layout":"post","photos":[],"link":"","_id":"clx1l2pdx0010nfgndsq6d63a","content":"<blockquote>\n<p>之前没有深入和系统的学习过强化学习，最近由于科研刚需，上网查资料刚好看到知乎上面有个大佬的强化学习的系列文章，感觉写的很好，于是就把他的文章看了一遍，顺便做了一些笔记，这里记录一下。</p>\n</blockquote>\n<p>原文： <a href=\"https://zhuanlan.zhihu.com/p/111895463\">https://zhuanlan.zhihu.com/p/111895463</a></p>\n<p>卧槽大佬讲的真的好，笔记记不了一点！！！建议大家都去看原文！</p>\n<p>后面可能会自己写一下 <code>MADDPG</code> 和 <code>MATD3</code> 的相关内容，到时候再更新。</p>\n<blockquote>\n<p>2023&#x2F;10&#x2F;23 这几天把大佬的强化学习专栏看了一遍了，真的很不错，但是我觉得还是得自己总结一下重难点，且这周五和东大的联合组会轮到我讲了，刚好深入理解一下强化学习算法。所以还是写一下这篇笔记吧！</p>\n</blockquote>\n<p>学习路线：<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.png\" alt=\"学习路线\"></p>\n<h2 id=\"马尔可夫树\"><a href=\"#马尔可夫树\" class=\"headerlink\" title=\"马尔可夫树\"></a>马尔可夫树</h2><p>强化学习的任务：</p>\n<ul>\n<li>我们希望用强化学习的方式，使某个<strong>智能体</strong>获得<strong>独立自主</strong>地完成某种任务的能力。 </li>\n<li>智能体学习和工作的地方，称为<strong>环境</strong>。</li>\n<li>所谓独立自主，就是智能体一旦启动，就不需要人指挥了。</li>\n</ul>\n<h3 id=\"经典马尔可夫链\"><a href=\"#经典马尔可夫链\" class=\"headerlink\" title=\"经典马尔可夫链\"></a>经典马尔可夫链</h3><p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E9%93%BE.png\" alt=\"马尔科夫链.png\"></p>\n<ul>\n<li>状态(state)：智能体观察到的当前环境的部分或者全部特征。<ul>\n<li>注意：环境的特征可能有许多，但只有智能体能够观察到的特征才算是状态。所以也用observation表示状态。</li>\n</ul>\n</li>\n<li>动作(action)：智能体做出的具体行为。<ul>\n<li><strong>动作空间</strong>就是该智能体能够做出的动作数量。智能体身处十字路口。那么我们的方向就有4个。也就是说，动作空间为4个动作。</li>\n</ul>\n</li>\n<li>奖励(reward)：智能体在某个状态下采取某个动作所获得的反馈。<ul>\n<li>奖励是一个标量，可以是正数，也可以是负数。奖励越大，说明智能体做的越好。奖励越小，说明智能体做的越差。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"RL一般步骤\"><a href=\"#RL一般步骤\" class=\"headerlink\" title=\"RL一般步骤\"></a>RL一般步骤</h3><ol>\n<li>智能体在环境中，观察到状态(S)；</li>\n<li>状态(S)被输入到智能体，智能体经过计算，选择动作(A);</li>\n<li>动作(A)使智能体进入另外一个状态(S)，并返回奖励(R)给智能体。</li>\n<li>智能体根据返回，调整自己的策略。 重复以上步骤，一步一步创造马尔科夫链。</li>\n</ol>\n<h3 id=\"马尔可夫树-1\"><a href=\"#马尔可夫树-1\" class=\"headerlink\" title=\"马尔可夫树\"></a>马尔可夫树</h3><p>马尔科夫链之所以是我们现在看到的一条链条。是因为我们站在现在，往过去看，所以是一条确定的路径。但如果我们往前看，就并不是一条路径，而是充满了各种”不确定性”， 即”马尔可夫树”。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E6%A0%91.png\" alt=\"马尔科夫树.png\"></p>\n<p>这种”不确定性”来自两个方面： </p>\n<ul>\n<li>智能体的行动选择(策略)。</li>\n<li>环境的不确定性。</li>\n</ul>\n<h2 id=\"RL中的Q值和V值\"><a href=\"#RL中的Q值和V值\" class=\"headerlink\" title=\"RL中的Q值和V值\"></a>RL中的Q值和V值</h2><p>并不能单纯通过R来衡量一个动作的好坏，因为R只是一个瞬时的反馈，而我们需要的是长期的反馈。在做决策的时候，需要把眼光放远点，把未来的价值换到当前，才能做出选择。</p>\n<p>我们希望可以有一种方法评估我做出每种选择价值。这样，只要看一下标记，以后的事情也不用理，选择那个动作价值更大，就选那个动作就可以了。</p>\n<ul>\n<li>评估动作的价值称为<strong>Q值</strong>：它代表了智能体选择这个动作后，一直到最终状态奖励总和的期望。</li>\n<li>评估状态的价值称为<strong>V值</strong>：它代表了智能体在这个状态下，一直到最终状态的奖励总和的期望。</li>\n</ul>\n<p>价值越高，表示从当前状态到最终状态能获得的平均奖励将会越高。因为智能体的目标数是获取尽可能多的奖励，所以智能体在当前状态，只需要选择价值高的动作就可以了。</p>\n<h3 id=\"V值的定义\"><a href=\"#V值的定义\" class=\"headerlink\" title=\"V值的定义\"></a>V值的定义</h3><p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/V%E5%80%BC%E7%9A%84%E5%AE%9A%E4%B9%89.png\" alt=\"V值的定义.png\"></p>\n<p>假设现在需要求某状态S的V值，可以这样：</p>\n<ol>\n<li>从S点出发，并影分身出若干个自己;</li>\n<li>每个分身按照当前的策略 选择行为;</li>\n<li>每个分身一直走到最终状态，并计算一路上获得的所有奖励总和;</li>\n<li>计算每个影分身获得的平均值,这个平均值就是要求的V值。</li>\n</ol>\n<p>总结：<code>从某个状态，按照策略 ，走到最终状态很多很多次；最终获得奖励总和的平均值，就是V值。</code></p>\n<p><code>V值跟选择的策略有很大的关系</code> 。</p>\n<p>看这样一个简化的例子，从S出发，只有两种选择，A1，A2；从A1，A2只有一条路径到最终状态，获得总奖励分别为10和20。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E4%BE%8B%E5%AD%901.png\" alt=\"例子1.png\"></p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%AD%96%E7%95%A51.png\" alt=\"策略1.png\"></p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%AD%96%E7%95%A52.png\" alt=\"策略2.png\"></p>\n<p>可以看出不同的策略，计算出的V值是不一样的。</p>\n<h3 id=\"Q值的定义\"><a href=\"#Q值的定义\" class=\"headerlink\" title=\"Q值的定义\"></a>Q值的定义</h3><p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/Q%E5%80%BC%E7%9A%84%E5%AE%9A%E4%B9%89.png\" alt=\"Q值的定义.png\"></p>\n<p>现在需要计算，某个状态S0下的一个动作A的Q值： </p>\n<ol>\n<li>从A这个节点出发，使用影分身之术； </li>\n<li>每个影分身走到最终状态,并记录所获得的奖励； </li>\n<li>求取所有影分身获得奖励的平均值，这个平均值就是要求的Q值。</li>\n</ol>\n<p>总结：<code>从某个状态选取动作A，走到最终状态很多很多次；最终获得奖励总和的平均值，就是Q值。</code></p>\n<p>与V值不同，Q值和策略并没有直接相关，而<code>与环境的状态转移概率相关，而环境的状态转移概率是不变的。</code></p>\n<h3 id=\"V值和Q值关系\"><a href=\"#V值和Q值关系\" class=\"headerlink\" title=\"V值和Q值关系\"></a>V值和Q值关系</h3><p><code>Q和V之间是可以相互换算的</code>。</p>\n<h4 id=\"Q值转V值\"><a href=\"#Q值转V值\" class=\"headerlink\" title=\"Q值转V值\"></a>Q值转V值</h4><p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/Q%E5%80%BC%E8%BD%ACV%E5%80%BC.png\" alt=\"Q值转V值.png\"></p>\n<p>从定义出发，我们要求的V值，就是从状态S出发，到最终获取的所获得的奖励总和的期望值。也就是蓝色框部分。</p>\n<p>S状态下有若干个动作，每个动作的Q值，就是从这个动作之后所获得的奖励总和的期望值。也就是红色框部分。</p>\n<p>假设已经计算出每个动作的Q值，那么在计算V值的时候就不需要一直走到最终状态了，只需要走到动作节点，看一下每个动作节点的Q值，根据策略 ，计算Q的期望就是V值了。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/Q%E5%80%BC%E8%BD%ACV%E5%80%BC1.png\" alt=\"Q值转V值1.png\"></p>\n<p>更正式的公式如下：<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%8F1.png\" alt=\"公式1.png\"></p>\n<p>解释：<code>一个状态的V值，就是这个状态下的所有动作的Q值，在策略下的期望。</code></p>\n<h4 id=\"V值转Q值\"><a href=\"#V值转Q值\" class=\"headerlink\" title=\"V值转Q值\"></a>V值转Q值</h4><p><code>Q是V的期望。</code>而这里不需要关注策略，这里是环境的状态转移概率决定的。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/V%E5%80%BC%E8%BD%ACQ%E5%80%BC.png\" alt=\"V值转Q值.png\"></p>\n<p><code>当选择A，并转移到新的状态时，就能获得奖励，我们必须把这个奖励也算上！</code></p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/V%E5%80%BC%E8%BD%ACQ%E5%80%BC1.png\" alt=\"V值转Q值1.png\"></p>\n<p>更正式的公式如下：<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%8F2.png\" alt=\"公式2.png\"></p>\n<blockquote>\n<p>折扣率 在强化学习中，有某些参数是人为主观制定。这些参数并不能推导，但在实际应用中却能解决问题，所以我们称这些参数为超参数，而折扣率就是一个超参数。</p>\n</blockquote>\n<h3 id=\"V值转V值\"><a href=\"#V值转V值\" class=\"headerlink\" title=\"V值转V值\"></a>V值转V值</h3><p>实际应用中，更多会从V到V。其实就是把Q值的公式代入V值的公式。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/V%E5%80%BC%E8%BD%ACV%E5%80%BC.png\" alt=\"V值转V值.png\"></p>\n<h2 id=\"MC\"><a href=\"#MC\" class=\"headerlink\" title=\"MC\"></a>MC</h2><p>蒙地卡罗方法(Monte-Carlo)</p>\n<h3 id=\"蒙地卡罗算法\"><a href=\"#蒙地卡罗算法\" class=\"headerlink\" title=\"蒙地卡罗算法\"></a>蒙地卡罗算法</h3><ol>\n<li>把智能体放到环境的任意状态；</li>\n<li>从这个状态开始按照策略进行选择动作，并进入新的状态。</li>\n<li>重复步骤2，直到最终状态；</li>\n<li>从最终状态开始向前回溯：计算每个状态的G值。</li>\n<li>重复1-4多次，然后平均每个状态的G值，这就是要求的V值。</li>\n</ol>\n<h3 id=\"G值的意义\"><a href=\"#G值的意义\" class=\"headerlink\" title=\"G值的意义\"></a>G值的意义</h3><p>重要：<code>G值是一个具体的累积奖励值，而Q值和V值是对这个累积奖励值的估计。</code></p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/G%E5%80%BC%E7%9A%84%E6%84%8F%E4%B9%89.png\" alt=\"G值的意义.png\"></p>\n<ul>\n<li>第一步，根据策略往前走，一直走到最后，期间什么都不用算，还需要记录每一个状态转移，获得多少奖励r即可。</li>\n<li>第二步，从终点往前走，一遍走一遍计算G值。G值等于上一个状态的G值(记作G’),乘以一定的折扣(gamma),再加上r。</li>\n</ul>\n<p>所以G值的意义在于，<code>在这一次游戏中，某个状态到最终状态的奖励总和(理解时可以忽略折扣值gamma)。</code></p>\n<p>当进行多次试验后，有可能会经过某个状态多次，通过回溯，也会有多个G值。 重复刚才说的，每一个G值，就是每次到最终状态获得的奖励总和。<code>而V值是某个状态下，通过影分身到达最终状态，所有影分身获得的奖励的平均值。</code></p>\n<p>理解：</p>\n<ol>\n<li><code>G的意义：在某个路径上，状态S到最终状态的总收获。 </code></li>\n<li><code>V和G的关系：V是G的平均数。</code></li>\n</ol>\n<h3 id=\"V和策略相关\"><a href=\"#V和策略相关\" class=\"headerlink\" title=\"V和策略相关\"></a>V和策略相关</h3><p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%AD%96%E7%95%A53.png\" alt=\"策略3.png\"></p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%AD%96%E7%95%A54.png\" alt=\"策略4.png\"></p>\n<p>由于策略改变，经过某条路径的概率就会产生变化。因此最终试验经过的次数就不一样了。</p>\n<h3 id=\"蒙地卡罗算法的缺点\"><a href=\"#蒙地卡罗算法的缺点\" class=\"headerlink\" title=\"蒙地卡罗算法的缺点\"></a>蒙地卡罗算法的缺点</h3><p>每一次游戏，都需要先从头走到尾，再进行回溯更新。如果最终状态很难达到，那可能每一次都要转很久很久才能更新一次G值。</p>\n<h3 id=\"MC的更新公式\"><a href=\"#MC的更新公式\" class=\"headerlink\" title=\"MC的更新公式\"></a>MC的更新公式</h3><p>上面计算V值其实相当麻烦，因为每一个状态都需要建立一个空间，记录每个轨迹下的G值。</p>\n<p>那有没有一种方法，可以用更少的空间计算V值呢？当然有，那就是<code>增量更新</code>。</p>\n<h4 id=\"增量更新\"><a href=\"#增量更新\" class=\"headerlink\" title=\"增量更新\"></a>增量更新</h4><p>现在我们只需要记录之前的平均值V，新加进来的G，和次数N。我们把V和G的差，除以N，然后再加到原来的平均值V上，就能计算到新的V值。 </p>\n<p><code>V_new = (V_old - G) * (1 / N) + V_old</code></p>\n<ul>\n<li>V_old：原来的V值</li>\n<li>G：这一次回溯后，计算出来的G值</li>\n<li>N: 这个状态被经过多少次</li>\n<li>V_new：新计算出来的V值</li>\n</ul>\n<h4 id=\"更进一步\"><a href=\"#更进一步\" class=\"headerlink\" title=\"更进一步\"></a>更进一步</h4><p>这样计算还是比较麻烦，我们甚至可以不用记录N，把(1&#x2F;N)设置成为一个固定的数，例如0.1、0.2(还记得超参数吗？)。我们把这个值称为<code>学习率</code>。</p>\n<p>这就相当于，我们新来的G和V_old的差的十分之一，会被加到V_new上！也就是说，每一次G都会引导V增加一些或者减少一些，而这个V值慢慢就会接近真正的V值。</p>\n<p>这里的G，也称为V的更新目标。</p>\n<p>而学习率就可以理解为，每次V向目标靠近的幅度；学习率越大，表示向G靠近的幅度越大，反之则越小。</p>\n<h4 id=\"两种理解方式\"><a href=\"#两种理解方式\" class=\"headerlink\" title=\"两种理解方式\"></a>两种理解方式</h4><p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E4%B8%A4%E7%A7%8D%E7%90%86%E8%A7%A3%E6%96%B9%E5%BC%8F.png\" alt=\"两种理解方式.png\"></p>\n<h2 id=\"TD\"><a href=\"#TD\" class=\"headerlink\" title=\"TD\"></a>TD</h2><p>时序差分算法TD(Temporal-Difference)</p>\n<h3 id=\"TD和MC的比较\"><a href=\"#TD和MC的比较\" class=\"headerlink\" title=\"TD和MC的比较\"></a>TD和MC的比较</h3><p>TD算法对蒙地卡罗(MC)进行了改进：</p>\n<ol>\n<li>和蒙地卡罗(MC)不同：<code>TD算法只需要走N步，不用走到终点，就可以开始回溯更新。</code> </li>\n<li>和蒙地卡罗(MC)一样：需要先走N步，每经过一个状态，把奖励r记录下来。然后开始回溯。 </li>\n<li>那么，状态的V值怎么算呢？其实和蒙地卡罗一样，就假设N步之后，就到达了最终状态了。<ul>\n<li>假设“最终状态”上之前没有走过，所以这个状态上的纸是空白的。这个时候我们就当这个状态为0. </li>\n<li>假设“最终状态”上已经走过了，这个状态的V值，就是当前值。然后我们开始回溯。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"直观理解\"><a href=\"#直观理解\" class=\"headerlink\" title=\"直观理解\"></a>直观理解</h3><p>从A状态，经过1步，到B状态。什么都不管就当B状态是最终状态了。此时<code>N = 0</code>，也叫做<code>TD(0)</code>。</p>\n<p>但B状态本身就带有一定的价值，也就是V值。其意义就是从B状态到最终状态的总价值期望。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/TD(0).png\" alt=\"TD(0).png\"></p>\n<p>假设B状态的V值是对的，那么，通过回溯计算，就能知道A状态的更新目标了。</p>\n<h3 id=\"更新公式\"><a href=\"#更新公式\" class=\"headerlink\" title=\"更新公式\"></a>更新公式</h3><p>TD并走走完整段路程，而是半路就截断。用半路的路牌，更新当前的路牌。 <code>所以只需要把MC的更新目标，改为TD的更新目标即可。</code></p>\n<p><code>在MC，G是更新目标，而在TD，我们只不过把更新目标从G，改成r+gamma*V</code></p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E6%9B%B4%E6%96%B0%E5%85%AC%E5%BC%8F.png\" alt=\"更新公式.png\"></p>\n<h2 id=\"Q-learning\"><a href=\"#Q-learning\" class=\"headerlink\" title=\"Q-learning\"></a>Q-learning</h2><p>之前用TD(0)预估状态价值V:<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/TD(0)%E6%9B%B4%E6%96%B0%E5%85%AC%E5%BC%8F.png\" alt=\"TD(0)更新公式.png\"></p>\n<p>图解：<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/TD(0)%E5%9B%BE%E8%A7%A3.png\" alt=\"TD(0)图解.png\"></p>\n<p>TD能够用在V值，那么也能用在计算Q值上。</p>\n<h3 id=\"TD之于Q值估算\"><a href=\"#TD之于Q值估算\" class=\"headerlink\" title=\"TD之于Q值估算\"></a>TD之于Q值估算</h3><p>现在用上TD的思路。 在St，智能体根据策略pi，选择动作At，进入S(t+1)状态，并获得奖励R。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%94%A8TD%E4%BC%B0%E8%AE%A1Q%E5%80%BC.png\" alt=\"用TD估计Q值.png\"></p>\n<ul>\n<li>V(St+1)的意义是，在St+1到最终状态获得的奖励期望值。 </li>\n<li>Q(St,At)的意义是，在Q(St,At)到最终状态获得的奖励期望值。</li>\n</ul>\n<p>在这里要估算两个东西，一个是V值，一个是Q值。人们想到用下一个动作的Q值代替V值。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%94%A8%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%8A%A8%E4%BD%9C%E7%9A%84Q%E4%BB%A3%E6%9B%BFV.png\" alt=\"用下一个动作的Q代替V.png\"></p>\n<p>但是，这里就有个坑：<code>虽然从状态St+1到动作At+1之间没有奖励反馈，但还是不能直接用At+1的Q价值，代替St+1的V价值。</code></p>\n<p>因为<code>马尔可夫树!</code><br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E5%9D%91%E7%9A%84%E8%A7%A3%E9%87%8A.png\" alt=\"坑的解释.png\"></p>\n<p><code>在St+1下，可能有很多动作At+1。不同动作的Q值自然是不同的。 所以Q(St+1,At+1)并不能等价于V(St+1)。</code></p>\n<p>虽然不相等，但不代表不能用其中一个来代表V(St+1)。人们认为有个可能的动作产生的Q值能够一定程度代表V(St+1)。</p>\n<ol>\n<li>在相同策略下产生的动作At+1。这就是<code>SARSA</code>。</li>\n<li>选择能够产生最大Q值的动作At+1。这就是<code>Qlearning</code>。</li>\n</ol>\n<h3 id=\"SARSA\"><a href=\"#SARSA\" class=\"headerlink\" title=\"SARSA\"></a>SARSA</h3><p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/SARSA.png\" alt=\"SARSA.png\"></p>\n<p>其实SARSA和上一篇说的TD估算V值几乎一模一样，只不过挪了一下，从V改成Q了。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/SARSA%E5%85%AC%E5%BC%8F.png\" alt=\"SARSA公式.png\"><br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/TD(0)%E4%B8%8ESARSA%E5%AF%B9%E6%AF%94.png\" alt=\"TD(0)与SARSA对比.png\"></p>\n<p>注意: <code>这里的At+1是在同一策略产生的。也就是说,St选At的策略和St+1选At+1是同一个策略。这也是SARSA和Qlearning的唯一区别。</code></p>\n<h3 id=\"Qlearning\"><a href=\"#Qlearning\" class=\"headerlink\" title=\"Qlearning\"></a>Qlearning</h3><p><code>Qlearning将能够产生最大Q值的动作At+1的Q值作为V(St+1)的替代。</code></p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/Qlearning%E5%9B%BE%E8%A7%A3.png\" alt=\"Qlearning图解.png\"></p>\n<p>理解：因为需要寻着的是能获得最多奖励的动作，Q值就代表能够获得今后奖励的期望值。所以选择Q值最大的，也只有最大Q值能够代表V值。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/Qlearning%E5%85%AC%E5%BC%8F.png\" alt=\"Qlearning公式.png\"></p>\n<p><code>Q(S,a)的更新目标</code>：在Qlearning，用下一状态St+1的最大Q值替代St+1的V值。V(St+1)加上状态转移产生的奖励R。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/SARSA%E5%85%AC%E5%BC%8F.png\" alt=\"SARSA公式.png\"></p>\n<p>Qleanring和SARSA，两者的差别仅仅在Qlearning中多了个max。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>Qlearning和SARSA都是基于TD(0)的。不过在之前的介绍中，用TD(0)估算状态的V值。而Qlearning和SARSA估算的是动作的Q值。 </li>\n<li>Qlearning和SARSA的核心原理，是用下一个状态St+1的V值，估算Q值。 </li>\n<li>既要估算Q值，又要估算V值会显得比较麻烦。所以用下一状态下的某一个动作的Q值，来代表St+1的V值。 </li>\n<li>Qlearning和SARSA唯一的不同，就是用什么动作的Q值替代St+1的V值。 <ul>\n<li>SARSA 选择的是在St同一个策略产生的动作。 </li>\n<li>Qlearning 选择的是能够产生最大的Q值的动作。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Qlearning-实现\"><a href=\"#Qlearning-实现\" class=\"headerlink\" title=\"Qlearning 实现\"></a>Qlearning 实现</h3><p>TODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。</p>\n<h2 id=\"深度神经网络\"><a href=\"#深度神经网络\" class=\"headerlink\" title=\"深度神经网络\"></a>深度神经网络</h2><p>深度强化学习：用深度神经网络辅助强化学习。</p>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>假如知道X，y有关系，那么不妨先设这个关系可以通过函数Magic(X)获得。也就是说Magic(X)&#x3D;y。</p>\n<p>这在手写数字识别中，X就是需要识别的图片，y就是识别出来的数字分类。 我们的任务就是需要求这个Magic函数。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/Magic(X).png\" alt=\"Magic(X).png\"></p>\n<p>现在假设有另外一个函数Magic’(),这个函数是由深度神经网络构成。</p>\n<p>在刚开始的时候，很明显Magic’(X) 并不等于y，例如输入手写图片8，Magic’()计算后，认为数字8只有20%，但数字9有40%。</p>\n<p>…但这没所谓，因为这是刚开始。我们的任务是让Magic’(X)产生的结果y’ 和 y尽量接近。</p>\n<p>y’和真实y之间的差距，叫损失，也就是loss。有时候也会把y称为目标(target)，因为任务就是让Magic’(X)越来越靠近这个目标。</p>\n<p>衡量loss的方法有很多，定义不同loss对神经网络学习有着重大差别，这个话题太大，我们暂时不展开。</p>\n<p>loss越大，表示和目标差距越远；loss越小，表示和目标越近，当小到一定值，那么就可以认为Magic’(X)和Magic(X)函数非常接近，可以通过Magic’(X)计算出y。</p>\n<p>当有许许多多这样的y，经过许许多多轮后。Magic’就越来越贴近Magic。也就是说X和y之间的关系就能越来越好地表达出来。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/Magic'(X).png\" alt=\"Magic&#39;(X).png\"></p>\n<h4 id=\"放大镜下的深度神经网络\"><a href=\"#放大镜下的深度神经网络\" class=\"headerlink\" title=\"放大镜下的深度神经网络\"></a>放大镜下的深度神经网络</h4><p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%B7%A5%E5%8E%82.png\" alt=\"数据加工厂.png\"></p>\n<p>现在可以把深度神经网络的Magic函数，看成是一个数据加工厂。而X就是要进行加工的数据。</p>\n<p>为了让这个数据加工厂运行得更快，通常需要把要加工的数据X变得更<code>标准</code>一些。</p>\n<p>例如图片的尺寸大小，有多少通道的颜色等等，然后<code>分批(batch)</code>，输入工厂。</p>\n<p>在输入工厂的时候，会有一个‘大门’，称为<code>输入层</code>，去检查数据是否已经按照工厂的标准整理好。</p>\n<p>数据工厂里有很多车间，按照流水线排列。和一般的自动化车间一样，需要定义好这个车间的操作标准。</p>\n<p>一般称这些车间叫<code>层</code>。<code>这些层都已经封装好在tensorflow、tensorlayer、pytorch等里面了</code>。常用的层包括：<code>Dense、Conv2D、LSTM、Reshape、Flatten</code>等。</p>\n<p>最终，数据工厂会把原数据X，加工成产品<code>y&#39;(也叫做：logits)</code>。从源数据加工成产品的过程，叫<code>正向传播</code>。</p>\n<p>但产品y’是否是一个合格的产品，我们还需要我们真正的<code>y(lables)</code>作为标准去鉴定。把<code>鉴定出来的差距就是loss</code>。</p>\n<p>工厂根据鉴定结果，以梯度下降的方式，反向传递给每个车间，告诉车间要如何调整各自的参数，让源数据和产出y’能够对应起来。</p>\n<p>经过N个批次（batch）的数据输入，然后鉴别，工厂调整。最后工厂就能达到生产标准了。也就是说magic函数已经被训练好了。</p>\n<h2 id=\"DQN\"><a href=\"#DQN\" class=\"headerlink\" title=\"DQN\"></a>DQN</h2><blockquote>\n<p><code>DQN: TD + 神经网络</code></p>\n</blockquote>\n<p>在Qlearning中，有一个Qtable，记录着在每一个状态下，各个动作的Q值。</p>\n<p>Qtable的作用是当输入状态S，通过查表返回能够获得最大Q值的动作A。也就是需要找一个S-A的对应关系。</p>\n<p>这种方式很适合格子游戏。因为格子游戏中的每一个格子就是一个状态，但在现实生活中，很多状态并不是离散而是连续的。</p>\n<p><code>用神经网络解决Qlearning中动作离散的问题，让动作变成连续的，这就是DQN。</code></p>\n<p><code>Deep network + Qlearning = DQN</code></p>\n<p>神经网络万能函数(神经网络)Magic(X)接受输入一个状态S，它能告诉我，每个动作的Q值是怎样的。</p>\n<h3 id=\"理解DQN中的神经网络\"><a href=\"#理解DQN中的神经网络\" class=\"headerlink\" title=\"理解DQN中的神经网络\"></a>理解DQN中的神经网络</h3><p>Qtable三维可视化：<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/Qtable%E4%B8%89%E7%BB%B4%E5%8F%AF%E8%A7%86%E5%8C%96.png\" alt=\"Qtable三维可视化.png\"></p>\n<p>图中每根柱子的高度，表示状态S下，选择动作A的Q值。</p>\n<p><code>现在用函数来表示，相当于要扭曲一条曲线，这条曲线穿过了离散状态下的所有点。</code></p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E6%89%AD%E6%9B%B2%E7%9A%84%E6%9B%B2%E7%BA%BF.png\" alt=\"扭曲的曲线.png\"></p>\n<p>从二维状态看：<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E4%BA%8C%E7%BB%B4%E6%9B%B2%E7%BA%BF.png\" alt=\"二维曲线.png\"></p>\n<p>所以现在不但可以取状态3和状态4，还可以取状态3.5的Q值。</p>\n<p>现在就很清楚了，其实Qlearning和DQN并没有根本的区别。<code>只是DQN用神经网络，也就是一个函数替代了原来Qtable而已。</code></p>\n<h3 id=\"更新目标\"><a href=\"#更新目标\" class=\"headerlink\" title=\"更新目标\"></a>更新目标</h3><p>更新目标就是Magic(X)，最终要向这个Magix(X)靠近。</p>\n<p>在Qlearning，用下一状态St+1的最大Q值替代St+1的V值。V(St+1)加上状态转移产生的奖励R。就是Q(S,a)的更新目标。</p>\n<p>DQN和Qlearning一样：<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DQN.png\" alt=\"DQN.png\"><br>假设需要更新当前状态St下的某动作A的Q值：Q(S,A),可以这样做： </p>\n<ol>\n<li>执行A，往前一步，到达St+1; </li>\n<li>把St+1输入Q网络，计算St+1下所有动作的Q值； </li>\n<li>获得最大的Q值加上奖励R作为更新目标； </li>\n<li>计算损失 <ul>\n<li>Q(S,A)相当于有监督学习中的logits</li>\n<li>maxQ(St+1) + R 相当于有监督学习中的lables </li>\n<li>用mse函数，得出两者的loss </li>\n<li>Loss &#x3D; (Q(S, A) - [gamma * maxQ(St+1) + R])^2</li>\n</ul>\n</li>\n<li>用loss更新Q网络。(反向传播)</li>\n</ol>\n<blockquote>\n<p>通常会使用一个折扣因子 gamma 来考虑未来奖励的重要性。折扣因子 gamma 的作用是对未来奖励进行衰减，使得当前时刻的奖励比未来时刻的奖励更具有影响力。</p>\n</blockquote>\n<p>也就是，用Q网络估算出来的两个相邻状态的Q值，他们之间的距离，就是一个r的距离。这个就是更新目标<br><code>Target = R + gamma * maxQ(St+1)</code></p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DQN%E5%85%AC%E5%BC%8F.png\" alt=\"DQN公式.png\"></p>\n<p>总结：</p>\n<ol>\n<li>其实DQN就是Qlearning扔掉Qtable，换上深度神经网络。</li>\n<li>解决连续型问题，如果表格不能表示，就用函数，而最好的函数就是深度神经网络。</li>\n<li>和有监督学习不同，深度强化学习中，需要自己找更新目标。通常在马尔科夫链体系下，两个相邻状态状态差一个奖励r经常能够作为更新目标。</li>\n</ol>\n<h3 id=\"DQN-实现\"><a href=\"#DQN-实现\" class=\"headerlink\" title=\"DQN 实现\"></a>DQN 实现</h3><p>TODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。</p>\n<h2 id=\"Double-DQN\"><a href=\"#Double-DQN\" class=\"headerlink\" title=\"Double DQN\"></a>Double DQN</h2><h3 id=\"经验回放\"><a href=\"#经验回放\" class=\"headerlink\" title=\"经验回放\"></a>经验回放</h3><p>经验回放解决了强化学习中的两个问题： <code>训练网络数据采集慢</code> 和 <code>过度拟合</code></p>\n<p>当然这个慢是对比网络训练的速度。在强化学习中，网络训练经过GPU的加速，比起游戏来时快很多的。所以训练的瓶颈一般在智能体跟环境互动的过程中。 如果能把互动过程中的数据，都存起来，当数据最够多的时候，再训练网络，那么就快很多了。</p>\n<p>把每一步的s，选择的a，进入新的状态s’，获得的奖励r，新状态是否为终止状态。都存在一个叫回放缓存的地方(replay buffer)。<br>当智能体与环境互动期间，就会不断产生这样一条一条数据。 数据1： 数据2： 数据3： ….<br>当数据量足够，达到设定一个batch的大小，便从中抽出一个batch大小的数据，把这笔数据一起放入网络进行训练。<br>训练之后继续进行游戏，继续把新产生的数据添加到回放缓存里…<br>就这样每次都随机抽出一个batch大小的数据训练智能体。这样，以前产生的数据同样也能用来训练数据了, 效率自然更高。</p>\n<p>使用经验回放除了使训练更高效，同时也减少了训练产生的过度拟合的问题。<br>过度拟合，放到人身上就是<code>过度依赖局部经验</code>了。<br>就像孩子发现爸爸有胡子，就认为所有男人都有胡子一样。<br>同样，在有监督学习中，如果只给模型看少量的几张图，并且告诉模型这是猫。这样模型就只会从这几张图学习到猫的特点，而更多的猫模型可能就不认得了。我们说这就是过度拟合造成的，导致模型不够健壮。</p>\n<h3 id=\"DQN的问题\"><a href=\"#DQN的问题\" class=\"headerlink\" title=\"DQN的问题\"></a>DQN的问题</h3><p>DQN的目标：<br><code>Target = R + gamma * maxQ(St+1)</code></p>\n<p>目标本身就包含一个Q网络，理论上是没有问题的，但，这样会造成Q网络的学习效率比较低，而且不稳定。</p>\n<p>如果把训练神经网络比喻成射击游戏，在target中有Q网络的话，就相当于在射击一个移动靶，因为每次射击一次，靶就会挪动一次。相比起固定的靶，无疑加上了训练的难度。</p>\n<p>要解决这个问题，就把移动靶弄成是固定的靶，先停止10秒。10后挪动靶再打新的靶。这就是<code>Fixed Q-targets</code>的思路。</p>\n<h3 id=\"Fixed-Q-targets\"><a href=\"#Fixed-Q-targets\" class=\"headerlink\" title=\"Fixed Q-targets\"></a>Fixed Q-targets</h3><p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/fix-Q-targets.png\" alt=\"fix-Q-targets.png\"></p>\n<p>其他地方和DQN一样，唯一不同是用了两个Q网络。</p>\n<ul>\n<li>原来的Q网络，用于估算Q(s);</li>\n<li>targetQ网络, targetQ自己并不会更新，也就是它在更新的过程中是固定的，用于计算更新目标。<ul>\n<li><code>y = r + gamma * max(targetQ(s&#39;))</code></li>\n<li>进行N次更新后，就把新Q网络的参数赋值给旧Q网络，保持训练的稳定性。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Double-DQN-1\"><a href=\"#Double-DQN-1\" class=\"headerlink\" title=\"Double DQN\"></a>Double DQN</h3><p>DQN有一个显著的问题，就是DQN估计的Q值往往会偏大。这是由于Q值是以下一个s’的Q值的最大值来估算的，但下一个state的Q值也是一个估算值，也依赖它的下一个state的Q值…，这就导致了Q值往往会有偏大的的情况出现。</p>\n<p>这个思路也很直观。如果只有一个Q网络，Q值的估计往往偏大。那就用两个Q网络，因为两个Q网络的参数有差别，所以对于同一个动作的评估也会有少许不同。选取评估出来较小的值来计算更新目标。这样就能有效避免Q网络估值偏大的情况发生了。</p>\n<p>另外一种做法也需要用到两个Q网络：Q1网络推荐能够获得最大Q值的动作；Q2网络计算这个动作在Q2网络中的Q值。</p>\n<h3 id=\"Double-DQN-实现\"><a href=\"#Double-DQN-实现\" class=\"headerlink\" title=\"Double DQN 实现\"></a>Double DQN 实现</h3><p>TODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。</p>\n<h2 id=\"Duel-DQN\"><a href=\"#Duel-DQN\" class=\"headerlink\" title=\"Duel DQN\"></a>Duel DQN</h2><h3 id=\"Dueling-DQN原理\"><a href=\"#Dueling-DQN原理\" class=\"headerlink\" title=\"Dueling DQN原理\"></a>Dueling DQN原理</h3><p>回到Qtable， 原来会直接预估Q值表的数据，现在改为需要预估两个值：S值和A值。即<code>Q = S + A</code></p>\n<ul>\n<li>S: 在特定状态下采取任何行动的平均价值,也就是该state下的Q值的平均数。</li>\n<li>A: 在特定状态下采取特定动作相对于采取平均动作的优势。A的平均值为0。</li>\n</ul>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/Q=S+A%E8%A1%A8%E6%A0%BC.png\" alt=\"Q=S+A表格.png\"></p>\n<p>普通DQN的Q网络，可以理解用一个曲线去拟合Qtable的Q值。现在取一个截面，表示当取某个S下，各个动作的Q值。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E6%99%AE%E9%80%9ADQN.png\" alt=\"普通DQN.png\"></p>\n<p>普通DQN在提升某个状态下的S值时，只会提升某个动作。</p>\n<p>Dueling DQN： 在网络更新的时候，由于有A值之和必须为0的限制，所以网络会优先更新S值。S值是Q值的平均数，平均数的调整相当于一次性S下的所有Q值都更新一遍。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DuelDQN.png\" alt=\"DuelDQN.png\"></p>\n<p>如上图，橙色虚线是平均值，也就是S值。 所以网络在更新的时候，不但更新某个动作的Q值，而是把这个状态下，所有动作的Q值都调整一次。这样，就可以在更少的次数让更多的值进行更新。</p>\n<blockquote>\n<p>这样调整最后的数值是对的吗？放心，在DuelingDQN，我们只是优先调整S值。但最终我们的target目标是没有变的，所以我们最后更新出来也是对的。</p>\n</blockquote>\n<h3 id=\"网络架构\"><a href=\"#网络架构\" class=\"headerlink\" title=\"网络架构\"></a>网络架构</h3><p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DuelDQN%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84.png\" alt=\"DuelDQN网络架构.png\"></p>\n<p>可以把dueling DQN分为三部分：</p>\n<ul>\n<li>第一部分：和普通DQN一样，用来处理和学习数据。</li>\n<li>第二部分：计算svalue，就是让网络预估的平均值。</li>\n<li>第三部分：计算avalue，和svalue一样，都是从h2层输入到该层。然后对avalue进行归一化处理，也就是增加“A值的平均值为0”的限制。<ul>\n<li>归一化的处理很简单，求A值的平均值，然后用A值减去平均值即可。A-mean(A)</li>\n</ul>\n</li>\n</ul>\n<p>DeulingDQN的实现很简单，只需要修改Q网络的网络架构就可以了。而且可以和其他DQN的技巧，例如经验回放，固定网络，双网络计算目标等可以共用。</p>\n<h3 id=\"Duel-DQN-实现\"><a href=\"#Duel-DQN-实现\" class=\"headerlink\" title=\"Duel DQN 实现\"></a>Duel DQN 实现</h3><p>TODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。</p>\n<h2 id=\"PG\"><a href=\"#PG\" class=\"headerlink\" title=\"PG\"></a>PG</h2><p>策略梯度(Policy Gradient)</p>\n<p>之前的MC、TD、Qlearning、DQN都是基于值的方法，就是一定要算Q值和V值。但事实上我们的最终目的是要找一个策略，能获得最多的奖励。</p>\n<p>这就是<code>策略梯度(Policy Gradient)</code></p>\n<h3 id=\"PG原理\"><a href=\"#PG原理\" class=\"headerlink\" title=\"PG原理\"></a>PG原理</h3><p>认识到：</p>\n<blockquote>\n<p><code>DQN: TD + 神经网络</code><br><code>PG: MC + 神经网络</code></p>\n</blockquote>\n<p>PG中的Magic(state):<br>当输入state的时候，输出pi，告诉智能体这个状态，应该如何应对： &#x3D; magic(state)。如果智能体的动作是对的，那么就让这个动作获得更多被选择的几率；相反，如果这个动作是错的，那么这个动作被选择的几率将会减少。</p>\n<p>复习一下蒙地卡罗：<br>从某个state出发，然后一直走，直到<code>最终状态</code>。然后从最终状态原路返回，对每个状态评估G值。 所以G值能够表示在策略下，智能体选择的这条路径的好坏。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E5%A4%8D%E4%B9%A0MC.png\" alt=\"复习MC.png\"></p>\n<h3 id=\"直观感受PG\"><a href=\"#直观感受PG\" class=\"headerlink\" title=\"直观感受PG\"></a>直观感受PG</h3><p>从某个state出发，可以采取三个动作。 假设当前智能体对这一无所知，那么，可能采取平均策略 Pi0 &#x3D; [33%,33%,33%]。智能体出发，选择动作A，到达最终状态后开始回溯，计算得到 G &#x3D; 1。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%9B%B4%E8%A7%82%E6%84%9F%E5%8F%97PG1.png\" alt=\"直观感受PG1.png\"></p>\n<p>更新策略，因为该路径选择了A而产生的，并获得G &#x3D; 1；因此要更新策略：让A的概率提升，相对地，BC的概率就会降低。 计算得新策略为： Pi1 &#x3D; [50%,25%,25%]。虽然B概率比较低，但仍然有可能被选中。第二轮刚好选中B。智能体选择了B，到达最终状态后回溯，计算得到 G &#x3D; -1。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%9B%B4%E8%A7%82%E6%84%9F%E5%8F%97PG2.png\" alt=\"直观感受PG2.png\"></p>\n<p>此时对B动作的评价比较低，并且希望以后会少点选择B，因此要降低B选择的概率，而相对地，AC的选择将会提高。计算得新策略为： Pi2 &#x3D; [55%,15%,30%]。最后随机到C，回溯计算后，计算得G &#x3D; 5。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%9B%B4%E8%A7%82%E6%84%9F%E5%8F%97PG3.png\" alt=\"直观感受PG3.png\"></p>\n<p>C比A还要多得多。因此这一次更新，C的概率需要大幅提升，相对地，AB概率降低。 Pi3 &#x3D; [20%,5%,75%]。</p>\n<h3 id=\"PG-实现\"><a href=\"#PG-实现\" class=\"headerlink\" title=\"PG 实现\"></a>PG 实现</h3><p>TODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。</p>\n<h2 id=\"AC\"><a href=\"#AC\" class=\"headerlink\" title=\"AC\"></a>AC</h2><blockquote>\n<p><code>AC: PG + DQN(TD + 神经网络)</code></p>\n</blockquote>\n<p>PG利用带权重的梯度下降方法更新策略，而获得权重的方法是MC计算G值。MC需要完成整个游戏过程，直到最终状态，才能通过回溯计算G值。这使得PG方法的效率被限制。</p>\n<p>改为TD可以解决上面的问题。接下来又面临另一个问题：<br>在PG，我们需要计算G值；那么在TD中，我们应该怎样估算每一步的Q值呢？答案是用神经网络。</p>\n<p>也就是说，Actor-Critic，其实是用了两个网络：</p>\n<p>两网络都输入状态S，Critic比Actor多一个St+1: </p>\n<ul>\n<li>一个网络输出策略，负责选择动作，把这个网络成为Actor； </li>\n<li>一个网络负责计算每个动作的分数，把这个网络成为Critic。</li>\n</ul>\n<h3 id=\"TD-error\"><a href=\"#TD-error\" class=\"headerlink\" title=\"TD-error\"></a>TD-error</h3><p><code>在DQN预估的是Q值，在AC中的Critic，估算的是V值。</code>不估算Q值是因为效果不好。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E4%BC%B0%E7%AE%97Q.png\" alt=\"为什么不估算Q.png\"></p>\n<p>假设用Critic网络，预估到S状态下三个动作A1，A2，A3的Q值分别为1,2,10。 但在开始的时候，采用平均策略，于是随机到A1。于是用策略梯度的带权重方法更新策略，这里的权重就是Q值。于是策略会更倾向于选择A1，意味着更大概率选择A1。结果A1的概率就持续升高…</p>\n<p>这就掉进了正数陷阱。明明希望A3能够获得更多的机会，最后却是A1获得最多的机会。这是为什么呢？<br>因为Q值用于是一个正数，如果权重是一个正数，那么相当于提高对应动作的选择的概率。权重越大，调整的幅度将会越大。其实当有足够的迭代次数，这个是不用担心这个问题的。因为总会有机会抽中到权重更大的动作，因为权重比较大，抽中一次就能提高很高的概率。</p>\n<p>但在强化学习中，往往没有足够的时间去和环境互动。这就会出现由于运气不好，使得一个很好的动作没有被采样到的情况发生。要解决这个问题，可以通过减去一个baseline，令到权重有正有负。而通常这个baseline，选取的是权重的平均值。减去平均值之后，值就变成有正有负了。而<code>Q值的期望(均值)就是V。</code></p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/TD-error.png\" alt=\"TD-error.png\"></p>\n<p>可以得到更新的权重：<code>Q(s,a)-V(s)</code>，Q(s,a)用<code>gamma * V(s&#39;) + r</code> 代替。<br>得到TD-error：<code>TD-error = gamma * V(s&#39;) + r - V(s)</code></p>\n<p>和之前DQN的更新公式非常像，只不过DQN的更新用了Q，而TD-error用的是V。如果Critic是用来预估V值，而不是原来讨论的Q值。那么，这个TD-error是用来更新Critic的loss了！没错，Critic的任务就是让TD-error尽量小。然后TD-error给Actor做更新。</p>\n<p>至于为啥TD-error是用来更新Critic的loss呢？<br>取TD-error的方差来作为critic的loss，其实类似于DQN中的Q网络，认为下个状态的估算值比目前状态的Q值更精确，所以把下个状态的估算值作为目标，来更新Q网络。此处单看critic网络吗，其目的仅在于预测V值，所以它的估算值也要向更准确的下个阶段估算值来靠近，即TD-error越来越小。<br>再来看actor网络，TD-error在其中的作用仅是更新网络时的权重，其与动作的选择并无直接关系。前期TD-error较大，每次更新时，动作的概率都会进行相对较大的改动，随着不断地训练，动作的概率逐渐成熟，TD-error越来越小，所以每次更新时对动作概率的改动也随之减小。</p>\n<h4 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ol>\n<li>为了避免正数陷阱，希望Actor的更新权重有正有负。因此，把Q值减去他们的均值V。有：<code>Q(s,a)-V(s)</code></li>\n<li>为了避免需要预估V值和Q值，把Q和V统一；由于<code>Q(s,a) = gamma * V(s&#39;) + r - V(s)</code>。所以我们得到TD-error公式： <code>TD-error = gamma * V(s&#39;) + r - V(s)</code></li>\n<li><code>TD-error就是Actor更新策略时候，带权重更新中的权重值</code>；</li>\n<li>现在Critic不再需要预估Q，而是预估V。而根据马可洛夫链所学，知道TD-error就是Critic网络需要的loss，也就是说，Critic函数需要最小化TD-error。</li>\n</ol>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><ol>\n<li>定义两个network：Actor 和 Critic</li>\n<li>进行N次更新。<ol>\n<li>从状态s开始，执行动作a，得到奖励r，进入状态s’</li>\n<li>记录的数据。</li>\n<li>把输入到Critic，根据公式： TD-error &#x3D; gamma * V(s’) + r - V(s) 求 TD-error，并缩小TD-error</li>\n<li>把输入到Actor，计算策略分布。</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/AC%E7%AE%97%E6%B3%95.png\" alt=\"AC算法.png\"></p>\n<p>可以看出：在PG，智能体需要从头一直跑到尾，直到最终状态才开始进行学习。 在AC，智能体采用是每步更新的方式。</p>\n<h3 id=\"AC-实现\"><a href=\"#AC-实现\" class=\"headerlink\" title=\"AC 实现\"></a>AC 实现</h3><p>TODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。</p>\n<h2 id=\"PPO\"><a href=\"#PPO\" class=\"headerlink\" title=\"PPO\"></a>PPO</h2><p>PPO是基于AC框架的</p>\n<h3 id=\"正态分布\"><a href=\"#正态分布\" class=\"headerlink\" title=\"正态分布\"></a>正态分布</h3><p>首先要想办法处理连续动作的输出问题。</p>\n<ul>\n<li>离散动作：离散动作就像一个个的按钮，按一个按钮就能智能体就做一个动作。</li>\n<li>连续动作：相当于按钮不但有开关的概念，而且还有力度大小的概念。就像开车，不但是前进后退转弯，并且要控制油门踩多深，刹车踩多少的，转弯时候转向转多少的问题。</li>\n</ul>\n<p>在离散动作空间的问题中，最终输出的策略呈现出下面形式：<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%A6%BB%E6%95%A3%E5%8A%A8%E4%BD%9C-%E7%AD%96%E7%95%A5%E5%88%86%E5%B8%83.png\" alt=\"离散动作-策略分布.png\"></p>\n<p>假设动作空间有只有action1 和 action2，有40%的概率选择action1 ，60%概率选择action2。即在此状态下的策略分布: pi &#x3D; [0.4, 0.6]。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E8%BF%9E%E7%BB%AD%E5%9E%8B%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"连续型概率分布示意图.png\"></p>\n<p>在连续型，不再用数组表示，而是用函数表示。例如，策略分布函数 ： P &#x3D; （action）代表在策略下，选择某个action的概率P。</p>\n<p>用神经网络预测输出的策略是一个固定的shape，而不是连续的。那又什么办法可以表示连续型的概率呢？可以假定策略分布函数服从一个概率分布，例如正态分布。</p>\n<p>这样，只用两个参数就可以表示了。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83.png\" alt=\"正态分布.png\"></p>\n<p>正态分布：</p>\n<ul>\n<li>sigma：表示方差，当sigma越大，图像越扁平；sigma约小，图像越突出。而最大值所在的位置，就是中轴线。</li>\n<li>mu：表示平均数，也就是整个正态分布的中轴线。mu的变化，表示整个图像向左右移动。</li>\n</ul>\n<p>神经网络直接输出mu和sigma，就能获得整个策略的概率密度函数了。现在，当要按概率选择一个动作时，就只需要按照这个概率密度函数，随机抽取一个数，就能得到一个动作了。</p>\n<h3 id=\"AC的问题\"><a href=\"#AC的问题\" class=\"headerlink\" title=\"AC的问题\"></a>AC的问题</h3><p>上面的正态分布解决了AC处理连续状态空间的问题。但是，AC还有一个问题：AC产生的数据，只能进行1次更新，更新完就只能丢掉，等待下一次的数据。</p>\n<ul>\n<li><p>行为策略：行为策略是代理在与环境交互时采取行动的策略。它决定了代理在当前状态下选择每一个可能的行动的概率分布。不是当前策略，用于产出数据。</p>\n</li>\n<li><p>目标策略：目标策略是代理在训练过程中试图优化的策略。它是代理最终想要学习到的最优策略，它通常被设计为最大化期望累积奖励。会更新的策略，是需要被优化的策略。</p>\n</li>\n<li><p>在线策略：在线策略是指在与环境交互时实时地采取行动，并根据实时的反馈来更新策略。也就是说，代理在与环境互动时，采取行动并根据实际结果来调整策略。目标策略和行为策略是同一个策略，那么是在线策略。</p>\n<ul>\n<li>实时更新：在线策略会根据每次与环境交互的结果来进行即时更新。</li>\n<li>依赖实时反馈：在线策略依赖于实时的环境反馈来进行学习和调整。</li>\n</ul>\n</li>\n<li><p>离线策略：离线策略是指在事先收集好的数据集上进行训练，而不需要实时地与环境交互。也就是说，代理使用事先收集的经验数据来训练策略，而不依赖于实时环境反馈。目标策略和行为策略不是同一个策略，那么是离线策略。</p>\n<ul>\n<li>离线数据：训练过程中不需要实时地与环境进行交互，可以使用先前收集的数据。</li>\n<li>无需环境互动：训练过程中不需要实时环境反馈。</li>\n</ul>\n</li>\n</ul>\n<p>例子：<br>如果在智能体和环境进行互动时产生的数据打上一个标记。标记这是第几版本的策略产生的数据,例如 1， 2… 10。现在智能体用的策略 10，需要更新到 11。如果算法只能用 10版本的产生的数据来更新，那么这个就是在线策略；如果算法允许用其他版本的数据来更新，那么就是离线策略。</p>\n<p>例如PG，就是一个在线策略。因为PG用于产生数据的策略（行为策略），和需要更新的策略（目标策略）是一致。 而DQN则是一个离线策略。我们会让智能体在环境互动一定次数，获得数据。用这些数据优化策略后，继续跑新的数据。但老版本的数据仍然是可以用的。也就是说，产生数据的策略，和要更新的目标策略不是同一个策略。所以DQN是一个离线策略。</p>\n<p><strong>为什么PG和AC中的Actor更新策略，不能像DQN一样把数据存起来，只能用一次产生的数据？</strong></p>\n<p>看一个例子：<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%AD%96%E7%95%A5P%E5%92%8C%E7%AD%96%E7%95%A5B.png\" alt=\"策略P和策略B.png\"></p>\n<blockquote>\n<p>TD-error 可以理解为从状态S 到下一个状态动作的价值，所以动作1的 TD-error 大，所以希望选择动作1的概率大</p>\n</blockquote>\n<p>假设，已知在同一个环境下，有两个动作可以选择。现在两个策略，分别是P和B： P: [0.5,0.5] B: [0.1,0.9]</p>\n<p>现在按照两个策略，进行采样；也就是分别按照这两个策略，以S状态下出发，与环境进行10次互动。获得如图数据。那么，可以用B策略下获得的数据，更新P吗？</p>\n<p>答案是不行，回顾PG算法，<code>PG算法会按照TD-error作为权重，更新策略。权重越大，更新幅度越大；权重越小，更新幅度越小。</code></p>\n<p>但可以从如下示意图看到，如果用行动策略B[0.1,0.9]产出的数据，对目标策略P进行更新，动作1会被更新1次，而动作2会更新9次。虽然动作1的TD-error比较大，但由于动作2更新的次数更多，最终动作2的概率会比动作1的要大。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%AD%96%E7%95%A5P%E5%92%8C%E7%AD%96%E7%95%A5B%E6%9B%B4%E6%96%B0%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"策略P和策略B更新示意图.png\"></p>\n<p>这不是期望看到的更新结果，因为动作1的TD-error比动作2要大，希望的是选择概率动作1的能更多。由此可以明白，在策略更新的时候不能使用其他策略产生的数据。</p>\n<p><strong>为什么DQN可以多次重复使用数据？</strong></p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DQN%E6%9B%B4%E6%96%B0%E7%9A%84%E6%98%AFQ%E5%80%BC.png\" alt=\"DQN更新的是Q值.png\"></p>\n<p>两个角度：</p>\n<ul>\n<li>更新Q值，和策略无关。 在同一个动作出发，可能会通往不同的state，但其中的概率是状态转移概率决定的，与环境有关，而不是策略所决定的。所以产生的数据和策略并没有关系。</li>\n<li>在DQN的更新中是有”目标”的。 虽然目标比较飘忽，但每次更新，其实都是尽量向目标靠近。无论更新多少次，最终都会在目标附近徘徊。但PG算法，更新是不断远离原来的策略分布的，所以远离多少、远离的次数比例都必须把握好。</li>\n</ul>\n<blockquote>\n<p>在Actor-Critic (AC) 方法中，Critic 网络更新的是状态值函数（Value Function）V，而不是动作值函数（Q函数）。</p>\n</blockquote>\n<h3 id=\"重要性采样技术\"><a href=\"#重要性采样技术\" class=\"headerlink\" title=\"重要性采样技术\"></a>重要性采样技术</h3><p>在PPO中，如果想使用策略B的数据来更新策略P，那就要把TD-error乘上一个重要性权重(importance weight)。</p>\n<p>在这里<code>IW = P（a）/ B（a）</code></p>\n<p>就是 <code>IW = 目标策略出现动作a的概率 / 行为策略出现a的概率</code>。</p>\n<ul>\n<li>目标策略：要更新的策略。</li>\n<li>行为策略：数据的策略。</li>\n</ul>\n<p>这里是用策略B的数据来更新策略P，所以P是目标策略，B是行为策略。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E9%87%8D%E8%A6%81%E6%80%A7%E6%9D%83%E9%87%8D%E8%A1%A8%E6%A0%BC.png\" alt=\"重要性权重表格.png\"></p>\n<p>现在即使用P策略: [0.5,0.5]进行更新，a1提升的概率也会比a2的更多。</p>\n<p>PPO使用重要性采样技术把AC从在线策略变成离线策略。</p>\n<h3 id=\"N步更新\"><a href=\"#N步更新\" class=\"headerlink\" title=\"N步更新\"></a>N步更新</h3><p>之前的TD叫做TD(0)，而N步更新为TD(n)。可以看成TD(0)其实是TD(n)的一种特殊情况。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/TD(N).png\" alt=\"TD(N).png\"></p>\n<p>如图，实际上只需要计算最后的V(s’)，根据这个估算的V(s’), 反推经过的所有state的V值。这个其实和PG估算G的过程是一样的，只不过并不需要走到最后，而是中途截断，用网络估算。</p>\n<p><code>V = R + gamma * V(s&#39;)</code></p>\n<h3 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>实际上，P策略和B策略差异并不能太大，为了能处理这个问题，有两个做法，PPO1 和 PPO2 。主流是PPO2。</p>\n<ol>\n<li>用AC来解决连续型控制问题。方法是输入mu和sigma，构造一个正态分布来表示策略； </li>\n<li>PPO延展了TD(0)，变成TD(N)的N步更新； </li>\n<li>AC是一个在线算法，但为了增加AC的效率，希望把它变成一个离线策略，这样就可以多次使用数据了。为了解决这个问题，PPO使用了重要性采样。</li>\n</ol>\n<h3 id=\"PPO-实现\"><a href=\"#PPO-实现\" class=\"headerlink\" title=\"PPO 实现\"></a>PPO 实现</h3><p>TODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。</p>\n<h2 id=\"DDPG\"><a href=\"#DDPG\" class=\"headerlink\" title=\"DDPG\"></a>DDPG</h2><p>DDPG，全称是deep deterministic policy gradient，深度确定性策略梯度算法。</p>\n<ul>\n<li>deep: 深度网络。</li>\n<li>policy gradient: PG</li>\n<li>deterministic: 其实DDPG也是解决连续控制型问题的的一个算法，不过和PPO不一样，PPO输出的是一个策略，也就是一个概率分布，而DDPG输出的直接是一个动作。</li>\n</ul>\n<p>DDPG更接近DQN，是用一个actor去弥补DQN不能处理连续控制性问题的缺点。</p>\n<h3 id=\"回顾DQN\"><a href=\"#回顾DQN\" class=\"headerlink\" title=\"回顾DQN\"></a>回顾DQN</h3><p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E5%9B%9E%E9%A1%BEDQN.png\" alt=\"回顾DQN.png\"></p>\n<p>从公式中也能看出，DQN不能用于连续控制问题原因，是因为maxQ(s’,a’)函数只能处理离散型的。这个就是DDPG中的Actor的功能: 用一个magic函数，直接替代maxQ(s’,a’)的功能。也就是说，期待输入状态s，magic函数返回我们动作action的取值，这个取值能够让q值最大。</p>\n<h3 id=\"理解DDPG\"><a href=\"#理解DDPG\" class=\"headerlink\" title=\"理解DDPG\"></a>理解DDPG</h3><p>DDPG中Critic的功能，像是DQN的深度网络，用一张布去覆盖Qlearning中的Qtable。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%90%86%E8%A7%A3DDPG1.png\" alt=\"理解DDPG1.png\"></p>\n<p>当把某个state输入到DDPG的Actor中的时候，相当于在这块布上做沿着state所在的位置剪开，会看到这个边缘是一条曲线。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%90%86%E8%A7%A3DDPG2.png\" alt=\"理解DDPG2.png\"></p>\n<blockquote>\n<p>注意: 这条曲线很像概率分布，但要一定注意，这里并不是策略，也不是PPO和AC中的V值。是在某个状态state下，选择某个动作值的时候，能获得的Q值。</p>\n</blockquote>\n<p>Actor的任务就是在寻找这个曲线的最高点，然后返回能获得这个最高点，也是最大Q值的动作。 所以，DDPG其实并不是PG，并没有做带权重的梯度更新。而是在梯度上升，在寻找最大值。 这也就解释了，为什么DDPG是一个离线策略，但可以多次更新却不用importance sampling。这是因为这个算法就是DQN，和策略没有直接的关系。</p>\n<h3 id=\"DDPG-1\"><a href=\"#DDPG-1\" class=\"headerlink\" title=\"DDPG\"></a>DDPG</h3><p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DDPG1.png\" alt=\"DDPG1.png\"></p>\n<p>整理下：</p>\n<h4 id=\"Critic\"><a href=\"#Critic\" class=\"headerlink\" title=\"Critic\"></a>Critic</h4><ol>\n<li>Critic网络的作用是预估Q，虽然它还叫Critic，但和AC中的Critic不一样，这里预估的是Q不是V；</li>\n<li>注意Critic的输入有两个：动作和状态，需要一起输入到Critic中；</li>\n<li>Critic网络的loss其还是和AC一样，用的是TD-error。</li>\n</ol>\n<h4 id=\"Actor\"><a href=\"#Actor\" class=\"headerlink\" title=\"Actor\"></a>Actor</h4><ol>\n<li>和AC不同，Actor输出的是一个动作；</li>\n<li>Actor的功能是，输出一个动作A，这个动作A输入到Critic后，能够获得最大的Q值。</li>\n<li>Actor的更新方式和AC不同，不是用带权重梯度更新，而是用梯度上升。</li>\n</ol>\n<p>和DQN一样，DDPG更新的时候如果更新目标在不断变动，会造成更新困难。所以DDPG和DQN一样，用了固定网络(fix network)技术，就是先冻结住用来求target的网络。在更新之后，再把参数赋值到target网络。</p>\n<p>所以实际做的时候使用了4个网络：actor, critic, Actor_target, cirtic_target。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DDPG2.png\" alt=\"DDPG2.png\"></p>\n<blockquote>\n<p>目标网络只是用在求target的过程中。如果不是求target用的，就不用目标网络。</p>\n</blockquote>\n<h3 id=\"DDPG-实现\"><a href=\"#DDPG-实现\" class=\"headerlink\" title=\"DDPG 实现\"></a>DDPG 实现</h3><p>TODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。</p>\n<h2 id=\"TD3\"><a href=\"#TD3\" class=\"headerlink\" title=\"TD3\"></a>TD3</h2><p>Twin Delayed Deep Deterministic policy gradient algorithm，双延迟深度确定性策略梯度</p>\n<p>TD3是对DDPG的优化，三个重要优化。</p>\n<h3 id=\"double-network\"><a href=\"#double-network\" class=\"headerlink\" title=\"double network\"></a>double network</h3><p>DDPG起源于DQN，DQN有一个众所周知的问题就是Q值会被过高估计。这是因为用argmaxQ(s’)去代替V(s’)，去评估Q(s)。当每一步都这样做的时候，很容易就会出现高估Q值的情况。</p>\n<p>在TD3中，用了两套网络估算Q值，相对较小的那个作为更新的目标。这就是TD3的基本思路。</p>\n<p>回顾DDPG：<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DDPG2.png\" alt=\"DDPG2.png\"></p>\n<p>通过Critic网络估算动作的A值。一个Critic的评估可能会较高。所以加一个。</p>\n<p>TD3需要用到6个网络：<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/TD3.png\" alt=\"TD3.png\"></p>\n<p>在目标网络中，估算出来的Q值会用min()函数求出较小值。以这个值作为更新的目标。这个目标会更新两个网络 Critic网络_1 和 Critic网络_2。 这两个网络是完全独立，他们只是都用同一个目标进行更新。 剩余的就和DDPG一样了。过一段时间，把学习好的网络赋值给目标网络。</p>\n<h4 id=\"Critic部分的学习\"><a href=\"#Critic部分的学习\" class=\"headerlink\" title=\"Critic部分的学习\"></a>Critic部分的学习</h4><p>只有在计算Critic的更新目标时，才用target network。其中就包括了一个Policy network，用于计算A’；两个critic target Q network ,用于计算两个Q值：Q1(A’) 和Q2(A’)。</p>\n<p>Q1(A’) 和Q2(A’) 取最小值 min(Q1,Q2) 将代替DDPG的 Q(a’) 计算更新目标，也就是说： target &#x3D; min(Q1,Q2) * gamma + r</p>\n<p>target 将会是 Q_network_1 和 Q_network_2 两个网络的更新目标。</p>\n<p><code>TD-error_1 = gamma * min(Q1,Q2) + r - Q1</code><br><code>TD-error_2 = gamma * min(Q1,Q2) + r - Q2</code></p>\n<p>既然更新目标是一样的，那么为什么还需要两个网络呢?</p>\n<p>虽然更新目标一样，两个网络会越来越趋近与和实际q值相同。但由于网络参数的初始值不一样，会导致计算出来的值有所不同。所以可以有空间选择较小的值去估算q值，避免q值被高估。</p>\n<h4 id=\"Actor部分的学习\"><a href=\"#Actor部分的学习\" class=\"headerlink\" title=\"Actor部分的学习\"></a>Actor部分的学习</h4><p>DDPG网络图像上就可以想象成一张布，覆盖在qtable上。当输入某个状态的时候，相当于这块布上的一个截面，能够看到在这个状态下的一条曲线。</p>\n<p>而actor的任务，就是用梯度上升的方法，寻着这条线的最高点。</p>\n<p>对于actor来说，其实并不在乎Q值是否会被高估，他的任务只是不断做梯度上升，寻找这条最大的Q值。随着更新的进行Q1和Q2两个网络，将会变得越来越像。所以用Q1还是Q2，还是两者都用，对于actor的问题不大。</p>\n<h3 id=\"actor延迟更新\"><a href=\"#actor延迟更新\" class=\"headerlink\" title=\"actor延迟更新\"></a>actor延迟更新</h3><p>actor更新的delay，也就是说相对于critic可以更新多次后，actor再进行更新。</p>\n<p>为什么要这样做呢？</p>\n<p>回到qnet拟合出来的那块”布”上。 qnet在学习过程中，的q值是不断变化的，也就是说这块布是不断变形的。所以要寻着最高点的任务有时候就挺难为的actor了。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%90%86%E8%A7%A3DDPG1.png\" alt=\"理解DDPG1.png\"><br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%90%86%E8%A7%A3DDPG2.png\" alt=\"理解DDPG2.png\"></p>\n<p>可以想象，本来是最高点的，当actor好不容易去到最高点；q值更新了，这并不是最高点。这时候actor只能转头再继续寻找新的最高点。更坏的情况可能是actor被困在次高点，没有找到正确的最高点。</p>\n<p>所以可以把Critic的更新频率，调的比Actor要高一点。让critic更加确定，actor再行动。</p>\n<h3 id=\"target网络噪声\"><a href=\"#target网络噪声\" class=\"headerlink\" title=\"target网络噪声\"></a>target网络噪声</h3><p>TD3中，价值函数的更新目标每次都在action上加一个小扰动，这个操作就是target policy smoothing regularization</p>\n<p>为什么要这样呢？</p>\n<p>回到关于“布”的想象。 在DDPG中，计算target的时候，输入时s_和a_，获得q，也就是这块布上的一点A。通过估算target估算另外一点s，a，也就是布上的另外一点B的Q值。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/Q'%E4%BC%B0%E7%AE%97Q%201.png\" alt=\"Q&#39;估算Q 1.png\"></p>\n<p>在TD3中，计算target时候，输入s_到actor输出a后，给a加上噪音，让a在一定范围内随机。这又什么好处呢。</p>\n<p>好处就是，当更新多次的时候，就相当于用A点附近的一小部分范围（准确来说是在s_这条线上的一定范围）的去估算B，这样可以让B点的估计更准确，更健壮。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/Q'%E4%BC%B0%E8%AE%A1Q%202.png\" alt=\"Q&#39;估计Q 2.png\"></p>\n<p>这里注意三个地方：</p>\n<ol>\n<li>在实验中，同样加上了了noise。这个时候的noise是为了更充分地开发整个游戏空间。</li>\n<li>计算target的时候，actor加上noise，是为了预估更准确，网络更有健壮性。</li>\n<li>更新actor的时候，不需要加上noise，这里是希望actor能够寻着最大值。加上noise并没有任何意义。</li>\n</ol>\n<h3 id=\"TD3-实现\"><a href=\"#TD3-实现\" class=\"headerlink\" title=\"TD3 实现\"></a>TD3 实现</h3><p>TODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。</p>\n<p>这里的TD3仅针对自己的实验平台实现了类似于MATD3的效果，但是实际上，没有明确的MATD3。后面再考虑在gym上实现以加深理解。</p>\n<h2 id=\"A3C\"><a href=\"#A3C\" class=\"headerlink\" title=\"A3C\"></a>A3C</h2><p>强化学习的一个难点，智能体的用于学习的数据，需要智能体和环境不断进行交互。和一般有监督学习的先比，数据数量太少了。</p>\n<p>在算法没有更大进步的时候，有人就想出，如果有多个智能体和环境进行互动，那么每个智能体都能产出数据，这些数据就可以一起给模型进行学习了。</p>\n<p>由此诞生了A3C。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/A3C.png\" alt=\"A3C.png\"></p>\n<p>注意几点：</p>\n<ol>\n<li>在A3C中，worker不仅要和环境互动，产生数据，而且要自己从这些数据里面学习到“心得”。这里的所谓新的，其实就是计算出来的梯度；需要强调的是，worker向全局网络汇总的是梯度，而不是自己探索出来的数据。<blockquote>\n<p>在这一点上，很容易和DPPO混淆。DPPO和A3C，也是一个分布式的架构，但work自己并不学习，而是提交数据让全局网络学习。</p>\n</blockquote>\n</li>\n<li>worker向全局网络汇总梯度之后，并应用在全局网络的参数后，全局网络会把当前学习到的最新版本的参数，直接给worker。worker按照最新的网络继续跟环境做互动。互动后，再把梯度提交，获取新的参数…… 如此循环。</li>\n</ol>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/A3C1.png\" alt=\"A3C1.png\"></p>\n<h3 id=\"A3C-实现\"><a href=\"#A3C-实现\" class=\"headerlink\" title=\"A3C 实现\"></a>A3C 实现</h3><p>TODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。</p>\n<h2 id=\"DPPO\"><a href=\"#DPPO\" class=\"headerlink\" title=\"DPPO\"></a>DPPO</h2><p>DPPO和A3C的思路其实是一致的，希望用多个智能体同时和环境互动，并对全局的PPO网络进行更新。</p>\n<p>在A3C，需要跑数据并且计算好梯度，再更新全局网络。这是因为AC是一个在线的算法，所以在更新的时候，产生数据的策略和更新的策略需要时同一个网络。所以不能把worker产出的数据，直接给全局网络计算梯度用。</p>\n<p>但PPO解决了离线更新策略的问题，所以DPPO的工人只需要提供数据给全局网络，由全局网络从数据中直接学习。</p>\n<h3 id=\"DPPO-实现\"><a href=\"#DPPO-实现\" class=\"headerlink\" title=\"DPPO 实现\"></a>DPPO 实现</h3><p>TODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>到这里，传统强化学习的总结就结束了，后面由于我的科研方向是<code>多智能体强化学习</code>，会更新关于多智能体强化学习的算法。</p>\n","site":{"data":{"link":[{"class_name":"友情链接","class_desc":"那些人，那些事","link_list":[{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://d33wubrfki0l68.cloudfront.net/6657ba50e702d84afb32fe846bed54fba1a77add/827ae/logo.svg","descr":"快速、简单且强大的网志框架"}]},{"class_name":"网站","class_desc":"值得推荐的网站","link_list":[{"name":"Youtube","link":"https://www.youtube.com/","avatar":"https://i.loli.net/2020/05/14/9ZkGg8v3azHJfM1.png","descr":"视频网站"},{"name":"Weibo","link":"https://www.weibo.com/","avatar":"https://i.loli.net/2020/05/14/TLJBum386vcnI1P.png","descr":"中国最大社交分享平台"},{"name":"Twitter","link":"https://twitter.com/","avatar":"https://i.loli.net/2020/05/14/5VyHPQqR6LWF39a.png","descr":"社交分享平台"}]}]}},"cover_type":"img","excerpt":"","more":"<blockquote>\n<p>之前没有深入和系统的学习过强化学习，最近由于科研刚需，上网查资料刚好看到知乎上面有个大佬的强化学习的系列文章，感觉写的很好，于是就把他的文章看了一遍，顺便做了一些笔记，这里记录一下。</p>\n</blockquote>\n<p>原文： <a href=\"https://zhuanlan.zhihu.com/p/111895463\">https://zhuanlan.zhihu.com/p/111895463</a></p>\n<p>卧槽大佬讲的真的好，笔记记不了一点！！！建议大家都去看原文！</p>\n<p>后面可能会自己写一下 <code>MADDPG</code> 和 <code>MATD3</code> 的相关内容，到时候再更新。</p>\n<blockquote>\n<p>2023&#x2F;10&#x2F;23 这几天把大佬的强化学习专栏看了一遍了，真的很不错，但是我觉得还是得自己总结一下重难点，且这周五和东大的联合组会轮到我讲了，刚好深入理解一下强化学习算法。所以还是写一下这篇笔记吧！</p>\n</blockquote>\n<p>学习路线：<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.png\" alt=\"学习路线\"></p>\n<h2 id=\"马尔可夫树\"><a href=\"#马尔可夫树\" class=\"headerlink\" title=\"马尔可夫树\"></a>马尔可夫树</h2><p>强化学习的任务：</p>\n<ul>\n<li>我们希望用强化学习的方式，使某个<strong>智能体</strong>获得<strong>独立自主</strong>地完成某种任务的能力。 </li>\n<li>智能体学习和工作的地方，称为<strong>环境</strong>。</li>\n<li>所谓独立自主，就是智能体一旦启动，就不需要人指挥了。</li>\n</ul>\n<h3 id=\"经典马尔可夫链\"><a href=\"#经典马尔可夫链\" class=\"headerlink\" title=\"经典马尔可夫链\"></a>经典马尔可夫链</h3><p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E9%93%BE.png\" alt=\"马尔科夫链.png\"></p>\n<ul>\n<li>状态(state)：智能体观察到的当前环境的部分或者全部特征。<ul>\n<li>注意：环境的特征可能有许多，但只有智能体能够观察到的特征才算是状态。所以也用observation表示状态。</li>\n</ul>\n</li>\n<li>动作(action)：智能体做出的具体行为。<ul>\n<li><strong>动作空间</strong>就是该智能体能够做出的动作数量。智能体身处十字路口。那么我们的方向就有4个。也就是说，动作空间为4个动作。</li>\n</ul>\n</li>\n<li>奖励(reward)：智能体在某个状态下采取某个动作所获得的反馈。<ul>\n<li>奖励是一个标量，可以是正数，也可以是负数。奖励越大，说明智能体做的越好。奖励越小，说明智能体做的越差。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"RL一般步骤\"><a href=\"#RL一般步骤\" class=\"headerlink\" title=\"RL一般步骤\"></a>RL一般步骤</h3><ol>\n<li>智能体在环境中，观察到状态(S)；</li>\n<li>状态(S)被输入到智能体，智能体经过计算，选择动作(A);</li>\n<li>动作(A)使智能体进入另外一个状态(S)，并返回奖励(R)给智能体。</li>\n<li>智能体根据返回，调整自己的策略。 重复以上步骤，一步一步创造马尔科夫链。</li>\n</ol>\n<h3 id=\"马尔可夫树-1\"><a href=\"#马尔可夫树-1\" class=\"headerlink\" title=\"马尔可夫树\"></a>马尔可夫树</h3><p>马尔科夫链之所以是我们现在看到的一条链条。是因为我们站在现在，往过去看，所以是一条确定的路径。但如果我们往前看，就并不是一条路径，而是充满了各种”不确定性”， 即”马尔可夫树”。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E6%A0%91.png\" alt=\"马尔科夫树.png\"></p>\n<p>这种”不确定性”来自两个方面： </p>\n<ul>\n<li>智能体的行动选择(策略)。</li>\n<li>环境的不确定性。</li>\n</ul>\n<h2 id=\"RL中的Q值和V值\"><a href=\"#RL中的Q值和V值\" class=\"headerlink\" title=\"RL中的Q值和V值\"></a>RL中的Q值和V值</h2><p>并不能单纯通过R来衡量一个动作的好坏，因为R只是一个瞬时的反馈，而我们需要的是长期的反馈。在做决策的时候，需要把眼光放远点，把未来的价值换到当前，才能做出选择。</p>\n<p>我们希望可以有一种方法评估我做出每种选择价值。这样，只要看一下标记，以后的事情也不用理，选择那个动作价值更大，就选那个动作就可以了。</p>\n<ul>\n<li>评估动作的价值称为<strong>Q值</strong>：它代表了智能体选择这个动作后，一直到最终状态奖励总和的期望。</li>\n<li>评估状态的价值称为<strong>V值</strong>：它代表了智能体在这个状态下，一直到最终状态的奖励总和的期望。</li>\n</ul>\n<p>价值越高，表示从当前状态到最终状态能获得的平均奖励将会越高。因为智能体的目标数是获取尽可能多的奖励，所以智能体在当前状态，只需要选择价值高的动作就可以了。</p>\n<h3 id=\"V值的定义\"><a href=\"#V值的定义\" class=\"headerlink\" title=\"V值的定义\"></a>V值的定义</h3><p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/V%E5%80%BC%E7%9A%84%E5%AE%9A%E4%B9%89.png\" alt=\"V值的定义.png\"></p>\n<p>假设现在需要求某状态S的V值，可以这样：</p>\n<ol>\n<li>从S点出发，并影分身出若干个自己;</li>\n<li>每个分身按照当前的策略 选择行为;</li>\n<li>每个分身一直走到最终状态，并计算一路上获得的所有奖励总和;</li>\n<li>计算每个影分身获得的平均值,这个平均值就是要求的V值。</li>\n</ol>\n<p>总结：<code>从某个状态，按照策略 ，走到最终状态很多很多次；最终获得奖励总和的平均值，就是V值。</code></p>\n<p><code>V值跟选择的策略有很大的关系</code> 。</p>\n<p>看这样一个简化的例子，从S出发，只有两种选择，A1，A2；从A1，A2只有一条路径到最终状态，获得总奖励分别为10和20。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E4%BE%8B%E5%AD%901.png\" alt=\"例子1.png\"></p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%AD%96%E7%95%A51.png\" alt=\"策略1.png\"></p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%AD%96%E7%95%A52.png\" alt=\"策略2.png\"></p>\n<p>可以看出不同的策略，计算出的V值是不一样的。</p>\n<h3 id=\"Q值的定义\"><a href=\"#Q值的定义\" class=\"headerlink\" title=\"Q值的定义\"></a>Q值的定义</h3><p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/Q%E5%80%BC%E7%9A%84%E5%AE%9A%E4%B9%89.png\" alt=\"Q值的定义.png\"></p>\n<p>现在需要计算，某个状态S0下的一个动作A的Q值： </p>\n<ol>\n<li>从A这个节点出发，使用影分身之术； </li>\n<li>每个影分身走到最终状态,并记录所获得的奖励； </li>\n<li>求取所有影分身获得奖励的平均值，这个平均值就是要求的Q值。</li>\n</ol>\n<p>总结：<code>从某个状态选取动作A，走到最终状态很多很多次；最终获得奖励总和的平均值，就是Q值。</code></p>\n<p>与V值不同，Q值和策略并没有直接相关，而<code>与环境的状态转移概率相关，而环境的状态转移概率是不变的。</code></p>\n<h3 id=\"V值和Q值关系\"><a href=\"#V值和Q值关系\" class=\"headerlink\" title=\"V值和Q值关系\"></a>V值和Q值关系</h3><p><code>Q和V之间是可以相互换算的</code>。</p>\n<h4 id=\"Q值转V值\"><a href=\"#Q值转V值\" class=\"headerlink\" title=\"Q值转V值\"></a>Q值转V值</h4><p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/Q%E5%80%BC%E8%BD%ACV%E5%80%BC.png\" alt=\"Q值转V值.png\"></p>\n<p>从定义出发，我们要求的V值，就是从状态S出发，到最终获取的所获得的奖励总和的期望值。也就是蓝色框部分。</p>\n<p>S状态下有若干个动作，每个动作的Q值，就是从这个动作之后所获得的奖励总和的期望值。也就是红色框部分。</p>\n<p>假设已经计算出每个动作的Q值，那么在计算V值的时候就不需要一直走到最终状态了，只需要走到动作节点，看一下每个动作节点的Q值，根据策略 ，计算Q的期望就是V值了。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/Q%E5%80%BC%E8%BD%ACV%E5%80%BC1.png\" alt=\"Q值转V值1.png\"></p>\n<p>更正式的公式如下：<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%8F1.png\" alt=\"公式1.png\"></p>\n<p>解释：<code>一个状态的V值，就是这个状态下的所有动作的Q值，在策略下的期望。</code></p>\n<h4 id=\"V值转Q值\"><a href=\"#V值转Q值\" class=\"headerlink\" title=\"V值转Q值\"></a>V值转Q值</h4><p><code>Q是V的期望。</code>而这里不需要关注策略，这里是环境的状态转移概率决定的。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/V%E5%80%BC%E8%BD%ACQ%E5%80%BC.png\" alt=\"V值转Q值.png\"></p>\n<p><code>当选择A，并转移到新的状态时，就能获得奖励，我们必须把这个奖励也算上！</code></p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/V%E5%80%BC%E8%BD%ACQ%E5%80%BC1.png\" alt=\"V值转Q值1.png\"></p>\n<p>更正式的公式如下：<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%8F2.png\" alt=\"公式2.png\"></p>\n<blockquote>\n<p>折扣率 在强化学习中，有某些参数是人为主观制定。这些参数并不能推导，但在实际应用中却能解决问题，所以我们称这些参数为超参数，而折扣率就是一个超参数。</p>\n</blockquote>\n<h3 id=\"V值转V值\"><a href=\"#V值转V值\" class=\"headerlink\" title=\"V值转V值\"></a>V值转V值</h3><p>实际应用中，更多会从V到V。其实就是把Q值的公式代入V值的公式。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/V%E5%80%BC%E8%BD%ACV%E5%80%BC.png\" alt=\"V值转V值.png\"></p>\n<h2 id=\"MC\"><a href=\"#MC\" class=\"headerlink\" title=\"MC\"></a>MC</h2><p>蒙地卡罗方法(Monte-Carlo)</p>\n<h3 id=\"蒙地卡罗算法\"><a href=\"#蒙地卡罗算法\" class=\"headerlink\" title=\"蒙地卡罗算法\"></a>蒙地卡罗算法</h3><ol>\n<li>把智能体放到环境的任意状态；</li>\n<li>从这个状态开始按照策略进行选择动作，并进入新的状态。</li>\n<li>重复步骤2，直到最终状态；</li>\n<li>从最终状态开始向前回溯：计算每个状态的G值。</li>\n<li>重复1-4多次，然后平均每个状态的G值，这就是要求的V值。</li>\n</ol>\n<h3 id=\"G值的意义\"><a href=\"#G值的意义\" class=\"headerlink\" title=\"G值的意义\"></a>G值的意义</h3><p>重要：<code>G值是一个具体的累积奖励值，而Q值和V值是对这个累积奖励值的估计。</code></p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/G%E5%80%BC%E7%9A%84%E6%84%8F%E4%B9%89.png\" alt=\"G值的意义.png\"></p>\n<ul>\n<li>第一步，根据策略往前走，一直走到最后，期间什么都不用算，还需要记录每一个状态转移，获得多少奖励r即可。</li>\n<li>第二步，从终点往前走，一遍走一遍计算G值。G值等于上一个状态的G值(记作G’),乘以一定的折扣(gamma),再加上r。</li>\n</ul>\n<p>所以G值的意义在于，<code>在这一次游戏中，某个状态到最终状态的奖励总和(理解时可以忽略折扣值gamma)。</code></p>\n<p>当进行多次试验后，有可能会经过某个状态多次，通过回溯，也会有多个G值。 重复刚才说的，每一个G值，就是每次到最终状态获得的奖励总和。<code>而V值是某个状态下，通过影分身到达最终状态，所有影分身获得的奖励的平均值。</code></p>\n<p>理解：</p>\n<ol>\n<li><code>G的意义：在某个路径上，状态S到最终状态的总收获。 </code></li>\n<li><code>V和G的关系：V是G的平均数。</code></li>\n</ol>\n<h3 id=\"V和策略相关\"><a href=\"#V和策略相关\" class=\"headerlink\" title=\"V和策略相关\"></a>V和策略相关</h3><p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%AD%96%E7%95%A53.png\" alt=\"策略3.png\"></p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%AD%96%E7%95%A54.png\" alt=\"策略4.png\"></p>\n<p>由于策略改变，经过某条路径的概率就会产生变化。因此最终试验经过的次数就不一样了。</p>\n<h3 id=\"蒙地卡罗算法的缺点\"><a href=\"#蒙地卡罗算法的缺点\" class=\"headerlink\" title=\"蒙地卡罗算法的缺点\"></a>蒙地卡罗算法的缺点</h3><p>每一次游戏，都需要先从头走到尾，再进行回溯更新。如果最终状态很难达到，那可能每一次都要转很久很久才能更新一次G值。</p>\n<h3 id=\"MC的更新公式\"><a href=\"#MC的更新公式\" class=\"headerlink\" title=\"MC的更新公式\"></a>MC的更新公式</h3><p>上面计算V值其实相当麻烦，因为每一个状态都需要建立一个空间，记录每个轨迹下的G值。</p>\n<p>那有没有一种方法，可以用更少的空间计算V值呢？当然有，那就是<code>增量更新</code>。</p>\n<h4 id=\"增量更新\"><a href=\"#增量更新\" class=\"headerlink\" title=\"增量更新\"></a>增量更新</h4><p>现在我们只需要记录之前的平均值V，新加进来的G，和次数N。我们把V和G的差，除以N，然后再加到原来的平均值V上，就能计算到新的V值。 </p>\n<p><code>V_new = (V_old - G) * (1 / N) + V_old</code></p>\n<ul>\n<li>V_old：原来的V值</li>\n<li>G：这一次回溯后，计算出来的G值</li>\n<li>N: 这个状态被经过多少次</li>\n<li>V_new：新计算出来的V值</li>\n</ul>\n<h4 id=\"更进一步\"><a href=\"#更进一步\" class=\"headerlink\" title=\"更进一步\"></a>更进一步</h4><p>这样计算还是比较麻烦，我们甚至可以不用记录N，把(1&#x2F;N)设置成为一个固定的数，例如0.1、0.2(还记得超参数吗？)。我们把这个值称为<code>学习率</code>。</p>\n<p>这就相当于，我们新来的G和V_old的差的十分之一，会被加到V_new上！也就是说，每一次G都会引导V增加一些或者减少一些，而这个V值慢慢就会接近真正的V值。</p>\n<p>这里的G，也称为V的更新目标。</p>\n<p>而学习率就可以理解为，每次V向目标靠近的幅度；学习率越大，表示向G靠近的幅度越大，反之则越小。</p>\n<h4 id=\"两种理解方式\"><a href=\"#两种理解方式\" class=\"headerlink\" title=\"两种理解方式\"></a>两种理解方式</h4><p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E4%B8%A4%E7%A7%8D%E7%90%86%E8%A7%A3%E6%96%B9%E5%BC%8F.png\" alt=\"两种理解方式.png\"></p>\n<h2 id=\"TD\"><a href=\"#TD\" class=\"headerlink\" title=\"TD\"></a>TD</h2><p>时序差分算法TD(Temporal-Difference)</p>\n<h3 id=\"TD和MC的比较\"><a href=\"#TD和MC的比较\" class=\"headerlink\" title=\"TD和MC的比较\"></a>TD和MC的比较</h3><p>TD算法对蒙地卡罗(MC)进行了改进：</p>\n<ol>\n<li>和蒙地卡罗(MC)不同：<code>TD算法只需要走N步，不用走到终点，就可以开始回溯更新。</code> </li>\n<li>和蒙地卡罗(MC)一样：需要先走N步，每经过一个状态，把奖励r记录下来。然后开始回溯。 </li>\n<li>那么，状态的V值怎么算呢？其实和蒙地卡罗一样，就假设N步之后，就到达了最终状态了。<ul>\n<li>假设“最终状态”上之前没有走过，所以这个状态上的纸是空白的。这个时候我们就当这个状态为0. </li>\n<li>假设“最终状态”上已经走过了，这个状态的V值，就是当前值。然后我们开始回溯。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"直观理解\"><a href=\"#直观理解\" class=\"headerlink\" title=\"直观理解\"></a>直观理解</h3><p>从A状态，经过1步，到B状态。什么都不管就当B状态是最终状态了。此时<code>N = 0</code>，也叫做<code>TD(0)</code>。</p>\n<p>但B状态本身就带有一定的价值，也就是V值。其意义就是从B状态到最终状态的总价值期望。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/TD(0).png\" alt=\"TD(0).png\"></p>\n<p>假设B状态的V值是对的，那么，通过回溯计算，就能知道A状态的更新目标了。</p>\n<h3 id=\"更新公式\"><a href=\"#更新公式\" class=\"headerlink\" title=\"更新公式\"></a>更新公式</h3><p>TD并走走完整段路程，而是半路就截断。用半路的路牌，更新当前的路牌。 <code>所以只需要把MC的更新目标，改为TD的更新目标即可。</code></p>\n<p><code>在MC，G是更新目标，而在TD，我们只不过把更新目标从G，改成r+gamma*V</code></p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E6%9B%B4%E6%96%B0%E5%85%AC%E5%BC%8F.png\" alt=\"更新公式.png\"></p>\n<h2 id=\"Q-learning\"><a href=\"#Q-learning\" class=\"headerlink\" title=\"Q-learning\"></a>Q-learning</h2><p>之前用TD(0)预估状态价值V:<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/TD(0)%E6%9B%B4%E6%96%B0%E5%85%AC%E5%BC%8F.png\" alt=\"TD(0)更新公式.png\"></p>\n<p>图解：<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/TD(0)%E5%9B%BE%E8%A7%A3.png\" alt=\"TD(0)图解.png\"></p>\n<p>TD能够用在V值，那么也能用在计算Q值上。</p>\n<h3 id=\"TD之于Q值估算\"><a href=\"#TD之于Q值估算\" class=\"headerlink\" title=\"TD之于Q值估算\"></a>TD之于Q值估算</h3><p>现在用上TD的思路。 在St，智能体根据策略pi，选择动作At，进入S(t+1)状态，并获得奖励R。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%94%A8TD%E4%BC%B0%E8%AE%A1Q%E5%80%BC.png\" alt=\"用TD估计Q值.png\"></p>\n<ul>\n<li>V(St+1)的意义是，在St+1到最终状态获得的奖励期望值。 </li>\n<li>Q(St,At)的意义是，在Q(St,At)到最终状态获得的奖励期望值。</li>\n</ul>\n<p>在这里要估算两个东西，一个是V值，一个是Q值。人们想到用下一个动作的Q值代替V值。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%94%A8%E4%B8%8B%E4%B8%80%E4%B8%AA%E5%8A%A8%E4%BD%9C%E7%9A%84Q%E4%BB%A3%E6%9B%BFV.png\" alt=\"用下一个动作的Q代替V.png\"></p>\n<p>但是，这里就有个坑：<code>虽然从状态St+1到动作At+1之间没有奖励反馈，但还是不能直接用At+1的Q价值，代替St+1的V价值。</code></p>\n<p>因为<code>马尔可夫树!</code><br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E5%9D%91%E7%9A%84%E8%A7%A3%E9%87%8A.png\" alt=\"坑的解释.png\"></p>\n<p><code>在St+1下，可能有很多动作At+1。不同动作的Q值自然是不同的。 所以Q(St+1,At+1)并不能等价于V(St+1)。</code></p>\n<p>虽然不相等，但不代表不能用其中一个来代表V(St+1)。人们认为有个可能的动作产生的Q值能够一定程度代表V(St+1)。</p>\n<ol>\n<li>在相同策略下产生的动作At+1。这就是<code>SARSA</code>。</li>\n<li>选择能够产生最大Q值的动作At+1。这就是<code>Qlearning</code>。</li>\n</ol>\n<h3 id=\"SARSA\"><a href=\"#SARSA\" class=\"headerlink\" title=\"SARSA\"></a>SARSA</h3><p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/SARSA.png\" alt=\"SARSA.png\"></p>\n<p>其实SARSA和上一篇说的TD估算V值几乎一模一样，只不过挪了一下，从V改成Q了。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/SARSA%E5%85%AC%E5%BC%8F.png\" alt=\"SARSA公式.png\"><br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/TD(0)%E4%B8%8ESARSA%E5%AF%B9%E6%AF%94.png\" alt=\"TD(0)与SARSA对比.png\"></p>\n<p>注意: <code>这里的At+1是在同一策略产生的。也就是说,St选At的策略和St+1选At+1是同一个策略。这也是SARSA和Qlearning的唯一区别。</code></p>\n<h3 id=\"Qlearning\"><a href=\"#Qlearning\" class=\"headerlink\" title=\"Qlearning\"></a>Qlearning</h3><p><code>Qlearning将能够产生最大Q值的动作At+1的Q值作为V(St+1)的替代。</code></p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/Qlearning%E5%9B%BE%E8%A7%A3.png\" alt=\"Qlearning图解.png\"></p>\n<p>理解：因为需要寻着的是能获得最多奖励的动作，Q值就代表能够获得今后奖励的期望值。所以选择Q值最大的，也只有最大Q值能够代表V值。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/Qlearning%E5%85%AC%E5%BC%8F.png\" alt=\"Qlearning公式.png\"></p>\n<p><code>Q(S,a)的更新目标</code>：在Qlearning，用下一状态St+1的最大Q值替代St+1的V值。V(St+1)加上状态转移产生的奖励R。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/SARSA%E5%85%AC%E5%BC%8F.png\" alt=\"SARSA公式.png\"></p>\n<p>Qleanring和SARSA，两者的差别仅仅在Qlearning中多了个max。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>Qlearning和SARSA都是基于TD(0)的。不过在之前的介绍中，用TD(0)估算状态的V值。而Qlearning和SARSA估算的是动作的Q值。 </li>\n<li>Qlearning和SARSA的核心原理，是用下一个状态St+1的V值，估算Q值。 </li>\n<li>既要估算Q值，又要估算V值会显得比较麻烦。所以用下一状态下的某一个动作的Q值，来代表St+1的V值。 </li>\n<li>Qlearning和SARSA唯一的不同，就是用什么动作的Q值替代St+1的V值。 <ul>\n<li>SARSA 选择的是在St同一个策略产生的动作。 </li>\n<li>Qlearning 选择的是能够产生最大的Q值的动作。</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"Qlearning-实现\"><a href=\"#Qlearning-实现\" class=\"headerlink\" title=\"Qlearning 实现\"></a>Qlearning 实现</h3><p>TODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。</p>\n<h2 id=\"深度神经网络\"><a href=\"#深度神经网络\" class=\"headerlink\" title=\"深度神经网络\"></a>深度神经网络</h2><p>深度强化学习：用深度神经网络辅助强化学习。</p>\n<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h4><p>假如知道X，y有关系，那么不妨先设这个关系可以通过函数Magic(X)获得。也就是说Magic(X)&#x3D;y。</p>\n<p>这在手写数字识别中，X就是需要识别的图片，y就是识别出来的数字分类。 我们的任务就是需要求这个Magic函数。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/Magic(X).png\" alt=\"Magic(X).png\"></p>\n<p>现在假设有另外一个函数Magic’(),这个函数是由深度神经网络构成。</p>\n<p>在刚开始的时候，很明显Magic’(X) 并不等于y，例如输入手写图片8，Magic’()计算后，认为数字8只有20%，但数字9有40%。</p>\n<p>…但这没所谓，因为这是刚开始。我们的任务是让Magic’(X)产生的结果y’ 和 y尽量接近。</p>\n<p>y’和真实y之间的差距，叫损失，也就是loss。有时候也会把y称为目标(target)，因为任务就是让Magic’(X)越来越靠近这个目标。</p>\n<p>衡量loss的方法有很多，定义不同loss对神经网络学习有着重大差别，这个话题太大，我们暂时不展开。</p>\n<p>loss越大，表示和目标差距越远；loss越小，表示和目标越近，当小到一定值，那么就可以认为Magic’(X)和Magic(X)函数非常接近，可以通过Magic’(X)计算出y。</p>\n<p>当有许许多多这样的y，经过许许多多轮后。Magic’就越来越贴近Magic。也就是说X和y之间的关系就能越来越好地表达出来。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/Magic'(X).png\" alt=\"Magic&#39;(X).png\"></p>\n<h4 id=\"放大镜下的深度神经网络\"><a href=\"#放大镜下的深度神经网络\" class=\"headerlink\" title=\"放大镜下的深度神经网络\"></a>放大镜下的深度神经网络</h4><p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E6%95%B0%E6%8D%AE%E5%8A%A0%E5%B7%A5%E5%8E%82.png\" alt=\"数据加工厂.png\"></p>\n<p>现在可以把深度神经网络的Magic函数，看成是一个数据加工厂。而X就是要进行加工的数据。</p>\n<p>为了让这个数据加工厂运行得更快，通常需要把要加工的数据X变得更<code>标准</code>一些。</p>\n<p>例如图片的尺寸大小，有多少通道的颜色等等，然后<code>分批(batch)</code>，输入工厂。</p>\n<p>在输入工厂的时候，会有一个‘大门’，称为<code>输入层</code>，去检查数据是否已经按照工厂的标准整理好。</p>\n<p>数据工厂里有很多车间，按照流水线排列。和一般的自动化车间一样，需要定义好这个车间的操作标准。</p>\n<p>一般称这些车间叫<code>层</code>。<code>这些层都已经封装好在tensorflow、tensorlayer、pytorch等里面了</code>。常用的层包括：<code>Dense、Conv2D、LSTM、Reshape、Flatten</code>等。</p>\n<p>最终，数据工厂会把原数据X，加工成产品<code>y&#39;(也叫做：logits)</code>。从源数据加工成产品的过程，叫<code>正向传播</code>。</p>\n<p>但产品y’是否是一个合格的产品，我们还需要我们真正的<code>y(lables)</code>作为标准去鉴定。把<code>鉴定出来的差距就是loss</code>。</p>\n<p>工厂根据鉴定结果，以梯度下降的方式，反向传递给每个车间，告诉车间要如何调整各自的参数，让源数据和产出y’能够对应起来。</p>\n<p>经过N个批次（batch）的数据输入，然后鉴别，工厂调整。最后工厂就能达到生产标准了。也就是说magic函数已经被训练好了。</p>\n<h2 id=\"DQN\"><a href=\"#DQN\" class=\"headerlink\" title=\"DQN\"></a>DQN</h2><blockquote>\n<p><code>DQN: TD + 神经网络</code></p>\n</blockquote>\n<p>在Qlearning中，有一个Qtable，记录着在每一个状态下，各个动作的Q值。</p>\n<p>Qtable的作用是当输入状态S，通过查表返回能够获得最大Q值的动作A。也就是需要找一个S-A的对应关系。</p>\n<p>这种方式很适合格子游戏。因为格子游戏中的每一个格子就是一个状态，但在现实生活中，很多状态并不是离散而是连续的。</p>\n<p><code>用神经网络解决Qlearning中动作离散的问题，让动作变成连续的，这就是DQN。</code></p>\n<p><code>Deep network + Qlearning = DQN</code></p>\n<p>神经网络万能函数(神经网络)Magic(X)接受输入一个状态S，它能告诉我，每个动作的Q值是怎样的。</p>\n<h3 id=\"理解DQN中的神经网络\"><a href=\"#理解DQN中的神经网络\" class=\"headerlink\" title=\"理解DQN中的神经网络\"></a>理解DQN中的神经网络</h3><p>Qtable三维可视化：<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/Qtable%E4%B8%89%E7%BB%B4%E5%8F%AF%E8%A7%86%E5%8C%96.png\" alt=\"Qtable三维可视化.png\"></p>\n<p>图中每根柱子的高度，表示状态S下，选择动作A的Q值。</p>\n<p><code>现在用函数来表示，相当于要扭曲一条曲线，这条曲线穿过了离散状态下的所有点。</code></p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E6%89%AD%E6%9B%B2%E7%9A%84%E6%9B%B2%E7%BA%BF.png\" alt=\"扭曲的曲线.png\"></p>\n<p>从二维状态看：<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E4%BA%8C%E7%BB%B4%E6%9B%B2%E7%BA%BF.png\" alt=\"二维曲线.png\"></p>\n<p>所以现在不但可以取状态3和状态4，还可以取状态3.5的Q值。</p>\n<p>现在就很清楚了，其实Qlearning和DQN并没有根本的区别。<code>只是DQN用神经网络，也就是一个函数替代了原来Qtable而已。</code></p>\n<h3 id=\"更新目标\"><a href=\"#更新目标\" class=\"headerlink\" title=\"更新目标\"></a>更新目标</h3><p>更新目标就是Magic(X)，最终要向这个Magix(X)靠近。</p>\n<p>在Qlearning，用下一状态St+1的最大Q值替代St+1的V值。V(St+1)加上状态转移产生的奖励R。就是Q(S,a)的更新目标。</p>\n<p>DQN和Qlearning一样：<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DQN.png\" alt=\"DQN.png\"><br>假设需要更新当前状态St下的某动作A的Q值：Q(S,A),可以这样做： </p>\n<ol>\n<li>执行A，往前一步，到达St+1; </li>\n<li>把St+1输入Q网络，计算St+1下所有动作的Q值； </li>\n<li>获得最大的Q值加上奖励R作为更新目标； </li>\n<li>计算损失 <ul>\n<li>Q(S,A)相当于有监督学习中的logits</li>\n<li>maxQ(St+1) + R 相当于有监督学习中的lables </li>\n<li>用mse函数，得出两者的loss </li>\n<li>Loss &#x3D; (Q(S, A) - [gamma * maxQ(St+1) + R])^2</li>\n</ul>\n</li>\n<li>用loss更新Q网络。(反向传播)</li>\n</ol>\n<blockquote>\n<p>通常会使用一个折扣因子 gamma 来考虑未来奖励的重要性。折扣因子 gamma 的作用是对未来奖励进行衰减，使得当前时刻的奖励比未来时刻的奖励更具有影响力。</p>\n</blockquote>\n<p>也就是，用Q网络估算出来的两个相邻状态的Q值，他们之间的距离，就是一个r的距离。这个就是更新目标<br><code>Target = R + gamma * maxQ(St+1)</code></p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DQN%E5%85%AC%E5%BC%8F.png\" alt=\"DQN公式.png\"></p>\n<p>总结：</p>\n<ol>\n<li>其实DQN就是Qlearning扔掉Qtable，换上深度神经网络。</li>\n<li>解决连续型问题，如果表格不能表示，就用函数，而最好的函数就是深度神经网络。</li>\n<li>和有监督学习不同，深度强化学习中，需要自己找更新目标。通常在马尔科夫链体系下，两个相邻状态状态差一个奖励r经常能够作为更新目标。</li>\n</ol>\n<h3 id=\"DQN-实现\"><a href=\"#DQN-实现\" class=\"headerlink\" title=\"DQN 实现\"></a>DQN 实现</h3><p>TODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。</p>\n<h2 id=\"Double-DQN\"><a href=\"#Double-DQN\" class=\"headerlink\" title=\"Double DQN\"></a>Double DQN</h2><h3 id=\"经验回放\"><a href=\"#经验回放\" class=\"headerlink\" title=\"经验回放\"></a>经验回放</h3><p>经验回放解决了强化学习中的两个问题： <code>训练网络数据采集慢</code> 和 <code>过度拟合</code></p>\n<p>当然这个慢是对比网络训练的速度。在强化学习中，网络训练经过GPU的加速，比起游戏来时快很多的。所以训练的瓶颈一般在智能体跟环境互动的过程中。 如果能把互动过程中的数据，都存起来，当数据最够多的时候，再训练网络，那么就快很多了。</p>\n<p>把每一步的s，选择的a，进入新的状态s’，获得的奖励r，新状态是否为终止状态。都存在一个叫回放缓存的地方(replay buffer)。<br>当智能体与环境互动期间，就会不断产生这样一条一条数据。 数据1： 数据2： 数据3： ….<br>当数据量足够，达到设定一个batch的大小，便从中抽出一个batch大小的数据，把这笔数据一起放入网络进行训练。<br>训练之后继续进行游戏，继续把新产生的数据添加到回放缓存里…<br>就这样每次都随机抽出一个batch大小的数据训练智能体。这样，以前产生的数据同样也能用来训练数据了, 效率自然更高。</p>\n<p>使用经验回放除了使训练更高效，同时也减少了训练产生的过度拟合的问题。<br>过度拟合，放到人身上就是<code>过度依赖局部经验</code>了。<br>就像孩子发现爸爸有胡子，就认为所有男人都有胡子一样。<br>同样，在有监督学习中，如果只给模型看少量的几张图，并且告诉模型这是猫。这样模型就只会从这几张图学习到猫的特点，而更多的猫模型可能就不认得了。我们说这就是过度拟合造成的，导致模型不够健壮。</p>\n<h3 id=\"DQN的问题\"><a href=\"#DQN的问题\" class=\"headerlink\" title=\"DQN的问题\"></a>DQN的问题</h3><p>DQN的目标：<br><code>Target = R + gamma * maxQ(St+1)</code></p>\n<p>目标本身就包含一个Q网络，理论上是没有问题的，但，这样会造成Q网络的学习效率比较低，而且不稳定。</p>\n<p>如果把训练神经网络比喻成射击游戏，在target中有Q网络的话，就相当于在射击一个移动靶，因为每次射击一次，靶就会挪动一次。相比起固定的靶，无疑加上了训练的难度。</p>\n<p>要解决这个问题，就把移动靶弄成是固定的靶，先停止10秒。10后挪动靶再打新的靶。这就是<code>Fixed Q-targets</code>的思路。</p>\n<h3 id=\"Fixed-Q-targets\"><a href=\"#Fixed-Q-targets\" class=\"headerlink\" title=\"Fixed Q-targets\"></a>Fixed Q-targets</h3><p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/fix-Q-targets.png\" alt=\"fix-Q-targets.png\"></p>\n<p>其他地方和DQN一样，唯一不同是用了两个Q网络。</p>\n<ul>\n<li>原来的Q网络，用于估算Q(s);</li>\n<li>targetQ网络, targetQ自己并不会更新，也就是它在更新的过程中是固定的，用于计算更新目标。<ul>\n<li><code>y = r + gamma * max(targetQ(s&#39;))</code></li>\n<li>进行N次更新后，就把新Q网络的参数赋值给旧Q网络，保持训练的稳定性。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Double-DQN-1\"><a href=\"#Double-DQN-1\" class=\"headerlink\" title=\"Double DQN\"></a>Double DQN</h3><p>DQN有一个显著的问题，就是DQN估计的Q值往往会偏大。这是由于Q值是以下一个s’的Q值的最大值来估算的，但下一个state的Q值也是一个估算值，也依赖它的下一个state的Q值…，这就导致了Q值往往会有偏大的的情况出现。</p>\n<p>这个思路也很直观。如果只有一个Q网络，Q值的估计往往偏大。那就用两个Q网络，因为两个Q网络的参数有差别，所以对于同一个动作的评估也会有少许不同。选取评估出来较小的值来计算更新目标。这样就能有效避免Q网络估值偏大的情况发生了。</p>\n<p>另外一种做法也需要用到两个Q网络：Q1网络推荐能够获得最大Q值的动作；Q2网络计算这个动作在Q2网络中的Q值。</p>\n<h3 id=\"Double-DQN-实现\"><a href=\"#Double-DQN-实现\" class=\"headerlink\" title=\"Double DQN 实现\"></a>Double DQN 实现</h3><p>TODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。</p>\n<h2 id=\"Duel-DQN\"><a href=\"#Duel-DQN\" class=\"headerlink\" title=\"Duel DQN\"></a>Duel DQN</h2><h3 id=\"Dueling-DQN原理\"><a href=\"#Dueling-DQN原理\" class=\"headerlink\" title=\"Dueling DQN原理\"></a>Dueling DQN原理</h3><p>回到Qtable， 原来会直接预估Q值表的数据，现在改为需要预估两个值：S值和A值。即<code>Q = S + A</code></p>\n<ul>\n<li>S: 在特定状态下采取任何行动的平均价值,也就是该state下的Q值的平均数。</li>\n<li>A: 在特定状态下采取特定动作相对于采取平均动作的优势。A的平均值为0。</li>\n</ul>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/Q=S+A%E8%A1%A8%E6%A0%BC.png\" alt=\"Q=S+A表格.png\"></p>\n<p>普通DQN的Q网络，可以理解用一个曲线去拟合Qtable的Q值。现在取一个截面，表示当取某个S下，各个动作的Q值。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E6%99%AE%E9%80%9ADQN.png\" alt=\"普通DQN.png\"></p>\n<p>普通DQN在提升某个状态下的S值时，只会提升某个动作。</p>\n<p>Dueling DQN： 在网络更新的时候，由于有A值之和必须为0的限制，所以网络会优先更新S值。S值是Q值的平均数，平均数的调整相当于一次性S下的所有Q值都更新一遍。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DuelDQN.png\" alt=\"DuelDQN.png\"></p>\n<p>如上图，橙色虚线是平均值，也就是S值。 所以网络在更新的时候，不但更新某个动作的Q值，而是把这个状态下，所有动作的Q值都调整一次。这样，就可以在更少的次数让更多的值进行更新。</p>\n<blockquote>\n<p>这样调整最后的数值是对的吗？放心，在DuelingDQN，我们只是优先调整S值。但最终我们的target目标是没有变的，所以我们最后更新出来也是对的。</p>\n</blockquote>\n<h3 id=\"网络架构\"><a href=\"#网络架构\" class=\"headerlink\" title=\"网络架构\"></a>网络架构</h3><p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DuelDQN%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84.png\" alt=\"DuelDQN网络架构.png\"></p>\n<p>可以把dueling DQN分为三部分：</p>\n<ul>\n<li>第一部分：和普通DQN一样，用来处理和学习数据。</li>\n<li>第二部分：计算svalue，就是让网络预估的平均值。</li>\n<li>第三部分：计算avalue，和svalue一样，都是从h2层输入到该层。然后对avalue进行归一化处理，也就是增加“A值的平均值为0”的限制。<ul>\n<li>归一化的处理很简单，求A值的平均值，然后用A值减去平均值即可。A-mean(A)</li>\n</ul>\n</li>\n</ul>\n<p>DeulingDQN的实现很简单，只需要修改Q网络的网络架构就可以了。而且可以和其他DQN的技巧，例如经验回放，固定网络，双网络计算目标等可以共用。</p>\n<h3 id=\"Duel-DQN-实现\"><a href=\"#Duel-DQN-实现\" class=\"headerlink\" title=\"Duel DQN 实现\"></a>Duel DQN 实现</h3><p>TODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。</p>\n<h2 id=\"PG\"><a href=\"#PG\" class=\"headerlink\" title=\"PG\"></a>PG</h2><p>策略梯度(Policy Gradient)</p>\n<p>之前的MC、TD、Qlearning、DQN都是基于值的方法，就是一定要算Q值和V值。但事实上我们的最终目的是要找一个策略，能获得最多的奖励。</p>\n<p>这就是<code>策略梯度(Policy Gradient)</code></p>\n<h3 id=\"PG原理\"><a href=\"#PG原理\" class=\"headerlink\" title=\"PG原理\"></a>PG原理</h3><p>认识到：</p>\n<blockquote>\n<p><code>DQN: TD + 神经网络</code><br><code>PG: MC + 神经网络</code></p>\n</blockquote>\n<p>PG中的Magic(state):<br>当输入state的时候，输出pi，告诉智能体这个状态，应该如何应对： &#x3D; magic(state)。如果智能体的动作是对的，那么就让这个动作获得更多被选择的几率；相反，如果这个动作是错的，那么这个动作被选择的几率将会减少。</p>\n<p>复习一下蒙地卡罗：<br>从某个state出发，然后一直走，直到<code>最终状态</code>。然后从最终状态原路返回，对每个状态评估G值。 所以G值能够表示在策略下，智能体选择的这条路径的好坏。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E5%A4%8D%E4%B9%A0MC.png\" alt=\"复习MC.png\"></p>\n<h3 id=\"直观感受PG\"><a href=\"#直观感受PG\" class=\"headerlink\" title=\"直观感受PG\"></a>直观感受PG</h3><p>从某个state出发，可以采取三个动作。 假设当前智能体对这一无所知，那么，可能采取平均策略 Pi0 &#x3D; [33%,33%,33%]。智能体出发，选择动作A，到达最终状态后开始回溯，计算得到 G &#x3D; 1。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%9B%B4%E8%A7%82%E6%84%9F%E5%8F%97PG1.png\" alt=\"直观感受PG1.png\"></p>\n<p>更新策略，因为该路径选择了A而产生的，并获得G &#x3D; 1；因此要更新策略：让A的概率提升，相对地，BC的概率就会降低。 计算得新策略为： Pi1 &#x3D; [50%,25%,25%]。虽然B概率比较低，但仍然有可能被选中。第二轮刚好选中B。智能体选择了B，到达最终状态后回溯，计算得到 G &#x3D; -1。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%9B%B4%E8%A7%82%E6%84%9F%E5%8F%97PG2.png\" alt=\"直观感受PG2.png\"></p>\n<p>此时对B动作的评价比较低，并且希望以后会少点选择B，因此要降低B选择的概率，而相对地，AC的选择将会提高。计算得新策略为： Pi2 &#x3D; [55%,15%,30%]。最后随机到C，回溯计算后，计算得G &#x3D; 5。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%9B%B4%E8%A7%82%E6%84%9F%E5%8F%97PG3.png\" alt=\"直观感受PG3.png\"></p>\n<p>C比A还要多得多。因此这一次更新，C的概率需要大幅提升，相对地，AB概率降低。 Pi3 &#x3D; [20%,5%,75%]。</p>\n<h3 id=\"PG-实现\"><a href=\"#PG-实现\" class=\"headerlink\" title=\"PG 实现\"></a>PG 实现</h3><p>TODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。</p>\n<h2 id=\"AC\"><a href=\"#AC\" class=\"headerlink\" title=\"AC\"></a>AC</h2><blockquote>\n<p><code>AC: PG + DQN(TD + 神经网络)</code></p>\n</blockquote>\n<p>PG利用带权重的梯度下降方法更新策略，而获得权重的方法是MC计算G值。MC需要完成整个游戏过程，直到最终状态，才能通过回溯计算G值。这使得PG方法的效率被限制。</p>\n<p>改为TD可以解决上面的问题。接下来又面临另一个问题：<br>在PG，我们需要计算G值；那么在TD中，我们应该怎样估算每一步的Q值呢？答案是用神经网络。</p>\n<p>也就是说，Actor-Critic，其实是用了两个网络：</p>\n<p>两网络都输入状态S，Critic比Actor多一个St+1: </p>\n<ul>\n<li>一个网络输出策略，负责选择动作，把这个网络成为Actor； </li>\n<li>一个网络负责计算每个动作的分数，把这个网络成为Critic。</li>\n</ul>\n<h3 id=\"TD-error\"><a href=\"#TD-error\" class=\"headerlink\" title=\"TD-error\"></a>TD-error</h3><p><code>在DQN预估的是Q值，在AC中的Critic，估算的是V值。</code>不估算Q值是因为效果不好。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E4%BC%B0%E7%AE%97Q.png\" alt=\"为什么不估算Q.png\"></p>\n<p>假设用Critic网络，预估到S状态下三个动作A1，A2，A3的Q值分别为1,2,10。 但在开始的时候，采用平均策略，于是随机到A1。于是用策略梯度的带权重方法更新策略，这里的权重就是Q值。于是策略会更倾向于选择A1，意味着更大概率选择A1。结果A1的概率就持续升高…</p>\n<p>这就掉进了正数陷阱。明明希望A3能够获得更多的机会，最后却是A1获得最多的机会。这是为什么呢？<br>因为Q值用于是一个正数，如果权重是一个正数，那么相当于提高对应动作的选择的概率。权重越大，调整的幅度将会越大。其实当有足够的迭代次数，这个是不用担心这个问题的。因为总会有机会抽中到权重更大的动作，因为权重比较大，抽中一次就能提高很高的概率。</p>\n<p>但在强化学习中，往往没有足够的时间去和环境互动。这就会出现由于运气不好，使得一个很好的动作没有被采样到的情况发生。要解决这个问题，可以通过减去一个baseline，令到权重有正有负。而通常这个baseline，选取的是权重的平均值。减去平均值之后，值就变成有正有负了。而<code>Q值的期望(均值)就是V。</code></p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/TD-error.png\" alt=\"TD-error.png\"></p>\n<p>可以得到更新的权重：<code>Q(s,a)-V(s)</code>，Q(s,a)用<code>gamma * V(s&#39;) + r</code> 代替。<br>得到TD-error：<code>TD-error = gamma * V(s&#39;) + r - V(s)</code></p>\n<p>和之前DQN的更新公式非常像，只不过DQN的更新用了Q，而TD-error用的是V。如果Critic是用来预估V值，而不是原来讨论的Q值。那么，这个TD-error是用来更新Critic的loss了！没错，Critic的任务就是让TD-error尽量小。然后TD-error给Actor做更新。</p>\n<p>至于为啥TD-error是用来更新Critic的loss呢？<br>取TD-error的方差来作为critic的loss，其实类似于DQN中的Q网络，认为下个状态的估算值比目前状态的Q值更精确，所以把下个状态的估算值作为目标，来更新Q网络。此处单看critic网络吗，其目的仅在于预测V值，所以它的估算值也要向更准确的下个阶段估算值来靠近，即TD-error越来越小。<br>再来看actor网络，TD-error在其中的作用仅是更新网络时的权重，其与动作的选择并无直接关系。前期TD-error较大，每次更新时，动作的概率都会进行相对较大的改动，随着不断地训练，动作的概率逐渐成熟，TD-error越来越小，所以每次更新时对动作概率的改动也随之减小。</p>\n<h4 id=\"总结-1\"><a href=\"#总结-1\" class=\"headerlink\" title=\"总结\"></a>总结</h4><ol>\n<li>为了避免正数陷阱，希望Actor的更新权重有正有负。因此，把Q值减去他们的均值V。有：<code>Q(s,a)-V(s)</code></li>\n<li>为了避免需要预估V值和Q值，把Q和V统一；由于<code>Q(s,a) = gamma * V(s&#39;) + r - V(s)</code>。所以我们得到TD-error公式： <code>TD-error = gamma * V(s&#39;) + r - V(s)</code></li>\n<li><code>TD-error就是Actor更新策略时候，带权重更新中的权重值</code>；</li>\n<li>现在Critic不再需要预估Q，而是预估V。而根据马可洛夫链所学，知道TD-error就是Critic网络需要的loss，也就是说，Critic函数需要最小化TD-error。</li>\n</ol>\n<h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><ol>\n<li>定义两个network：Actor 和 Critic</li>\n<li>进行N次更新。<ol>\n<li>从状态s开始，执行动作a，得到奖励r，进入状态s’</li>\n<li>记录的数据。</li>\n<li>把输入到Critic，根据公式： TD-error &#x3D; gamma * V(s’) + r - V(s) 求 TD-error，并缩小TD-error</li>\n<li>把输入到Actor，计算策略分布。</li>\n</ol>\n</li>\n</ol>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/AC%E7%AE%97%E6%B3%95.png\" alt=\"AC算法.png\"></p>\n<p>可以看出：在PG，智能体需要从头一直跑到尾，直到最终状态才开始进行学习。 在AC，智能体采用是每步更新的方式。</p>\n<h3 id=\"AC-实现\"><a href=\"#AC-实现\" class=\"headerlink\" title=\"AC 实现\"></a>AC 实现</h3><p>TODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。</p>\n<h2 id=\"PPO\"><a href=\"#PPO\" class=\"headerlink\" title=\"PPO\"></a>PPO</h2><p>PPO是基于AC框架的</p>\n<h3 id=\"正态分布\"><a href=\"#正态分布\" class=\"headerlink\" title=\"正态分布\"></a>正态分布</h3><p>首先要想办法处理连续动作的输出问题。</p>\n<ul>\n<li>离散动作：离散动作就像一个个的按钮，按一个按钮就能智能体就做一个动作。</li>\n<li>连续动作：相当于按钮不但有开关的概念，而且还有力度大小的概念。就像开车，不但是前进后退转弯，并且要控制油门踩多深，刹车踩多少的，转弯时候转向转多少的问题。</li>\n</ul>\n<p>在离散动作空间的问题中，最终输出的策略呈现出下面形式：<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%A6%BB%E6%95%A3%E5%8A%A8%E4%BD%9C-%E7%AD%96%E7%95%A5%E5%88%86%E5%B8%83.png\" alt=\"离散动作-策略分布.png\"></p>\n<p>假设动作空间有只有action1 和 action2，有40%的概率选择action1 ，60%概率选择action2。即在此状态下的策略分布: pi &#x3D; [0.4, 0.6]。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E8%BF%9E%E7%BB%AD%E5%9E%8B%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"连续型概率分布示意图.png\"></p>\n<p>在连续型，不再用数组表示，而是用函数表示。例如，策略分布函数 ： P &#x3D; （action）代表在策略下，选择某个action的概率P。</p>\n<p>用神经网络预测输出的策略是一个固定的shape，而不是连续的。那又什么办法可以表示连续型的概率呢？可以假定策略分布函数服从一个概率分布，例如正态分布。</p>\n<p>这样，只用两个参数就可以表示了。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E6%AD%A3%E6%80%81%E5%88%86%E5%B8%83.png\" alt=\"正态分布.png\"></p>\n<p>正态分布：</p>\n<ul>\n<li>sigma：表示方差，当sigma越大，图像越扁平；sigma约小，图像越突出。而最大值所在的位置，就是中轴线。</li>\n<li>mu：表示平均数，也就是整个正态分布的中轴线。mu的变化，表示整个图像向左右移动。</li>\n</ul>\n<p>神经网络直接输出mu和sigma，就能获得整个策略的概率密度函数了。现在，当要按概率选择一个动作时，就只需要按照这个概率密度函数，随机抽取一个数，就能得到一个动作了。</p>\n<h3 id=\"AC的问题\"><a href=\"#AC的问题\" class=\"headerlink\" title=\"AC的问题\"></a>AC的问题</h3><p>上面的正态分布解决了AC处理连续状态空间的问题。但是，AC还有一个问题：AC产生的数据，只能进行1次更新，更新完就只能丢掉，等待下一次的数据。</p>\n<ul>\n<li><p>行为策略：行为策略是代理在与环境交互时采取行动的策略。它决定了代理在当前状态下选择每一个可能的行动的概率分布。不是当前策略，用于产出数据。</p>\n</li>\n<li><p>目标策略：目标策略是代理在训练过程中试图优化的策略。它是代理最终想要学习到的最优策略，它通常被设计为最大化期望累积奖励。会更新的策略，是需要被优化的策略。</p>\n</li>\n<li><p>在线策略：在线策略是指在与环境交互时实时地采取行动，并根据实时的反馈来更新策略。也就是说，代理在与环境互动时，采取行动并根据实际结果来调整策略。目标策略和行为策略是同一个策略，那么是在线策略。</p>\n<ul>\n<li>实时更新：在线策略会根据每次与环境交互的结果来进行即时更新。</li>\n<li>依赖实时反馈：在线策略依赖于实时的环境反馈来进行学习和调整。</li>\n</ul>\n</li>\n<li><p>离线策略：离线策略是指在事先收集好的数据集上进行训练，而不需要实时地与环境交互。也就是说，代理使用事先收集的经验数据来训练策略，而不依赖于实时环境反馈。目标策略和行为策略不是同一个策略，那么是离线策略。</p>\n<ul>\n<li>离线数据：训练过程中不需要实时地与环境进行交互，可以使用先前收集的数据。</li>\n<li>无需环境互动：训练过程中不需要实时环境反馈。</li>\n</ul>\n</li>\n</ul>\n<p>例子：<br>如果在智能体和环境进行互动时产生的数据打上一个标记。标记这是第几版本的策略产生的数据,例如 1， 2… 10。现在智能体用的策略 10，需要更新到 11。如果算法只能用 10版本的产生的数据来更新，那么这个就是在线策略；如果算法允许用其他版本的数据来更新，那么就是离线策略。</p>\n<p>例如PG，就是一个在线策略。因为PG用于产生数据的策略（行为策略），和需要更新的策略（目标策略）是一致。 而DQN则是一个离线策略。我们会让智能体在环境互动一定次数，获得数据。用这些数据优化策略后，继续跑新的数据。但老版本的数据仍然是可以用的。也就是说，产生数据的策略，和要更新的目标策略不是同一个策略。所以DQN是一个离线策略。</p>\n<p><strong>为什么PG和AC中的Actor更新策略，不能像DQN一样把数据存起来，只能用一次产生的数据？</strong></p>\n<p>看一个例子：<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%AD%96%E7%95%A5P%E5%92%8C%E7%AD%96%E7%95%A5B.png\" alt=\"策略P和策略B.png\"></p>\n<blockquote>\n<p>TD-error 可以理解为从状态S 到下一个状态动作的价值，所以动作1的 TD-error 大，所以希望选择动作1的概率大</p>\n</blockquote>\n<p>假设，已知在同一个环境下，有两个动作可以选择。现在两个策略，分别是P和B： P: [0.5,0.5] B: [0.1,0.9]</p>\n<p>现在按照两个策略，进行采样；也就是分别按照这两个策略，以S状态下出发，与环境进行10次互动。获得如图数据。那么，可以用B策略下获得的数据，更新P吗？</p>\n<p>答案是不行，回顾PG算法，<code>PG算法会按照TD-error作为权重，更新策略。权重越大，更新幅度越大；权重越小，更新幅度越小。</code></p>\n<p>但可以从如下示意图看到，如果用行动策略B[0.1,0.9]产出的数据，对目标策略P进行更新，动作1会被更新1次，而动作2会更新9次。虽然动作1的TD-error比较大，但由于动作2更新的次数更多，最终动作2的概率会比动作1的要大。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%AD%96%E7%95%A5P%E5%92%8C%E7%AD%96%E7%95%A5B%E6%9B%B4%E6%96%B0%E7%A4%BA%E6%84%8F%E5%9B%BE.png\" alt=\"策略P和策略B更新示意图.png\"></p>\n<p>这不是期望看到的更新结果，因为动作1的TD-error比动作2要大，希望的是选择概率动作1的能更多。由此可以明白，在策略更新的时候不能使用其他策略产生的数据。</p>\n<p><strong>为什么DQN可以多次重复使用数据？</strong></p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DQN%E6%9B%B4%E6%96%B0%E7%9A%84%E6%98%AFQ%E5%80%BC.png\" alt=\"DQN更新的是Q值.png\"></p>\n<p>两个角度：</p>\n<ul>\n<li>更新Q值，和策略无关。 在同一个动作出发，可能会通往不同的state，但其中的概率是状态转移概率决定的，与环境有关，而不是策略所决定的。所以产生的数据和策略并没有关系。</li>\n<li>在DQN的更新中是有”目标”的。 虽然目标比较飘忽，但每次更新，其实都是尽量向目标靠近。无论更新多少次，最终都会在目标附近徘徊。但PG算法，更新是不断远离原来的策略分布的，所以远离多少、远离的次数比例都必须把握好。</li>\n</ul>\n<blockquote>\n<p>在Actor-Critic (AC) 方法中，Critic 网络更新的是状态值函数（Value Function）V，而不是动作值函数（Q函数）。</p>\n</blockquote>\n<h3 id=\"重要性采样技术\"><a href=\"#重要性采样技术\" class=\"headerlink\" title=\"重要性采样技术\"></a>重要性采样技术</h3><p>在PPO中，如果想使用策略B的数据来更新策略P，那就要把TD-error乘上一个重要性权重(importance weight)。</p>\n<p>在这里<code>IW = P（a）/ B（a）</code></p>\n<p>就是 <code>IW = 目标策略出现动作a的概率 / 行为策略出现a的概率</code>。</p>\n<ul>\n<li>目标策略：要更新的策略。</li>\n<li>行为策略：数据的策略。</li>\n</ul>\n<p>这里是用策略B的数据来更新策略P，所以P是目标策略，B是行为策略。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E9%87%8D%E8%A6%81%E6%80%A7%E6%9D%83%E9%87%8D%E8%A1%A8%E6%A0%BC.png\" alt=\"重要性权重表格.png\"></p>\n<p>现在即使用P策略: [0.5,0.5]进行更新，a1提升的概率也会比a2的更多。</p>\n<p>PPO使用重要性采样技术把AC从在线策略变成离线策略。</p>\n<h3 id=\"N步更新\"><a href=\"#N步更新\" class=\"headerlink\" title=\"N步更新\"></a>N步更新</h3><p>之前的TD叫做TD(0)，而N步更新为TD(n)。可以看成TD(0)其实是TD(n)的一种特殊情况。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/TD(N).png\" alt=\"TD(N).png\"></p>\n<p>如图，实际上只需要计算最后的V(s’)，根据这个估算的V(s’), 反推经过的所有state的V值。这个其实和PG估算G的过程是一样的，只不过并不需要走到最后，而是中途截断，用网络估算。</p>\n<p><code>V = R + gamma * V(s&#39;)</code></p>\n<h3 id=\"总结-2\"><a href=\"#总结-2\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>实际上，P策略和B策略差异并不能太大，为了能处理这个问题，有两个做法，PPO1 和 PPO2 。主流是PPO2。</p>\n<ol>\n<li>用AC来解决连续型控制问题。方法是输入mu和sigma，构造一个正态分布来表示策略； </li>\n<li>PPO延展了TD(0)，变成TD(N)的N步更新； </li>\n<li>AC是一个在线算法，但为了增加AC的效率，希望把它变成一个离线策略，这样就可以多次使用数据了。为了解决这个问题，PPO使用了重要性采样。</li>\n</ol>\n<h3 id=\"PPO-实现\"><a href=\"#PPO-实现\" class=\"headerlink\" title=\"PPO 实现\"></a>PPO 实现</h3><p>TODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。</p>\n<h2 id=\"DDPG\"><a href=\"#DDPG\" class=\"headerlink\" title=\"DDPG\"></a>DDPG</h2><p>DDPG，全称是deep deterministic policy gradient，深度确定性策略梯度算法。</p>\n<ul>\n<li>deep: 深度网络。</li>\n<li>policy gradient: PG</li>\n<li>deterministic: 其实DDPG也是解决连续控制型问题的的一个算法，不过和PPO不一样，PPO输出的是一个策略，也就是一个概率分布，而DDPG输出的直接是一个动作。</li>\n</ul>\n<p>DDPG更接近DQN，是用一个actor去弥补DQN不能处理连续控制性问题的缺点。</p>\n<h3 id=\"回顾DQN\"><a href=\"#回顾DQN\" class=\"headerlink\" title=\"回顾DQN\"></a>回顾DQN</h3><p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E5%9B%9E%E9%A1%BEDQN.png\" alt=\"回顾DQN.png\"></p>\n<p>从公式中也能看出，DQN不能用于连续控制问题原因，是因为maxQ(s’,a’)函数只能处理离散型的。这个就是DDPG中的Actor的功能: 用一个magic函数，直接替代maxQ(s’,a’)的功能。也就是说，期待输入状态s，magic函数返回我们动作action的取值，这个取值能够让q值最大。</p>\n<h3 id=\"理解DDPG\"><a href=\"#理解DDPG\" class=\"headerlink\" title=\"理解DDPG\"></a>理解DDPG</h3><p>DDPG中Critic的功能，像是DQN的深度网络，用一张布去覆盖Qlearning中的Qtable。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%90%86%E8%A7%A3DDPG1.png\" alt=\"理解DDPG1.png\"></p>\n<p>当把某个state输入到DDPG的Actor中的时候，相当于在这块布上做沿着state所在的位置剪开，会看到这个边缘是一条曲线。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%90%86%E8%A7%A3DDPG2.png\" alt=\"理解DDPG2.png\"></p>\n<blockquote>\n<p>注意: 这条曲线很像概率分布，但要一定注意，这里并不是策略，也不是PPO和AC中的V值。是在某个状态state下，选择某个动作值的时候，能获得的Q值。</p>\n</blockquote>\n<p>Actor的任务就是在寻找这个曲线的最高点，然后返回能获得这个最高点，也是最大Q值的动作。 所以，DDPG其实并不是PG，并没有做带权重的梯度更新。而是在梯度上升，在寻找最大值。 这也就解释了，为什么DDPG是一个离线策略，但可以多次更新却不用importance sampling。这是因为这个算法就是DQN，和策略没有直接的关系。</p>\n<h3 id=\"DDPG-1\"><a href=\"#DDPG-1\" class=\"headerlink\" title=\"DDPG\"></a>DDPG</h3><p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DDPG1.png\" alt=\"DDPG1.png\"></p>\n<p>整理下：</p>\n<h4 id=\"Critic\"><a href=\"#Critic\" class=\"headerlink\" title=\"Critic\"></a>Critic</h4><ol>\n<li>Critic网络的作用是预估Q，虽然它还叫Critic，但和AC中的Critic不一样，这里预估的是Q不是V；</li>\n<li>注意Critic的输入有两个：动作和状态，需要一起输入到Critic中；</li>\n<li>Critic网络的loss其还是和AC一样，用的是TD-error。</li>\n</ol>\n<h4 id=\"Actor\"><a href=\"#Actor\" class=\"headerlink\" title=\"Actor\"></a>Actor</h4><ol>\n<li>和AC不同，Actor输出的是一个动作；</li>\n<li>Actor的功能是，输出一个动作A，这个动作A输入到Critic后，能够获得最大的Q值。</li>\n<li>Actor的更新方式和AC不同，不是用带权重梯度更新，而是用梯度上升。</li>\n</ol>\n<p>和DQN一样，DDPG更新的时候如果更新目标在不断变动，会造成更新困难。所以DDPG和DQN一样，用了固定网络(fix network)技术，就是先冻结住用来求target的网络。在更新之后，再把参数赋值到target网络。</p>\n<p>所以实际做的时候使用了4个网络：actor, critic, Actor_target, cirtic_target。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DDPG2.png\" alt=\"DDPG2.png\"></p>\n<blockquote>\n<p>目标网络只是用在求target的过程中。如果不是求target用的，就不用目标网络。</p>\n</blockquote>\n<h3 id=\"DDPG-实现\"><a href=\"#DDPG-实现\" class=\"headerlink\" title=\"DDPG 实现\"></a>DDPG 实现</h3><p>TODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。</p>\n<h2 id=\"TD3\"><a href=\"#TD3\" class=\"headerlink\" title=\"TD3\"></a>TD3</h2><p>Twin Delayed Deep Deterministic policy gradient algorithm，双延迟深度确定性策略梯度</p>\n<p>TD3是对DDPG的优化，三个重要优化。</p>\n<h3 id=\"double-network\"><a href=\"#double-network\" class=\"headerlink\" title=\"double network\"></a>double network</h3><p>DDPG起源于DQN，DQN有一个众所周知的问题就是Q值会被过高估计。这是因为用argmaxQ(s’)去代替V(s’)，去评估Q(s)。当每一步都这样做的时候，很容易就会出现高估Q值的情况。</p>\n<p>在TD3中，用了两套网络估算Q值，相对较小的那个作为更新的目标。这就是TD3的基本思路。</p>\n<p>回顾DDPG：<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/DDPG2.png\" alt=\"DDPG2.png\"></p>\n<p>通过Critic网络估算动作的A值。一个Critic的评估可能会较高。所以加一个。</p>\n<p>TD3需要用到6个网络：<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/TD3.png\" alt=\"TD3.png\"></p>\n<p>在目标网络中，估算出来的Q值会用min()函数求出较小值。以这个值作为更新的目标。这个目标会更新两个网络 Critic网络_1 和 Critic网络_2。 这两个网络是完全独立，他们只是都用同一个目标进行更新。 剩余的就和DDPG一样了。过一段时间，把学习好的网络赋值给目标网络。</p>\n<h4 id=\"Critic部分的学习\"><a href=\"#Critic部分的学习\" class=\"headerlink\" title=\"Critic部分的学习\"></a>Critic部分的学习</h4><p>只有在计算Critic的更新目标时，才用target network。其中就包括了一个Policy network，用于计算A’；两个critic target Q network ,用于计算两个Q值：Q1(A’) 和Q2(A’)。</p>\n<p>Q1(A’) 和Q2(A’) 取最小值 min(Q1,Q2) 将代替DDPG的 Q(a’) 计算更新目标，也就是说： target &#x3D; min(Q1,Q2) * gamma + r</p>\n<p>target 将会是 Q_network_1 和 Q_network_2 两个网络的更新目标。</p>\n<p><code>TD-error_1 = gamma * min(Q1,Q2) + r - Q1</code><br><code>TD-error_2 = gamma * min(Q1,Q2) + r - Q2</code></p>\n<p>既然更新目标是一样的，那么为什么还需要两个网络呢?</p>\n<p>虽然更新目标一样，两个网络会越来越趋近与和实际q值相同。但由于网络参数的初始值不一样，会导致计算出来的值有所不同。所以可以有空间选择较小的值去估算q值，避免q值被高估。</p>\n<h4 id=\"Actor部分的学习\"><a href=\"#Actor部分的学习\" class=\"headerlink\" title=\"Actor部分的学习\"></a>Actor部分的学习</h4><p>DDPG网络图像上就可以想象成一张布，覆盖在qtable上。当输入某个状态的时候，相当于这块布上的一个截面，能够看到在这个状态下的一条曲线。</p>\n<p>而actor的任务，就是用梯度上升的方法，寻着这条线的最高点。</p>\n<p>对于actor来说，其实并不在乎Q值是否会被高估，他的任务只是不断做梯度上升，寻找这条最大的Q值。随着更新的进行Q1和Q2两个网络，将会变得越来越像。所以用Q1还是Q2，还是两者都用，对于actor的问题不大。</p>\n<h3 id=\"actor延迟更新\"><a href=\"#actor延迟更新\" class=\"headerlink\" title=\"actor延迟更新\"></a>actor延迟更新</h3><p>actor更新的delay，也就是说相对于critic可以更新多次后，actor再进行更新。</p>\n<p>为什么要这样做呢？</p>\n<p>回到qnet拟合出来的那块”布”上。 qnet在学习过程中，的q值是不断变化的，也就是说这块布是不断变形的。所以要寻着最高点的任务有时候就挺难为的actor了。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%90%86%E8%A7%A3DDPG1.png\" alt=\"理解DDPG1.png\"><br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/%E7%90%86%E8%A7%A3DDPG2.png\" alt=\"理解DDPG2.png\"></p>\n<p>可以想象，本来是最高点的，当actor好不容易去到最高点；q值更新了，这并不是最高点。这时候actor只能转头再继续寻找新的最高点。更坏的情况可能是actor被困在次高点，没有找到正确的最高点。</p>\n<p>所以可以把Critic的更新频率，调的比Actor要高一点。让critic更加确定，actor再行动。</p>\n<h3 id=\"target网络噪声\"><a href=\"#target网络噪声\" class=\"headerlink\" title=\"target网络噪声\"></a>target网络噪声</h3><p>TD3中，价值函数的更新目标每次都在action上加一个小扰动，这个操作就是target policy smoothing regularization</p>\n<p>为什么要这样呢？</p>\n<p>回到关于“布”的想象。 在DDPG中，计算target的时候，输入时s_和a_，获得q，也就是这块布上的一点A。通过估算target估算另外一点s，a，也就是布上的另外一点B的Q值。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/Q'%E4%BC%B0%E7%AE%97Q%201.png\" alt=\"Q&#39;估算Q 1.png\"></p>\n<p>在TD3中，计算target时候，输入s_到actor输出a后，给a加上噪音，让a在一定范围内随机。这又什么好处呢。</p>\n<p>好处就是，当更新多次的时候，就相当于用A点附近的一小部分范围（准确来说是在s_这条线上的一定范围）的去估算B，这样可以让B点的估计更准确，更健壮。<br><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/Q'%E4%BC%B0%E8%AE%A1Q%202.png\" alt=\"Q&#39;估计Q 2.png\"></p>\n<p>这里注意三个地方：</p>\n<ol>\n<li>在实验中，同样加上了了noise。这个时候的noise是为了更充分地开发整个游戏空间。</li>\n<li>计算target的时候，actor加上noise，是为了预估更准确，网络更有健壮性。</li>\n<li>更新actor的时候，不需要加上noise，这里是希望actor能够寻着最大值。加上noise并没有任何意义。</li>\n</ol>\n<h3 id=\"TD3-实现\"><a href=\"#TD3-实现\" class=\"headerlink\" title=\"TD3 实现\"></a>TD3 实现</h3><p>TODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。</p>\n<p>这里的TD3仅针对自己的实验平台实现了类似于MATD3的效果，但是实际上，没有明确的MATD3。后面再考虑在gym上实现以加深理解。</p>\n<h2 id=\"A3C\"><a href=\"#A3C\" class=\"headerlink\" title=\"A3C\"></a>A3C</h2><p>强化学习的一个难点，智能体的用于学习的数据，需要智能体和环境不断进行交互。和一般有监督学习的先比，数据数量太少了。</p>\n<p>在算法没有更大进步的时候，有人就想出，如果有多个智能体和环境进行互动，那么每个智能体都能产出数据，这些数据就可以一起给模型进行学习了。</p>\n<p>由此诞生了A3C。</p>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/A3C.png\" alt=\"A3C.png\"></p>\n<p>注意几点：</p>\n<ol>\n<li>在A3C中，worker不仅要和环境互动，产生数据，而且要自己从这些数据里面学习到“心得”。这里的所谓新的，其实就是计算出来的梯度；需要强调的是，worker向全局网络汇总的是梯度，而不是自己探索出来的数据。<blockquote>\n<p>在这一点上，很容易和DPPO混淆。DPPO和A3C，也是一个分布式的架构，但work自己并不学习，而是提交数据让全局网络学习。</p>\n</blockquote>\n</li>\n<li>worker向全局网络汇总梯度之后，并应用在全局网络的参数后，全局网络会把当前学习到的最新版本的参数，直接给worker。worker按照最新的网络继续跟环境做互动。互动后，再把梯度提交，获取新的参数…… 如此循环。</li>\n</ol>\n<p><img src=\"/../image/%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0/A3C1.png\" alt=\"A3C1.png\"></p>\n<h3 id=\"A3C-实现\"><a href=\"#A3C-实现\" class=\"headerlink\" title=\"A3C 实现\"></a>A3C 实现</h3><p>TODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。</p>\n<h2 id=\"DPPO\"><a href=\"#DPPO\" class=\"headerlink\" title=\"DPPO\"></a>DPPO</h2><p>DPPO和A3C的思路其实是一致的，希望用多个智能体同时和环境互动，并对全局的PPO网络进行更新。</p>\n<p>在A3C，需要跑数据并且计算好梯度，再更新全局网络。这是因为AC是一个在线的算法，所以在更新的时候，产生数据的策略和更新的策略需要时同一个网络。所以不能把worker产出的数据，直接给全局网络计算梯度用。</p>\n<p>但PPO解决了离线更新策略的问题，所以DPPO的工人只需要提供数据给全局网络，由全局网络从数据中直接学习。</p>\n<h3 id=\"DPPO-实现\"><a href=\"#DPPO-实现\" class=\"headerlink\" title=\"DPPO 实现\"></a>DPPO 实现</h3><p>TODO: 这里所有算法的代码仅仅是看了一遍，还没有自己手写一遍，等这周联合组会后再说。</p>\n<h2 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h2><p>到这里，传统强化学习的总结就结束了，后面由于我的科研方向是<code>多智能体强化学习</code>，会更新关于多智能体强化学习的算法。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"clx1l2pdq0001nfgnaobr95o7","category_id":"clx1l2pds0004nfgnheb865a8","_id":"clx1l2pdu000enfgn3vjp5qoe"},{"post_id":"clx1l2pds0003nfgnebztemnd","category_id":"clx1l2pdu0009nfgnhcz28afw","_id":"clx1l2pdu000infgn246v0h13"},{"post_id":"clx1l2pdv000lnfgn4yc34rmf","category_id":"clx1l2pdv000onfgn3bvvewr4","_id":"clx1l2pdx000ynfgngik88445"},{"post_id":"clx1l2pdv000nnfgnbyuahakb","category_id":"clx1l2pdv000onfgn3bvvewr4","_id":"clx1l2pdx0012nfgn5wvk2772"},{"post_id":"clx1l2pdw000wnfgn642i3cny","category_id":"clx1l2pdv000onfgn3bvvewr4","_id":"clx1l2pdx0016nfgn7dtg9ed0"},{"post_id":"clx1l2pdv000qnfgndm6xcf6i","category_id":"clx1l2pdx000xnfgna6s9gb9u","_id":"clx1l2pdx0017nfgn96rp2guo"},{"post_id":"clx1l2pdw000rnfgn97wbd0g9","category_id":"clx1l2pdx0014nfgnhwhy18xj","_id":"clx1l2pdx001bnfgn3rth0jox"},{"post_id":"clx1l2pdw000snfgnh0us03ks","category_id":"clx1l2pdx0014nfgnhwhy18xj","_id":"clx1l2pdx001enfgnfdi94cie"},{"post_id":"clx1l2pdx0010nfgndsq6d63a","category_id":"clx1l2pdx001anfgn0mlef89o","_id":"clx1l2pdy001lnfgn5ijbft1s"},{"post_id":"clx1l2pdw000vnfgncxgh4i55","category_id":"clx1l2pdx001anfgn0mlef89o","_id":"clx1l2pdy001nnfgnfp9956vl"},{"post_id":"clx1l2pdw000vnfgncxgh4i55","category_id":"clx1l2pdy001jnfgn6hht5ue0","_id":"clx1l2pdy001pnfgnfua2g2yy"}],"PostTag":[{"post_id":"clx1l2pdq0001nfgnaobr95o7","tag_id":"clx1l2pdt0005nfgn4s1tfa5t","_id":"clx1l2pdu000bnfgnhddr4074"},{"post_id":"clx1l2pds0003nfgnebztemnd","tag_id":"clx1l2pdu000anfgndj02a6ta","_id":"clx1l2pdu000jnfgndftmhcqb"},{"post_id":"clx1l2pds0003nfgnebztemnd","tag_id":"clx1l2pdu000fnfgn4zzidr1c","_id":"clx1l2pdu000knfgnegsj66qw"},{"post_id":"clx1l2pdv000lnfgn4yc34rmf","tag_id":"clx1l2pdv000pnfgn3staabiy","_id":"clx1l2pdx0011nfgngsku66oj"},{"post_id":"clx1l2pdv000lnfgn4yc34rmf","tag_id":"clx1l2pdw000unfgn9n8hgtui","_id":"clx1l2pdx0013nfgnde5ha4fz"},{"post_id":"clx1l2pdv000nnfgnbyuahakb","tag_id":"clx1l2pdx000znfgneqdoha9z","_id":"clx1l2pdx001dnfgndzhq0hnd"},{"post_id":"clx1l2pdv000nnfgnbyuahakb","tag_id":"clx1l2pdx0015nfgn4262ehdr","_id":"clx1l2pdx001fnfgnelcccqdn"},{"post_id":"clx1l2pdv000nnfgnbyuahakb","tag_id":"clx1l2pdw000unfgn9n8hgtui","_id":"clx1l2pdy001infgn3chw368u"},{"post_id":"clx1l2pdv000qnfgndm6xcf6i","tag_id":"clx1l2pdx0015nfgn4262ehdr","_id":"clx1l2pdy001qnfgngiizdq9p"},{"post_id":"clx1l2pdv000qnfgndm6xcf6i","tag_id":"clx1l2pdx000znfgneqdoha9z","_id":"clx1l2pdy001rnfgnh8nx7g00"},{"post_id":"clx1l2pdv000qnfgndm6xcf6i","tag_id":"clx1l2pdy001knfgn99s174dr","_id":"clx1l2pdy001tnfgn7jae5h2l"},{"post_id":"clx1l2pdv000qnfgndm6xcf6i","tag_id":"clx1l2pdy001mnfgnhmqx3zkx","_id":"clx1l2pdy001unfgncts553ya"},{"post_id":"clx1l2pdw000rnfgn97wbd0g9","tag_id":"clx1l2pdy001onfgn0vci8sfz","_id":"clx1l2pdy001wnfgnh72k7b39"},{"post_id":"clx1l2pdw000rnfgn97wbd0g9","tag_id":"clx1l2pdy001snfgn8g70deip","_id":"clx1l2pdy001xnfgnb9lz3foa"},{"post_id":"clx1l2pdw000rnfgn97wbd0g9","tag_id":"clx1l2pdu000fnfgn4zzidr1c","_id":"clx1l2pdy001znfgn90npcwsu"},{"post_id":"clx1l2pdw000snfgnh0us03ks","tag_id":"clx1l2pdy001onfgn0vci8sfz","_id":"clx1l2pdy0021nfgnen230pu3"},{"post_id":"clx1l2pdw000snfgnh0us03ks","tag_id":"clx1l2pdy001snfgn8g70deip","_id":"clx1l2pdy0022nfgn4b7ycse7"},{"post_id":"clx1l2pdw000snfgnh0us03ks","tag_id":"clx1l2pdu000fnfgn4zzidr1c","_id":"clx1l2pdy0024nfgn2ioda1zk"},{"post_id":"clx1l2pdw000vnfgncxgh4i55","tag_id":"clx1l2pdy0020nfgnbzfl3dr8","_id":"clx1l2pdy0026nfgnb0ek1eve"},{"post_id":"clx1l2pdw000vnfgncxgh4i55","tag_id":"clx1l2pdy0023nfgngf90az5e","_id":"clx1l2pdy0027nfgnfh5dh3ov"},{"post_id":"clx1l2pdw000vnfgncxgh4i55","tag_id":"clx1l2pdt0005nfgn4s1tfa5t","_id":"clx1l2pdy0029nfgn4fxjaj4t"},{"post_id":"clx1l2pdw000wnfgn642i3cny","tag_id":"clx1l2pdy0025nfgn8ov97sqs","_id":"clx1l2pdy002anfgnbd57cvwv"},{"post_id":"clx1l2pdw000wnfgn642i3cny","tag_id":"clx1l2pdw000unfgn9n8hgtui","_id":"clx1l2pdz002bnfgn67z05e08"},{"post_id":"clx1l2pdx0010nfgndsq6d63a","tag_id":"clx1l2pdy0020nfgnbzfl3dr8","_id":"clx1l2pdz002cnfgn86de79aj"},{"post_id":"clx1l2pdx0010nfgndsq6d63a","tag_id":"clx1l2pdt0005nfgn4s1tfa5t","_id":"clx1l2pdz002dnfgn4w5ua5gt"}],"Tag":[{"name":"算法","_id":"clx1l2pdt0005nfgn4s1tfa5t"},{"name":"hexo","_id":"clx1l2pdu000anfgndj02a6ta"},{"name":"教程","_id":"clx1l2pdu000fnfgn4zzidr1c"},{"name":"Java","_id":"clx1l2pdv000pnfgn3staabiy"},{"name":"面经","_id":"clx1l2pdw000unfgn9n8hgtui"},{"name":"前端","_id":"clx1l2pdx000znfgneqdoha9z"},{"name":"移动端","_id":"clx1l2pdx0015nfgn4262ehdr"},{"name":"react","_id":"clx1l2pdy001knfgn99s174dr"},{"name":"react-native","_id":"clx1l2pdy001mnfgnhmqx3zkx"},{"name":"k8s","_id":"clx1l2pdy001onfgn0vci8sfz"},{"name":"Kubernetes","_id":"clx1l2pdy001snfgn8g70deip"},{"name":"强化学习","_id":"clx1l2pdy0020nfgnbzfl3dr8"},{"name":"多智能体强化学习","_id":"clx1l2pdy0023nfgngf90az5e"},{"name":"测试开发","_id":"clx1l2pdy0025nfgn8ov97sqs"}]}}